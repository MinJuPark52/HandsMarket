{"ast":null,"code":"import { create } from \"zustand\";\nimport { persist } from \"zustand/middleware\";\nvar useLoginStore = create()(persist(function (set) {\n  return {\n    uid: \"\",\n    email: \"\",\n    nickname: \"\",\n    profileImage: \"\",\n    userType: \"\",\n    isLoggedIn: false,\n    // 로그인 성공 시 사용자 정보와 로그인 상태를 저장\n    setLogin: function setLogin(uid, email, nickname, profileImage) {\n      var userType = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : \"\";\n      return set({\n        uid: uid,\n        email: email,\n        nickname: nickname,\n        profileImage: profileImage,\n        userType: userType,\n        isLoggedIn: true\n      });\n    },\n    // 로그아웃 시 상태 초기화\n    logout: function logout() {\n      return set({\n        uid: \"\",\n        email: \"\",\n        nickname: \"\",\n        profileImage: \"\",\n        userType: \"\",\n        isLoggedIn: false\n      });\n    }\n  };\n}, {\n  name: \"login-storage\",\n  // 로컬스토리지에 저장할 이름\n  partialize: function partialize(state) {\n    return {\n      // 저장할 상태의 일부만 선택\n      uid: state.uid,\n      email: state.email,\n      nickname: state.nickname,\n      profileImage: state.profileImage,\n      userType: state.userType,\n      isLoggedIn: state.isLoggedIn\n    };\n  }\n}));\nexport default useLoginStore;","map":{"version":3,"names":["create","persist","useLoginStore","set","uid","email","nickname","profileImage","userType","isLoggedIn","setLogin","arguments","length","undefined","logout","name","partialize","state"],"sources":["C:/Users/als40/Desktop/HandsMarket/frontend/src/stores/useLoginStore.ts"],"sourcesContent":["import { create } from \"zustand\";\r\nimport { persist } from \"zustand/middleware\";\r\n\r\ninterface LoginState {\r\n  uid: string;\r\n  email: string;\r\n  nickname: string;\r\n  profileImage: string;\r\n  userType: \"user\" | \"seller\" | \"\";\r\n  isLoggedIn: boolean;\r\n  setLogin: (\r\n    uid: string,\r\n    email: string,\r\n    nickname: string,\r\n    profileImage: string,\r\n    userType?: \"user\" | \"seller\" | \"\"\r\n  ) => void;\r\n  logout: () => void;\r\n}\r\n\r\nconst useLoginStore = create<LoginState>()(\r\n  persist(\r\n    (set) => ({\r\n      uid: \"\",\r\n      email: \"\",\r\n      nickname: \"\",\r\n      profileImage: \"\",\r\n      userType: \"\",\r\n      isLoggedIn: false,\r\n      // 로그인 성공 시 사용자 정보와 로그인 상태를 저장\r\n      setLogin: (uid, email, nickname, profileImage, userType = \"\") =>\r\n        set({ uid, email, nickname, profileImage, userType, isLoggedIn: true }),\r\n      // 로그아웃 시 상태 초기화\r\n      logout: () =>\r\n        set({\r\n          uid: \"\",\r\n          email: \"\",\r\n          nickname: \"\",\r\n          profileImage: \"\",\r\n          userType: \"\",\r\n          isLoggedIn: false,\r\n        }),\r\n    }),\r\n    {\r\n      name: \"login-storage\", // 로컬스토리지에 저장할 이름\r\n      partialize: (state) => ({\r\n        // 저장할 상태의 일부만 선택\r\n        uid: state.uid,\r\n        email: state.email,\r\n        nickname: state.nickname,\r\n        profileImage: state.profileImage,\r\n        userType: state.userType,\r\n        isLoggedIn: state.isLoggedIn,\r\n      }),\r\n    }\r\n  )\r\n);\r\n\r\nexport default useLoginStore;\r\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAChC,SAASC,OAAO,QAAQ,oBAAoB;AAmB5C,IAAMC,aAAa,GAAGF,MAAM,CAAa,CAAC,CACxCC,OAAO,CACL,UAACE,GAAG;EAAA,OAAM;IACRC,GAAG,EAAE,EAAE;IACPC,KAAK,EAAE,EAAE;IACTC,QAAQ,EAAE,EAAE;IACZC,YAAY,EAAE,EAAE;IAChBC,QAAQ,EAAE,EAAE;IACZC,UAAU,EAAE,KAAK;IACjB;IACAC,QAAQ,EAAE,SAAVA,QAAQA,CAAGN,GAAG,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,YAAY;MAAA,IAAEC,QAAQ,GAAAG,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;MAAA,OAC1DR,GAAG,CAAC;QAAEC,GAAG,EAAHA,GAAG;QAAEC,KAAK,EAALA,KAAK;QAAEC,QAAQ,EAARA,QAAQ;QAAEC,YAAY,EAAZA,YAAY;QAAEC,QAAQ,EAARA,QAAQ;QAAEC,UAAU,EAAE;MAAK,CAAC,CAAC;IAAA;IACzE;IACAK,MAAM,EAAE,SAARA,MAAMA,CAAA;MAAA,OACJX,GAAG,CAAC;QACFC,GAAG,EAAE,EAAE;QACPC,KAAK,EAAE,EAAE;QACTC,QAAQ,EAAE,EAAE;QACZC,YAAY,EAAE,EAAE;QAChBC,QAAQ,EAAE,EAAE;QACZC,UAAU,EAAE;MACd,CAAC,CAAC;IAAA;EACN,CAAC;AAAA,CAAC,EACF;EACEM,IAAI,EAAE,eAAe;EAAE;EACvBC,UAAU,EAAE,SAAZA,UAAUA,CAAGC,KAAK;IAAA,OAAM;MACtB;MACAb,GAAG,EAAEa,KAAK,CAACb,GAAG;MACdC,KAAK,EAAEY,KAAK,CAACZ,KAAK;MAClBC,QAAQ,EAAEW,KAAK,CAACX,QAAQ;MACxBC,YAAY,EAAEU,KAAK,CAACV,YAAY;MAChCC,QAAQ,EAAES,KAAK,CAACT,QAAQ;MACxBC,UAAU,EAAEQ,KAAK,CAACR;IACpB,CAAC;EAAA;AACH,CACF,CACF,CAAC;AAED,eAAeP,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}