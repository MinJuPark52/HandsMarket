{"ast":null,"code":"import _classCallCheck from \"C:/Users/als40/Desktop/HandsMarket/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/als40/Desktop/HandsMarket/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _callSuper from \"C:/Users/als40/Desktop/HandsMarket/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _inherits from \"C:/Users/als40/Desktop/HandsMarket/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _classPrivateMethodInitSpec from \"C:/Users/als40/Desktop/HandsMarket/node_modules/@babel/runtime/helpers/esm/classPrivateMethodInitSpec.js\";\nimport _classPrivateFieldInitSpec from \"C:/Users/als40/Desktop/HandsMarket/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _assertClassBrand from \"C:/Users/als40/Desktop/HandsMarket/node_modules/@babel/runtime/helpers/esm/assertClassBrand.js\";\nimport _classPrivateFieldGet from \"C:/Users/als40/Desktop/HandsMarket/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet2.js\";\nimport _classPrivateFieldSet from \"C:/Users/als40/Desktop/HandsMarket/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet2.js\";\nvar _client, _result, _queries, _options, _observers, _combinedResult, _lastCombine, _lastResult, _observerMatches, _Class_brand;\n// src/queriesObserver.ts\nimport { notifyManager } from \"./notifyManager.js\";\nimport { QueryObserver } from \"./queryObserver.js\";\nimport { Subscribable } from \"./subscribable.js\";\nimport { replaceEqualDeep } from \"./utils.js\";\nfunction difference(array1, array2) {\n  var excludeSet = new Set(array2);\n  return array1.filter(function (x) {\n    return !excludeSet.has(x);\n  });\n}\nfunction replaceAt(array, index, value) {\n  var copy = array.slice(0);\n  copy[index] = value;\n  return copy;\n}\nvar QueriesObserver = (_client = /*#__PURE__*/new WeakMap(), _result = /*#__PURE__*/new WeakMap(), _queries = /*#__PURE__*/new WeakMap(), _options = /*#__PURE__*/new WeakMap(), _observers = /*#__PURE__*/new WeakMap(), _combinedResult = /*#__PURE__*/new WeakMap(), _lastCombine = /*#__PURE__*/new WeakMap(), _lastResult = /*#__PURE__*/new WeakMap(), _observerMatches = /*#__PURE__*/new WeakMap(), _Class_brand = /*#__PURE__*/new WeakSet(), /*#__PURE__*/function (_Subscribable) {\n  function QueriesObserver(client, _queries2, _options2) {\n    var _this;\n    _classCallCheck(this, QueriesObserver);\n    _this = _callSuper(this, QueriesObserver);\n    _classPrivateMethodInitSpec(_this, _Class_brand);\n    _classPrivateFieldInitSpec(_this, _client, void 0);\n    _classPrivateFieldInitSpec(_this, _result, void 0);\n    _classPrivateFieldInitSpec(_this, _queries, void 0);\n    _classPrivateFieldInitSpec(_this, _options, void 0);\n    _classPrivateFieldInitSpec(_this, _observers, void 0);\n    _classPrivateFieldInitSpec(_this, _combinedResult, void 0);\n    _classPrivateFieldInitSpec(_this, _lastCombine, void 0);\n    _classPrivateFieldInitSpec(_this, _lastResult, void 0);\n    _classPrivateFieldInitSpec(_this, _observerMatches, []);\n    _classPrivateFieldSet(_client, _this, client);\n    _classPrivateFieldSet(_options, _this, _options2);\n    _classPrivateFieldSet(_queries, _this, []);\n    _classPrivateFieldSet(_observers, _this, []);\n    _classPrivateFieldSet(_result, _this, []);\n    _this.setQueries(_queries2);\n    return _this;\n  }\n  _inherits(QueriesObserver, _Subscribable);\n  return _createClass(QueriesObserver, [{\n    key: \"onSubscribe\",\n    value: function onSubscribe() {\n      var _this2 = this;\n      if (this.listeners.size === 1) {\n        _classPrivateFieldGet(_observers, this).forEach(function (observer) {\n          observer.subscribe(function (result) {\n            _assertClassBrand(_Class_brand, _this2, _onUpdate).call(_this2, observer, result);\n          });\n        });\n      }\n    }\n  }, {\n    key: \"onUnsubscribe\",\n    value: function onUnsubscribe() {\n      if (!this.listeners.size) {\n        this.destroy();\n      }\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.listeners = /* @__PURE__ */new Set();\n      _classPrivateFieldGet(_observers, this).forEach(function (observer) {\n        observer.destroy();\n      });\n    }\n  }, {\n    key: \"setQueries\",\n    value: function setQueries(queries, options) {\n      var _this3 = this;\n      _classPrivateFieldSet(_queries, this, queries);\n      _classPrivateFieldSet(_options, this, options);\n      if (process.env.NODE_ENV !== \"production\") {\n        var queryHashes = queries.map(function (query) {\n          return _classPrivateFieldGet(_client, _this3).defaultQueryOptions(query).queryHash;\n        });\n        if (new Set(queryHashes).size !== queryHashes.length) {\n          console.warn(\"[QueriesObserver]: Duplicate Queries found. This might result in unexpected behavior.\");\n        }\n      }\n      notifyManager.batch(function () {\n        var prevObservers = _classPrivateFieldGet(_observers, _this3);\n        var newObserverMatches = _assertClassBrand(_Class_brand, _this3, _findMatchingObservers).call(_this3, _classPrivateFieldGet(_queries, _this3));\n        _classPrivateFieldSet(_observerMatches, _this3, newObserverMatches);\n        newObserverMatches.forEach(function (match) {\n          return match.observer.setOptions(match.defaultedQueryOptions);\n        });\n        var newObservers = newObserverMatches.map(function (match) {\n          return match.observer;\n        });\n        var newResult = newObservers.map(function (observer) {\n          return observer.getCurrentResult();\n        });\n        var hasIndexChange = newObservers.some(function (observer, index) {\n          return observer !== prevObservers[index];\n        });\n        if (prevObservers.length === newObservers.length && !hasIndexChange) {\n          return;\n        }\n        _classPrivateFieldSet(_observers, _this3, newObservers);\n        _classPrivateFieldSet(_result, _this3, newResult);\n        if (!_this3.hasListeners()) {\n          return;\n        }\n        difference(prevObservers, newObservers).forEach(function (observer) {\n          observer.destroy();\n        });\n        difference(newObservers, prevObservers).forEach(function (observer) {\n          observer.subscribe(function (result) {\n            _assertClassBrand(_Class_brand, _this3, _onUpdate).call(_this3, observer, result);\n          });\n        });\n        _assertClassBrand(_Class_brand, _this3, _notify).call(_this3);\n      });\n    }\n  }, {\n    key: \"getCurrentResult\",\n    value: function getCurrentResult() {\n      return _classPrivateFieldGet(_result, this);\n    }\n  }, {\n    key: \"getQueries\",\n    value: function getQueries() {\n      return _classPrivateFieldGet(_observers, this).map(function (observer) {\n        return observer.getCurrentQuery();\n      });\n    }\n  }, {\n    key: \"getObservers\",\n    value: function getObservers() {\n      return _classPrivateFieldGet(_observers, this);\n    }\n  }, {\n    key: \"getOptimisticResult\",\n    value: function getOptimisticResult(queries, combine) {\n      var _this4 = this;\n      var matches = _assertClassBrand(_Class_brand, this, _findMatchingObservers).call(this, queries);\n      var result = matches.map(function (match) {\n        return match.observer.getOptimisticResult(match.defaultedQueryOptions);\n      });\n      return [result, function (r) {\n        return _assertClassBrand(_Class_brand, _this4, _combineResult).call(_this4, r !== null && r !== void 0 ? r : result, combine);\n      }, function () {\n        return _assertClassBrand(_Class_brand, _this4, _trackResult).call(_this4, result, matches);\n      }];\n    }\n  }]);\n}(Subscribable));\nfunction _trackResult(result, matches) {\n  return matches.map(function (match, index) {\n    var observerResult = result[index];\n    return !match.defaultedQueryOptions.notifyOnChangeProps ? match.observer.trackResult(observerResult, function (accessedProp) {\n      matches.forEach(function (m) {\n        m.observer.trackProp(accessedProp);\n      });\n    }) : observerResult;\n  });\n}\nfunction _combineResult(input, combine) {\n  if (combine) {\n    if (!_classPrivateFieldGet(_combinedResult, this) || _classPrivateFieldGet(_result, this) !== _classPrivateFieldGet(_lastResult, this) || combine !== _classPrivateFieldGet(_lastCombine, this)) {\n      _classPrivateFieldSet(_lastCombine, this, combine);\n      _classPrivateFieldSet(_lastResult, this, _classPrivateFieldGet(_result, this));\n      _classPrivateFieldSet(_combinedResult, this, replaceEqualDeep(_classPrivateFieldGet(_combinedResult, this), combine(input)));\n    }\n    return _classPrivateFieldGet(_combinedResult, this);\n  }\n  return input;\n}\nfunction _findMatchingObservers(queries) {\n  var _this5 = this;\n  var prevObserversMap = new Map(_classPrivateFieldGet(_observers, this).map(function (observer) {\n    return [observer.options.queryHash, observer];\n  }));\n  var observers = [];\n  queries.forEach(function (options) {\n    var defaultedOptions = _classPrivateFieldGet(_client, _this5).defaultQueryOptions(options);\n    var match = prevObserversMap.get(defaultedOptions.queryHash);\n    if (match) {\n      observers.push({\n        defaultedQueryOptions: defaultedOptions,\n        observer: match\n      });\n    } else {\n      observers.push({\n        defaultedQueryOptions: defaultedOptions,\n        observer: new QueryObserver(_classPrivateFieldGet(_client, _this5), defaultedOptions)\n      });\n    }\n  });\n  return observers;\n}\nfunction _onUpdate(observer, result) {\n  var index = _classPrivateFieldGet(_observers, this).indexOf(observer);\n  if (index !== -1) {\n    _classPrivateFieldSet(_result, this, replaceAt(_classPrivateFieldGet(_result, this), index, result));\n    _assertClassBrand(_Class_brand, this, _notify).call(this);\n  }\n}\nfunction _notify() {\n  var _this6 = this;\n  if (this.hasListeners()) {\n    var _classPrivateFieldGet2;\n    var previousResult = _classPrivateFieldGet(_combinedResult, this);\n    var newTracked = _assertClassBrand(_Class_brand, this, _trackResult).call(this, _classPrivateFieldGet(_result, this), _classPrivateFieldGet(_observerMatches, this));\n    var newResult = _assertClassBrand(_Class_brand, this, _combineResult).call(this, newTracked, (_classPrivateFieldGet2 = _classPrivateFieldGet(_options, this)) === null || _classPrivateFieldGet2 === void 0 ? void 0 : _classPrivateFieldGet2.combine);\n    if (previousResult !== newResult) {\n      notifyManager.batch(function () {\n        _this6.listeners.forEach(function (listener) {\n          listener(_classPrivateFieldGet(_result, _this6));\n        });\n      });\n    }\n  }\n}\nexport { QueriesObserver };","map":{"version":3,"names":["notifyManager","QueryObserver","Subscribable","replaceEqualDeep","difference","array1","array2","excludeSet","Set","filter","x","has","replaceAt","array","index","value","copy","slice","QueriesObserver","_client","WeakMap","_result","_queries","_options","_observers","_combinedResult","_lastCombine","_lastResult","_observerMatches","_Class_brand","WeakSet","_Subscribable","client","queries","options","_this","_classCallCheck","_callSuper","_classPrivateMethodInitSpec","_classPrivateFieldInitSpec","_classPrivateFieldSet","setQueries","_inherits","_createClass","key","onSubscribe","_this2","listeners","size","_classPrivateFieldGet","forEach","observer","subscribe","result","_assertClassBrand","_onUpdate","call","onUnsubscribe","destroy","_this3","process","env","NODE_ENV","queryHashes","map","query","defaultQueryOptions","queryHash","length","console","warn","batch","prevObservers","newObserverMatches","_findMatchingObservers","match","setOptions","defaultedQueryOptions","newObservers","newResult","getCurrentResult","hasIndexChange","some","hasListeners","_notify","getQueries","getCurrentQuery","getObservers","getOptimisticResult","combine","_this4","matches","r","_combineResult","_trackResult","observerResult","notifyOnChangeProps","trackResult","accessedProp","m","trackProp","input","_this5","prevObserversMap","Map","observers","defaultedOptions","get","push","indexOf","_this6","_classPrivateFieldGet2","previousResult","newTracked","listener"],"sources":["C:\\Users\\als40\\Desktop\\HandsMarket\\node_modules\\@tanstack\\query-core\\src\\queriesObserver.ts"],"sourcesContent":["import { notifyManager } from './notifyManager'\nimport { QueryObserver } from './queryObserver'\nimport { Subscribable } from './subscribable'\nimport { replaceEqualDeep } from './utils'\nimport type {\n  DefaultedQueryObserverOptions,\n  QueryObserverOptions,\n  QueryObserverResult,\n} from './types'\nimport type { QueryClient } from './queryClient'\n\nfunction difference<T>(array1: Array<T>, array2: Array<T>): Array<T> {\n  const excludeSet = new Set(array2)\n  return array1.filter((x) => !excludeSet.has(x))\n}\n\nfunction replaceAt<T>(array: Array<T>, index: number, value: T): Array<T> {\n  const copy = array.slice(0)\n  copy[index] = value\n  return copy\n}\n\ntype QueriesObserverListener = (result: Array<QueryObserverResult>) => void\n\ntype CombineFn<TCombinedResult> = (\n  result: Array<QueryObserverResult>,\n) => TCombinedResult\n\nexport interface QueriesObserverOptions<\n  TCombinedResult = Array<QueryObserverResult>,\n> {\n  combine?: CombineFn<TCombinedResult>\n}\n\nexport class QueriesObserver<\n  TCombinedResult = Array<QueryObserverResult>,\n> extends Subscribable<QueriesObserverListener> {\n  #client: QueryClient\n  #result!: Array<QueryObserverResult>\n  #queries: Array<QueryObserverOptions>\n  #options?: QueriesObserverOptions<TCombinedResult>\n  #observers: Array<QueryObserver>\n  #combinedResult?: TCombinedResult\n  #lastCombine?: CombineFn<TCombinedResult>\n  #lastResult?: Array<QueryObserverResult>\n  #observerMatches: Array<QueryObserverMatch> = []\n\n  constructor(\n    client: QueryClient,\n    queries: Array<QueryObserverOptions<any, any, any, any, any>>,\n    options?: QueriesObserverOptions<TCombinedResult>,\n  ) {\n    super()\n\n    this.#client = client\n    this.#options = options\n    this.#queries = []\n    this.#observers = []\n    this.#result = []\n\n    this.setQueries(queries)\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.size === 1) {\n      this.#observers.forEach((observer) => {\n        observer.subscribe((result) => {\n          this.#onUpdate(observer, result)\n        })\n      })\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.size) {\n      this.destroy()\n    }\n  }\n\n  destroy(): void {\n    this.listeners = new Set()\n    this.#observers.forEach((observer) => {\n      observer.destroy()\n    })\n  }\n\n  setQueries(\n    queries: Array<QueryObserverOptions>,\n    options?: QueriesObserverOptions<TCombinedResult>,\n  ): void {\n    this.#queries = queries\n    this.#options = options\n\n    if (process.env.NODE_ENV !== 'production') {\n      const queryHashes = queries.map(\n        (query) => this.#client.defaultQueryOptions(query).queryHash,\n      )\n      if (new Set(queryHashes).size !== queryHashes.length) {\n        console.warn(\n          '[QueriesObserver]: Duplicate Queries found. This might result in unexpected behavior.',\n        )\n      }\n    }\n\n    notifyManager.batch(() => {\n      const prevObservers = this.#observers\n\n      const newObserverMatches = this.#findMatchingObservers(this.#queries)\n      this.#observerMatches = newObserverMatches\n\n      // set options for the new observers to notify of changes\n      newObserverMatches.forEach((match) =>\n        match.observer.setOptions(match.defaultedQueryOptions),\n      )\n\n      const newObservers = newObserverMatches.map((match) => match.observer)\n      const newResult = newObservers.map((observer) =>\n        observer.getCurrentResult(),\n      )\n\n      const hasIndexChange = newObservers.some(\n        (observer, index) => observer !== prevObservers[index],\n      )\n\n      if (prevObservers.length === newObservers.length && !hasIndexChange) {\n        return\n      }\n\n      this.#observers = newObservers\n      this.#result = newResult\n\n      if (!this.hasListeners()) {\n        return\n      }\n\n      difference(prevObservers, newObservers).forEach((observer) => {\n        observer.destroy()\n      })\n\n      difference(newObservers, prevObservers).forEach((observer) => {\n        observer.subscribe((result) => {\n          this.#onUpdate(observer, result)\n        })\n      })\n\n      this.#notify()\n    })\n  }\n\n  getCurrentResult(): Array<QueryObserverResult> {\n    return this.#result\n  }\n\n  getQueries() {\n    return this.#observers.map((observer) => observer.getCurrentQuery())\n  }\n\n  getObservers() {\n    return this.#observers\n  }\n\n  getOptimisticResult(\n    queries: Array<QueryObserverOptions>,\n    combine: CombineFn<TCombinedResult> | undefined,\n  ): [\n    rawResult: Array<QueryObserverResult>,\n    combineResult: (r?: Array<QueryObserverResult>) => TCombinedResult,\n    trackResult: () => Array<QueryObserverResult>,\n  ] {\n    const matches = this.#findMatchingObservers(queries)\n    const result = matches.map((match) =>\n      match.observer.getOptimisticResult(match.defaultedQueryOptions),\n    )\n\n    return [\n      result,\n      (r?: Array<QueryObserverResult>) => {\n        return this.#combineResult(r ?? result, combine)\n      },\n      () => {\n        return this.#trackResult(result, matches)\n      },\n    ]\n  }\n\n  #trackResult(\n    result: Array<QueryObserverResult>,\n    matches: Array<QueryObserverMatch>,\n  ) {\n    return matches.map((match, index) => {\n      const observerResult = result[index]!\n      return !match.defaultedQueryOptions.notifyOnChangeProps\n        ? match.observer.trackResult(observerResult, (accessedProp) => {\n            // track property on all observers to ensure proper (synchronized) tracking (#7000)\n            matches.forEach((m) => {\n              m.observer.trackProp(accessedProp)\n            })\n          })\n        : observerResult\n    })\n  }\n\n  #combineResult(\n    input: Array<QueryObserverResult>,\n    combine: CombineFn<TCombinedResult> | undefined,\n  ): TCombinedResult {\n    if (combine) {\n      if (\n        !this.#combinedResult ||\n        this.#result !== this.#lastResult ||\n        combine !== this.#lastCombine\n      ) {\n        this.#lastCombine = combine\n        this.#lastResult = this.#result\n        this.#combinedResult = replaceEqualDeep(\n          this.#combinedResult,\n          combine(input),\n        )\n      }\n\n      return this.#combinedResult\n    }\n    return input as any\n  }\n\n  #findMatchingObservers(\n    queries: Array<QueryObserverOptions>,\n  ): Array<QueryObserverMatch> {\n    const prevObserversMap = new Map(\n      this.#observers.map((observer) => [observer.options.queryHash, observer]),\n    )\n\n    const observers: Array<QueryObserverMatch> = []\n\n    queries.forEach((options) => {\n      const defaultedOptions = this.#client.defaultQueryOptions(options)\n      const match = prevObserversMap.get(defaultedOptions.queryHash)\n      if (match) {\n        observers.push({\n          defaultedQueryOptions: defaultedOptions,\n          observer: match,\n        })\n      } else {\n        observers.push({\n          defaultedQueryOptions: defaultedOptions,\n          observer: new QueryObserver(this.#client, defaultedOptions),\n        })\n      }\n    })\n\n    return observers\n  }\n\n  #onUpdate(observer: QueryObserver, result: QueryObserverResult): void {\n    const index = this.#observers.indexOf(observer)\n    if (index !== -1) {\n      this.#result = replaceAt(this.#result, index, result)\n      this.#notify()\n    }\n  }\n\n  #notify(): void {\n    if (this.hasListeners()) {\n      const previousResult = this.#combinedResult\n      const newTracked = this.#trackResult(this.#result, this.#observerMatches)\n      const newResult = this.#combineResult(newTracked, this.#options?.combine)\n\n      if (previousResult !== newResult) {\n        notifyManager.batch(() => {\n          this.listeners.forEach((listener) => {\n            listener(this.#result)\n          })\n        })\n      }\n    }\n  }\n}\n\ntype QueryObserverMatch = {\n  defaultedQueryOptions: DefaultedQueryObserverOptions\n  observer: QueryObserver\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}