{"ast":null,"code":"import { get as e, set as t } from \"react-hook-form\";\nvar r = function r(t, _r, o) {\n    if (t && \"reportValidity\" in t) {\n      var _s = e(o, _r);\n      t.setCustomValidity(_s && _s.message || \"\"), t.reportValidity();\n    }\n  },\n  o = function o(e, t) {\n    var _loop = function _loop(_o) {\n      var s = t.fields[_o];\n      s && s.ref && \"reportValidity\" in s.ref ? r(s.ref, _o, e) : s && s.refs && s.refs.forEach(function (t) {\n        return r(t, _o, e);\n      });\n    };\n    for (var _o in t.fields) {\n      _loop(_o);\n    }\n  },\n  s = function s(r, _s2) {\n    _s2.shouldUseNativeValidation && o(r, _s2);\n    var n = {};\n    for (var _o2 in r) {\n      var f = e(_s2.fields, _o2),\n        c = Object.assign(r[_o2] || {}, {\n          ref: f && f.ref\n        });\n      if (i(_s2.names || Object.keys(r), _o2)) {\n        var _r2 = Object.assign({}, e(n, _o2));\n        t(_r2, \"root\", c), t(n, _o2, _r2);\n      } else t(n, _o2, c);\n    }\n    return n;\n  },\n  i = function i(e, t) {\n    var r = n(t);\n    return e.some(function (e) {\n      return n(e).match(\"^\".concat(r, \"\\\\.\\\\d+\"));\n    });\n  };\nfunction n(e) {\n  return e.replace(/\\]|\\[/g, \"\");\n}\nexport { s as toNestErrors, o as validateFieldsNatively };","map":{"version":3,"names":["r","t","o","s","e","setCustomValidity","message","reportValidity","_loop","_o","fields","ref","refs","forEach","shouldUseNativeValidation","n","f","c","Object","assign","i","names","keys","some","match","concat","replace","toNestErrors","validateFieldsNatively"],"sources":["C:\\Users\\als40\\Desktop\\HandsMarket\\node_modules\\@hookform\\resolvers\\src\\validateFieldsNatively.ts","C:\\Users\\als40\\Desktop\\HandsMarket\\node_modules\\@hookform\\resolvers\\src\\toNestErrors.ts"],"sourcesContent":["import {\n  FieldError,\n  FieldErrors,\n  FieldValues,\n  Ref,\n  ResolverOptions,\n  get,\n} from 'react-hook-form';\n\nconst setCustomValidity = (\n  ref: Ref,\n  fieldPath: string,\n  errors: FieldErrors,\n) => {\n  if (ref && 'reportValidity' in ref) {\n    const error = get(errors, fieldPath) as FieldError | undefined;\n    ref.setCustomValidity((error && error.message) || '');\n\n    ref.reportValidity();\n  }\n};\n\n// Native validation (web only)\nexport const validateFieldsNatively = <TFieldValues extends FieldValues>(\n  errors: FieldErrors,\n  options: ResolverOptions<TFieldValues>,\n): void => {\n  for (const fieldPath in options.fields) {\n    const field = options.fields[fieldPath];\n    if (field && field.ref && 'reportValidity' in field.ref) {\n      setCustomValidity(field.ref, fieldPath, errors);\n    } else if (field && field.refs) {\n      field.refs.forEach((ref: HTMLInputElement) =>\n        setCustomValidity(ref, fieldPath, errors),\n      );\n    }\n  }\n};\n","import {\n  Field,\n  FieldErrors,\n  FieldValues,\n  InternalFieldName,\n  ResolverOptions,\n  get,\n  set,\n} from 'react-hook-form';\nimport { validateFieldsNatively } from './validateFieldsNatively';\n\nexport const toNestErrors = <TFieldValues extends FieldValues>(\n  errors: FieldErrors,\n  options: ResolverOptions<TFieldValues>,\n): FieldErrors<TFieldValues> => {\n  options.shouldUseNativeValidation && validateFieldsNatively(errors, options);\n\n  const fieldErrors = {} as FieldErrors<TFieldValues>;\n  for (const path in errors) {\n    const field = get(options.fields, path) as Field['_f'] | undefined;\n    const error = Object.assign(errors[path] || {}, {\n      ref: field && field.ref,\n    });\n\n    if (isNameInFieldArray(options.names || Object.keys(errors), path)) {\n      const fieldArrayErrors = Object.assign({}, get(fieldErrors, path));\n\n      set(fieldArrayErrors, 'root', error);\n      set(fieldErrors, path, fieldArrayErrors);\n    } else {\n      set(fieldErrors, path, error);\n    }\n  }\n\n  return fieldErrors;\n};\n\nconst isNameInFieldArray = (\n  names: InternalFieldName[],\n  name: InternalFieldName,\n) => {\n  const path = escapeBrackets(name);\n  return names.some((n) => escapeBrackets(n).match(`^${path}\\\\.\\\\d+`));\n};\n\n/**\n * Escapes special characters in a string to be used in a regex pattern.\n * it removes the brackets from the string to match the `set` method.\n *\n * @param input - The input string to escape.\n * @returns The escaped string.\n */\nfunction escapeBrackets(input: string): string {\n  return input.replace(/\\]|\\[/g, '');\n}\n"],"mappings":";AASA,IAAMA,CAAA,GAAoB,SAApBA,EACJC,CAAA,EACAD,EAAA,EACAE,CAAA;IAEA,IAAID,CAAA,IAAO,oBAAoBA,CAAA,EAAK;MAClC,IAAME,EAAA,GAAQC,CAAA,CAAIF,CAAA,EAAQF,EAAA;MAC1BC,CAAA,CAAII,iBAAA,CAAmBF,EAAA,IAASA,EAAA,CAAMG,OAAA,IAAY,KAElDL,CAAA,CAAIM,cAAA,EACN;IAAA;EAAA;EAIWL,CAAA,GAAyB,SAAzBA,EACXE,CAAA,EACAH,CAAA;IAAA,IAAAO,KAAA,YAAAA,MAAAC,EAAA,EAEwC;MACtC,IAAMN,CAAA,GAAQF,CAAA,CAAQS,MAAA,CAAOR,EAAA;MACzBC,CAAA,IAASA,CAAA,CAAMQ,GAAA,IAAO,oBAAoBR,CAAA,CAAMQ,GAAA,GAClDX,CAAA,CAAkBG,CAAA,CAAMQ,GAAA,EAAKT,EAAA,EAAWE,CAAA,IAC/BD,CAAA,IAASA,CAAA,CAAMS,IAAA,IACxBT,CAAA,CAAMS,IAAA,CAAKC,OAAA,CAAS,UAAAZ,CAAA;QAAA,OAClBD,CAAA,CAAkBC,CAAA,EAAKC,EAAA,EAAWE,CAAA;MAAA,EAGxC;IAAA;IATA,KAAK,IAAMF,EAAA,IAAaD,CAAA,CAAQS,MAAA;MAAAF,KAAA,CAAAC,EAAA;IAAA;EAShC;ECzBWN,CAAA,GAAe,SAAfA,EACXH,CAAA,EACAG,GAAA;IAEAA,GAAA,CAAQW,yBAAA,IAA6BZ,CAAA,CAAuBF,CAAA,EAAQG,GAAA;IAEpE,IAAMY,CAAA,GAAc;IACpB,KAAK,IAAMb,GAAA,IAAQF,CAAA,EAAQ;MACzB,IAAMgB,CAAA,GAAQZ,CAAA,CAAID,GAAA,CAAQO,MAAA,EAAQR,GAAA;QAC5Be,CAAA,GAAQC,MAAA,CAAOC,MAAA,CAAOnB,CAAA,CAAOE,GAAA,KAAS,IAAI;UAC9CS,GAAA,EAAKK,CAAA,IAASA,CAAA,CAAML;QAAA;MAGtB,IAAIS,CAAA,CAAmBjB,GAAA,CAAQkB,KAAA,IAASH,MAAA,CAAOI,IAAA,CAAKtB,CAAA,GAASE,GAAA,GAAO;QAClE,IAAMF,GAAA,GAAmBkB,MAAA,CAAOC,MAAA,CAAO,IAAIf,CAAA,CAAIW,CAAA,EAAab,GAAA;QAE5DD,CAAA,CAAID,GAAA,EAAkB,QAAQiB,CAAA,GAC9BhB,CAAA,CAAIc,CAAA,EAAab,GAAA,EAAMF,GAAA,CACzB;MAAA,OACEC,CAAA,CAAIc,CAAA,EAAab,GAAA,EAAMe,CAAA,CAE3B;IAAA;IAEA,OAAOF,CAAA;EAAA;EAGHK,CAAA,GAAqB,SAArBA,EACJhB,CAAA,EACAH,CAAA;IAEA,IAAMD,CAAA,GAAOe,CAAA,CAAed,CAAA;IAC5B,OAAOG,CAAA,CAAMmB,IAAA,CAAM,UAAAnB,CAAA;MAAA,OAAMW,CAAA,CAAeX,CAAA,EAAGoB,KAAA,KAAAC,MAAA,CAAUzB,CAAA;IAAA,EAAc;EAAA;AAUrE,SAASe,EAAeX,CAAA;EACtB,OAAOA,CAAA,CAAMsB,OAAA,CAAQ,UAAU,GACjC;AAAA;AAAA,SAAAvB,CAAA,IAAAwB,YAAA,EAAAzB,CAAA,IAAA0B,sBAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}