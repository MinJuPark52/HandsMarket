{"ast":null,"code":"import _objectSpread from \"C:/Users/als40/Desktop/HandsMarket/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"C:/Users/als40/Desktop/HandsMarket/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/als40/Desktop/HandsMarket/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _callSuper from \"C:/Users/als40/Desktop/HandsMarket/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _superPropGet from \"C:/Users/als40/Desktop/HandsMarket/node_modules/@babel/runtime/helpers/esm/superPropGet.js\";\nimport _inherits from \"C:/Users/als40/Desktop/HandsMarket/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _classPrivateMethodInitSpec from \"C:/Users/als40/Desktop/HandsMarket/node_modules/@babel/runtime/helpers/esm/classPrivateMethodInitSpec.js\";\nimport _classPrivateFieldInitSpec from \"C:/Users/als40/Desktop/HandsMarket/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _assertClassBrand from \"C:/Users/als40/Desktop/HandsMarket/node_modules/@babel/runtime/helpers/esm/assertClassBrand.js\";\nimport _classPrivateFieldGet from \"C:/Users/als40/Desktop/HandsMarket/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet2.js\";\nimport _classPrivateFieldSet from \"C:/Users/als40/Desktop/HandsMarket/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet2.js\";\nvar _initialState, _revertState, _cache, _client, _retryer, _defaultOptions, _abortSignalConsumed, _Class_brand;\n// src/query.ts\nimport { ensureQueryFn, noop, replaceData, resolveEnabled, resolveStaleTime, skipToken, timeUntilStale } from \"./utils.js\";\nimport { notifyManager } from \"./notifyManager.js\";\nimport { canFetch, createRetryer, isCancelledError } from \"./retryer.js\";\nimport { Removable } from \"./removable.js\";\nvar Query = (_initialState = /*#__PURE__*/new WeakMap(), _revertState = /*#__PURE__*/new WeakMap(), _cache = /*#__PURE__*/new WeakMap(), _client = /*#__PURE__*/new WeakMap(), _retryer = /*#__PURE__*/new WeakMap(), _defaultOptions = /*#__PURE__*/new WeakMap(), _abortSignalConsumed = /*#__PURE__*/new WeakMap(), _Class_brand = /*#__PURE__*/new WeakSet(), /*#__PURE__*/function (_Removable) {\n  function Query(config) {\n    var _config$state;\n    var _this;\n    _classCallCheck(this, Query);\n    _this = _callSuper(this, Query);\n    _classPrivateMethodInitSpec(_this, _Class_brand);\n    _classPrivateFieldInitSpec(_this, _initialState, void 0);\n    _classPrivateFieldInitSpec(_this, _revertState, void 0);\n    _classPrivateFieldInitSpec(_this, _cache, void 0);\n    _classPrivateFieldInitSpec(_this, _client, void 0);\n    _classPrivateFieldInitSpec(_this, _retryer, void 0);\n    _classPrivateFieldInitSpec(_this, _defaultOptions, void 0);\n    _classPrivateFieldInitSpec(_this, _abortSignalConsumed, void 0);\n    _classPrivateFieldSet(_abortSignalConsumed, _this, false);\n    _classPrivateFieldSet(_defaultOptions, _this, config.defaultOptions);\n    _this.setOptions(config.options);\n    _this.observers = [];\n    _classPrivateFieldSet(_client, _this, config.client);\n    _classPrivateFieldSet(_cache, _this, _classPrivateFieldGet(_client, _this).getQueryCache());\n    _this.queryKey = config.queryKey;\n    _this.queryHash = config.queryHash;\n    _classPrivateFieldSet(_initialState, _this, getDefaultState(_this.options));\n    _this.state = (_config$state = config.state) !== null && _config$state !== void 0 ? _config$state : _classPrivateFieldGet(_initialState, _this);\n    _this.scheduleGc();\n    return _this;\n  }\n  _inherits(Query, _Removable);\n  return _createClass(Query, [{\n    key: \"meta\",\n    get: function get() {\n      return this.options.meta;\n    }\n  }, {\n    key: \"promise\",\n    get: function get() {\n      var _classPrivateFieldGet2;\n      return (_classPrivateFieldGet2 = _classPrivateFieldGet(_retryer, this)) === null || _classPrivateFieldGet2 === void 0 ? void 0 : _classPrivateFieldGet2.promise;\n    }\n  }, {\n    key: \"setOptions\",\n    value: function setOptions(options) {\n      this.options = _objectSpread(_objectSpread({}, _classPrivateFieldGet(_defaultOptions, this)), options);\n      this.updateGcTime(this.options.gcTime);\n    }\n  }, {\n    key: \"optionalRemove\",\n    value: function optionalRemove() {\n      if (!this.observers.length && this.state.fetchStatus === \"idle\") {\n        _classPrivateFieldGet(_cache, this).remove(this);\n      }\n    }\n  }, {\n    key: \"setData\",\n    value: function setData(newData, options) {\n      var data = replaceData(this.state.data, newData, this.options);\n      _assertClassBrand(_Class_brand, this, _dispatch).call(this, {\n        data: data,\n        type: \"success\",\n        dataUpdatedAt: options === null || options === void 0 ? void 0 : options.updatedAt,\n        manual: options === null || options === void 0 ? void 0 : options.manual\n      });\n      return data;\n    }\n  }, {\n    key: \"setState\",\n    value: function setState(state, setStateOptions) {\n      _assertClassBrand(_Class_brand, this, _dispatch).call(this, {\n        type: \"setState\",\n        state: state,\n        setStateOptions: setStateOptions\n      });\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel(options) {\n      var _classPrivateFieldGet3, _classPrivateFieldGet4;\n      var promise = (_classPrivateFieldGet3 = _classPrivateFieldGet(_retryer, this)) === null || _classPrivateFieldGet3 === void 0 ? void 0 : _classPrivateFieldGet3.promise;\n      (_classPrivateFieldGet4 = _classPrivateFieldGet(_retryer, this)) === null || _classPrivateFieldGet4 === void 0 || _classPrivateFieldGet4.cancel(options);\n      return promise ? promise.then(noop).catch(noop) : Promise.resolve();\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      _superPropGet(Query, \"destroy\", this, 3)([]);\n      this.cancel({\n        silent: true\n      });\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.destroy();\n      this.setState(_classPrivateFieldGet(_initialState, this));\n    }\n  }, {\n    key: \"isActive\",\n    value: function isActive() {\n      var _this2 = this;\n      return this.observers.some(function (observer) {\n        return resolveEnabled(observer.options.enabled, _this2) !== false;\n      });\n    }\n  }, {\n    key: \"isDisabled\",\n    value: function isDisabled() {\n      if (this.getObserversCount() > 0) {\n        return !this.isActive();\n      }\n      return this.options.queryFn === skipToken || this.state.dataUpdateCount + this.state.errorUpdateCount === 0;\n    }\n  }, {\n    key: \"isStatic\",\n    value: function isStatic() {\n      var _this3 = this;\n      if (this.getObserversCount() > 0) {\n        return this.observers.some(function (observer) {\n          return resolveStaleTime(observer.options.staleTime, _this3) === \"static\";\n        });\n      }\n      return false;\n    }\n  }, {\n    key: \"isStale\",\n    value: function isStale() {\n      if (this.getObserversCount() > 0) {\n        return this.observers.some(function (observer) {\n          return observer.getCurrentResult().isStale;\n        });\n      }\n      return this.state.data === void 0 || this.state.isInvalidated;\n    }\n  }, {\n    key: \"isStaleByTime\",\n    value: function isStaleByTime() {\n      var staleTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      if (this.state.data === void 0) {\n        return true;\n      }\n      if (staleTime === \"static\") {\n        return false;\n      }\n      if (this.state.isInvalidated) {\n        return true;\n      }\n      return !timeUntilStale(this.state.dataUpdatedAt, staleTime);\n    }\n  }, {\n    key: \"onFocus\",\n    value: function onFocus() {\n      var _classPrivateFieldGet5;\n      var observer = this.observers.find(function (x) {\n        return x.shouldFetchOnWindowFocus();\n      });\n      observer === null || observer === void 0 || observer.refetch({\n        cancelRefetch: false\n      });\n      (_classPrivateFieldGet5 = _classPrivateFieldGet(_retryer, this)) === null || _classPrivateFieldGet5 === void 0 || _classPrivateFieldGet5.continue();\n    }\n  }, {\n    key: \"onOnline\",\n    value: function onOnline() {\n      var _classPrivateFieldGet6;\n      var observer = this.observers.find(function (x) {\n        return x.shouldFetchOnReconnect();\n      });\n      observer === null || observer === void 0 || observer.refetch({\n        cancelRefetch: false\n      });\n      (_classPrivateFieldGet6 = _classPrivateFieldGet(_retryer, this)) === null || _classPrivateFieldGet6 === void 0 || _classPrivateFieldGet6.continue();\n    }\n  }, {\n    key: \"addObserver\",\n    value: function addObserver(observer) {\n      if (!this.observers.includes(observer)) {\n        this.observers.push(observer);\n        this.clearGcTimeout();\n        _classPrivateFieldGet(_cache, this).notify({\n          type: \"observerAdded\",\n          query: this,\n          observer: observer\n        });\n      }\n    }\n  }, {\n    key: \"removeObserver\",\n    value: function removeObserver(observer) {\n      if (this.observers.includes(observer)) {\n        this.observers = this.observers.filter(function (x) {\n          return x !== observer;\n        });\n        if (!this.observers.length) {\n          if (_classPrivateFieldGet(_retryer, this)) {\n            if (_classPrivateFieldGet(_abortSignalConsumed, this)) {\n              _classPrivateFieldGet(_retryer, this).cancel({\n                revert: true\n              });\n            } else {\n              _classPrivateFieldGet(_retryer, this).cancelRetry();\n            }\n          }\n          this.scheduleGc();\n        }\n        _classPrivateFieldGet(_cache, this).notify({\n          type: \"observerRemoved\",\n          query: this,\n          observer: observer\n        });\n      }\n    }\n  }, {\n    key: \"getObserversCount\",\n    value: function getObserversCount() {\n      return this.observers.length;\n    }\n  }, {\n    key: \"invalidate\",\n    value: function invalidate() {\n      if (!this.state.isInvalidated) {\n        _assertClassBrand(_Class_brand, this, _dispatch).call(this, {\n          type: \"invalidate\"\n        });\n      }\n    }\n  }, {\n    key: \"fetch\",\n    value: function fetch(options, fetchOptions) {\n      var _this4 = this,\n        _this$options$behavio,\n        _context$fetchOptions;\n      if (this.state.fetchStatus !== \"idle\") {\n        if (this.state.data !== void 0 && fetchOptions !== null && fetchOptions !== void 0 && fetchOptions.cancelRefetch) {\n          this.cancel({\n            silent: true\n          });\n        } else if (_classPrivateFieldGet(_retryer, this)) {\n          _classPrivateFieldGet(_retryer, this).continueRetry();\n          return _classPrivateFieldGet(_retryer, this).promise;\n        }\n      }\n      if (options) {\n        this.setOptions(options);\n      }\n      if (!this.options.queryFn) {\n        var observer = this.observers.find(function (x) {\n          return x.options.queryFn;\n        });\n        if (observer) {\n          this.setOptions(observer.options);\n        }\n      }\n      if (process.env.NODE_ENV !== \"production\") {\n        if (!Array.isArray(this.options.queryKey)) {\n          console.error(\"As of v4, queryKey needs to be an Array. If you are using a string like 'repoData', please change it to an Array, e.g. ['repoData']\");\n        }\n      }\n      var abortController = new AbortController();\n      var addSignalProperty = function addSignalProperty(object) {\n        Object.defineProperty(object, \"signal\", {\n          enumerable: true,\n          get: function get() {\n            _classPrivateFieldSet(_abortSignalConsumed, _this4, true);\n            return abortController.signal;\n          }\n        });\n      };\n      var fetchFn = function fetchFn() {\n        var queryFn = ensureQueryFn(_this4.options, fetchOptions);\n        var createQueryFnContext = function createQueryFnContext() {\n          var queryFnContext2 = {\n            client: _classPrivateFieldGet(_client, _this4),\n            queryKey: _this4.queryKey,\n            meta: _this4.meta\n          };\n          addSignalProperty(queryFnContext2);\n          return queryFnContext2;\n        };\n        var queryFnContext = createQueryFnContext();\n        _classPrivateFieldSet(_abortSignalConsumed, _this4, false);\n        if (_this4.options.persister) {\n          return _this4.options.persister(queryFn, queryFnContext, _this4);\n        }\n        return queryFn(queryFnContext);\n      };\n      var createFetchContext = function createFetchContext() {\n        var context2 = {\n          fetchOptions: fetchOptions,\n          options: _this4.options,\n          queryKey: _this4.queryKey,\n          client: _classPrivateFieldGet(_client, _this4),\n          state: _this4.state,\n          fetchFn: fetchFn\n        };\n        addSignalProperty(context2);\n        return context2;\n      };\n      var context = createFetchContext();\n      (_this$options$behavio = this.options.behavior) === null || _this$options$behavio === void 0 || _this$options$behavio.onFetch(context, this);\n      _classPrivateFieldSet(_revertState, this, this.state);\n      if (this.state.fetchStatus === \"idle\" || this.state.fetchMeta !== ((_context$fetchOptions = context.fetchOptions) === null || _context$fetchOptions === void 0 ? void 0 : _context$fetchOptions.meta)) {\n        var _context$fetchOptions2;\n        _assertClassBrand(_Class_brand, this, _dispatch).call(this, {\n          type: \"fetch\",\n          meta: (_context$fetchOptions2 = context.fetchOptions) === null || _context$fetchOptions2 === void 0 ? void 0 : _context$fetchOptions2.meta\n        });\n      }\n      var onError = function onError(error) {\n        if (!(isCancelledError(error) && error.silent)) {\n          _assertClassBrand(_Class_brand, _this4, _dispatch).call(_this4, {\n            type: \"error\",\n            error: error\n          });\n        }\n        if (!isCancelledError(error)) {\n          var _classPrivateFieldGet7, _classPrivateFieldGet8, _classPrivateFieldGet9, _classPrivateFieldGet0;\n          (_classPrivateFieldGet7 = (_classPrivateFieldGet8 = _classPrivateFieldGet(_cache, _this4).config).onError) === null || _classPrivateFieldGet7 === void 0 || _classPrivateFieldGet7.call(_classPrivateFieldGet8, error, _this4);\n          (_classPrivateFieldGet9 = (_classPrivateFieldGet0 = _classPrivateFieldGet(_cache, _this4).config).onSettled) === null || _classPrivateFieldGet9 === void 0 || _classPrivateFieldGet9.call(_classPrivateFieldGet0, _this4.state.data, error, _this4);\n        }\n        _this4.scheduleGc();\n      };\n      _classPrivateFieldSet(_retryer, this, createRetryer({\n        initialPromise: fetchOptions === null || fetchOptions === void 0 ? void 0 : fetchOptions.initialPromise,\n        fn: context.fetchFn,\n        abort: abortController.abort.bind(abortController),\n        onSuccess: function onSuccess(data) {\n          var _classPrivateFieldGet1, _classPrivateFieldGet10, _classPrivateFieldGet11, _classPrivateFieldGet12;\n          if (data === void 0) {\n            if (process.env.NODE_ENV !== \"production\") {\n              console.error(\"Query data cannot be undefined. Please make sure to return a value other than undefined from your query function. Affected query key: \".concat(_this4.queryHash));\n            }\n            onError(new Error(\"\".concat(_this4.queryHash, \" data is undefined\")));\n            return;\n          }\n          try {\n            _this4.setData(data);\n          } catch (error) {\n            onError(error);\n            return;\n          }\n          (_classPrivateFieldGet1 = (_classPrivateFieldGet10 = _classPrivateFieldGet(_cache, _this4).config).onSuccess) === null || _classPrivateFieldGet1 === void 0 || _classPrivateFieldGet1.call(_classPrivateFieldGet10, data, _this4);\n          (_classPrivateFieldGet11 = (_classPrivateFieldGet12 = _classPrivateFieldGet(_cache, _this4).config).onSettled) === null || _classPrivateFieldGet11 === void 0 || _classPrivateFieldGet11.call(_classPrivateFieldGet12, data, _this4.state.error, _this4);\n          _this4.scheduleGc();\n        },\n        onError: onError,\n        onFail: function onFail(failureCount, error) {\n          _assertClassBrand(_Class_brand, _this4, _dispatch).call(_this4, {\n            type: \"failed\",\n            failureCount: failureCount,\n            error: error\n          });\n        },\n        onPause: function onPause() {\n          _assertClassBrand(_Class_brand, _this4, _dispatch).call(_this4, {\n            type: \"pause\"\n          });\n        },\n        onContinue: function onContinue() {\n          _assertClassBrand(_Class_brand, _this4, _dispatch).call(_this4, {\n            type: \"continue\"\n          });\n        },\n        retry: context.options.retry,\n        retryDelay: context.options.retryDelay,\n        networkMode: context.options.networkMode,\n        canRun: function canRun() {\n          return true;\n        }\n      }));\n      return _classPrivateFieldGet(_retryer, this).start();\n    }\n  }]);\n}(Removable));\nfunction _dispatch(action) {\n  var _this5 = this;\n  var reducer = function reducer(state) {\n    var _action$meta, _action$dataUpdatedAt;\n    switch (action.type) {\n      case \"failed\":\n        return _objectSpread(_objectSpread({}, state), {}, {\n          fetchFailureCount: action.failureCount,\n          fetchFailureReason: action.error\n        });\n      case \"pause\":\n        return _objectSpread(_objectSpread({}, state), {}, {\n          fetchStatus: \"paused\"\n        });\n      case \"continue\":\n        return _objectSpread(_objectSpread({}, state), {}, {\n          fetchStatus: \"fetching\"\n        });\n      case \"fetch\":\n        return _objectSpread(_objectSpread(_objectSpread({}, state), fetchState(state.data, _this5.options)), {}, {\n          fetchMeta: (_action$meta = action.meta) !== null && _action$meta !== void 0 ? _action$meta : null\n        });\n      case \"success\":\n        return _objectSpread(_objectSpread({}, state), {}, {\n          data: action.data,\n          dataUpdateCount: state.dataUpdateCount + 1,\n          dataUpdatedAt: (_action$dataUpdatedAt = action.dataUpdatedAt) !== null && _action$dataUpdatedAt !== void 0 ? _action$dataUpdatedAt : Date.now(),\n          error: null,\n          isInvalidated: false,\n          status: \"success\"\n        }, !action.manual && {\n          fetchStatus: \"idle\",\n          fetchFailureCount: 0,\n          fetchFailureReason: null\n        });\n      case \"error\":\n        var error = action.error;\n        if (isCancelledError(error) && error.revert && _classPrivateFieldGet(_revertState, _this5)) {\n          return _objectSpread(_objectSpread({}, _classPrivateFieldGet(_revertState, _this5)), {}, {\n            fetchStatus: \"idle\"\n          });\n        }\n        return _objectSpread(_objectSpread({}, state), {}, {\n          error: error,\n          errorUpdateCount: state.errorUpdateCount + 1,\n          errorUpdatedAt: Date.now(),\n          fetchFailureCount: state.fetchFailureCount + 1,\n          fetchFailureReason: error,\n          fetchStatus: \"idle\",\n          status: \"error\"\n        });\n      case \"invalidate\":\n        return _objectSpread(_objectSpread({}, state), {}, {\n          isInvalidated: true\n        });\n      case \"setState\":\n        return _objectSpread(_objectSpread({}, state), action.state);\n    }\n  };\n  this.state = reducer(this.state);\n  notifyManager.batch(function () {\n    _this5.observers.forEach(function (observer) {\n      observer.onQueryUpdate();\n    });\n    _classPrivateFieldGet(_cache, _this5).notify({\n      query: _this5,\n      type: \"updated\",\n      action: action\n    });\n  });\n}\nfunction fetchState(data, options) {\n  return _objectSpread({\n    fetchFailureCount: 0,\n    fetchFailureReason: null,\n    fetchStatus: canFetch(options.networkMode) ? \"fetching\" : \"paused\"\n  }, data === void 0 && {\n    error: null,\n    status: \"pending\"\n  });\n}\nfunction getDefaultState(options) {\n  var data = typeof options.initialData === \"function\" ? options.initialData() : options.initialData;\n  var hasData = data !== void 0;\n  var initialDataUpdatedAt = hasData ? typeof options.initialDataUpdatedAt === \"function\" ? options.initialDataUpdatedAt() : options.initialDataUpdatedAt : 0;\n  return {\n    data: data,\n    dataUpdateCount: 0,\n    dataUpdatedAt: hasData ? initialDataUpdatedAt !== null && initialDataUpdatedAt !== void 0 ? initialDataUpdatedAt : Date.now() : 0,\n    error: null,\n    errorUpdateCount: 0,\n    errorUpdatedAt: 0,\n    fetchFailureCount: 0,\n    fetchFailureReason: null,\n    fetchMeta: null,\n    isInvalidated: false,\n    status: hasData ? \"success\" : \"pending\",\n    fetchStatus: \"idle\"\n  };\n}\nexport { Query, fetchState };","map":{"version":3,"names":["ensureQueryFn","noop","replaceData","resolveEnabled","resolveStaleTime","skipToken","timeUntilStale","notifyManager","canFetch","createRetryer","isCancelledError","Removable","Query","_initialState","WeakMap","_revertState","_cache","_client","_retryer","_defaultOptions","_abortSignalConsumed","_Class_brand","WeakSet","_Removable","config","_config$state","_this","_classCallCheck","_callSuper","_classPrivateMethodInitSpec","_classPrivateFieldInitSpec","_classPrivateFieldSet","defaultOptions","setOptions","options","observers","client","_classPrivateFieldGet","getQueryCache","queryKey","queryHash","getDefaultState","state","scheduleGc","_inherits","_createClass","key","get","meta","_classPrivateFieldGet2","promise","value","_objectSpread","updateGcTime","gcTime","optionalRemove","length","fetchStatus","remove","setData","newData","data","_assertClassBrand","_dispatch","call","type","dataUpdatedAt","updatedAt","manual","setState","setStateOptions","cancel","_classPrivateFieldGet3","_classPrivateFieldGet4","then","catch","Promise","resolve","destroy","_superPropGet","silent","reset","isActive","_this2","some","observer","enabled","isDisabled","getObserversCount","queryFn","dataUpdateCount","errorUpdateCount","isStatic","_this3","staleTime","isStale","getCurrentResult","isInvalidated","isStaleByTime","arguments","undefined","onFocus","_classPrivateFieldGet5","find","x","shouldFetchOnWindowFocus","refetch","cancelRefetch","continue","onOnline","_classPrivateFieldGet6","shouldFetchOnReconnect","addObserver","includes","push","clearGcTimeout","notify","query","removeObserver","filter","revert","cancelRetry","invalidate","fetch","fetchOptions","_this4","_this$options$behavio","_context$fetchOptions","continueRetry","process","env","NODE_ENV","Array","isArray","console","error","abortController","AbortController","addSignalProperty","object","Object","defineProperty","enumerable","signal","fetchFn","createQueryFnContext","queryFnContext2","queryFnContext","persister","createFetchContext","context2","context","behavior","onFetch","fetchMeta","_context$fetchOptions2","onError","_classPrivateFieldGet7","_classPrivateFieldGet8","_classPrivateFieldGet9","_classPrivateFieldGet0","onSettled","initialPromise","fn","abort","bind","onSuccess","_classPrivateFieldGet1","_classPrivateFieldGet10","_classPrivateFieldGet11","_classPrivateFieldGet12","concat","Error","onFail","failureCount","onPause","onContinue","retry","retryDelay","networkMode","canRun","start","action","_this5","reducer","_action$meta","_action$dataUpdatedAt","fetchFailureCount","fetchFailureReason","fetchState","Date","now","status","errorUpdatedAt","batch","forEach","onQueryUpdate","initialData","hasData","initialDataUpdatedAt"],"sources":["C:\\Users\\als40\\Desktop\\HandsMarket\\node_modules\\@tanstack\\query-core\\src\\query.ts"],"sourcesContent":["import {\n  ensureQueryFn,\n  noop,\n  replaceData,\n  resolveEnabled,\n  resolveStaleTime,\n  skipToken,\n  timeUntilStale,\n} from './utils'\nimport { notifyManager } from './notifyManager'\nimport { canFetch, createRetryer, isCancelledError } from './retryer'\nimport { Removable } from './removable'\nimport type { QueryCache } from './queryCache'\nimport type { QueryClient } from './queryClient'\nimport type {\n  CancelOptions,\n  DefaultError,\n  FetchStatus,\n  InitialDataFunction,\n  OmitKeyof,\n  QueryFunctionContext,\n  QueryKey,\n  QueryMeta,\n  QueryOptions,\n  QueryStatus,\n  SetDataOptions,\n  StaleTime,\n} from './types'\nimport type { QueryObserver } from './queryObserver'\nimport type { Retryer } from './retryer'\n\n// TYPES\n\ninterface QueryConfig<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey = QueryKey,\n> {\n  client: QueryClient\n  queryKey: TQueryKey\n  queryHash: string\n  options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  defaultOptions?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  state?: QueryState<TData, TError>\n}\n\nexport interface QueryState<TData = unknown, TError = DefaultError> {\n  data: TData | undefined\n  dataUpdateCount: number\n  dataUpdatedAt: number\n  error: TError | null\n  errorUpdateCount: number\n  errorUpdatedAt: number\n  fetchFailureCount: number\n  fetchFailureReason: TError | null\n  fetchMeta: FetchMeta | null\n  isInvalidated: boolean\n  status: QueryStatus\n  fetchStatus: FetchStatus\n}\n\nexport interface FetchContext<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey = QueryKey,\n> {\n  fetchFn: () => unknown | Promise<unknown>\n  fetchOptions?: FetchOptions\n  signal: AbortSignal\n  options: QueryOptions<TQueryFnData, TError, TData, any>\n  client: QueryClient\n  queryKey: TQueryKey\n  state: QueryState<TData, TError>\n}\n\nexport interface QueryBehavior<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> {\n  onFetch: (\n    context: FetchContext<TQueryFnData, TError, TData, TQueryKey>,\n    query: Query,\n  ) => void\n}\n\nexport type FetchDirection = 'forward' | 'backward'\n\nexport interface FetchMeta {\n  fetchMore?: { direction: FetchDirection }\n}\n\nexport interface FetchOptions<TData = unknown> {\n  cancelRefetch?: boolean\n  meta?: FetchMeta\n  initialPromise?: Promise<TData>\n}\n\ninterface FailedAction<TError> {\n  type: 'failed'\n  failureCount: number\n  error: TError\n}\n\ninterface FetchAction {\n  type: 'fetch'\n  meta?: FetchMeta\n}\n\ninterface SuccessAction<TData> {\n  data: TData | undefined\n  type: 'success'\n  dataUpdatedAt?: number\n  manual?: boolean\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface InvalidateAction {\n  type: 'invalidate'\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\ninterface SetStateAction<TData, TError> {\n  type: 'setState'\n  state: Partial<QueryState<TData, TError>>\n  setStateOptions?: SetStateOptions\n}\n\nexport type Action<TData, TError> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction<TError>\n  | FetchAction\n  | InvalidateAction\n  | PauseAction\n  | SetStateAction<TData, TError>\n  | SuccessAction<TData>\n\nexport interface SetStateOptions {\n  meta?: any\n}\n\n// CLASS\n\nexport class Query<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends Removable {\n  queryKey: TQueryKey\n  queryHash: string\n  options!: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  state: QueryState<TData, TError>\n\n  #initialState: QueryState<TData, TError>\n  #revertState?: QueryState<TData, TError>\n  #cache: QueryCache\n  #client: QueryClient\n  #retryer?: Retryer<TData>\n  observers: Array<QueryObserver<any, any, any, any, any>>\n  #defaultOptions?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  #abortSignalConsumed: boolean\n\n  constructor(config: QueryConfig<TQueryFnData, TError, TData, TQueryKey>) {\n    super()\n\n    this.#abortSignalConsumed = false\n    this.#defaultOptions = config.defaultOptions\n    this.setOptions(config.options)\n    this.observers = []\n    this.#client = config.client\n    this.#cache = this.#client.getQueryCache()\n    this.queryKey = config.queryKey\n    this.queryHash = config.queryHash\n    this.#initialState = getDefaultState(this.options)\n    this.state = config.state ?? this.#initialState\n    this.scheduleGc()\n  }\n  get meta(): QueryMeta | undefined {\n    return this.options.meta\n  }\n\n  get promise(): Promise<TData> | undefined {\n    return this.#retryer?.promise\n  }\n\n  setOptions(\n    options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): void {\n    this.options = { ...this.#defaultOptions, ...options }\n\n    this.updateGcTime(this.options.gcTime)\n  }\n\n  protected optionalRemove() {\n    if (!this.observers.length && this.state.fetchStatus === 'idle') {\n      this.#cache.remove(this)\n    }\n  }\n\n  setData(\n    newData: TData,\n    options?: SetDataOptions & { manual: boolean },\n  ): TData {\n    const data = replaceData(this.state.data, newData, this.options)\n\n    // Set data and mark it as cached\n    this.#dispatch({\n      data,\n      type: 'success',\n      dataUpdatedAt: options?.updatedAt,\n      manual: options?.manual,\n    })\n\n    return data\n  }\n\n  setState(\n    state: Partial<QueryState<TData, TError>>,\n    setStateOptions?: SetStateOptions,\n  ): void {\n    this.#dispatch({ type: 'setState', state, setStateOptions })\n  }\n\n  cancel(options?: CancelOptions): Promise<void> {\n    const promise = this.#retryer?.promise\n    this.#retryer?.cancel(options)\n    return promise ? promise.then(noop).catch(noop) : Promise.resolve()\n  }\n\n  destroy(): void {\n    super.destroy()\n\n    this.cancel({ silent: true })\n  }\n\n  reset(): void {\n    this.destroy()\n    this.setState(this.#initialState)\n  }\n\n  isActive(): boolean {\n    return this.observers.some(\n      (observer) => resolveEnabled(observer.options.enabled, this) !== false,\n    )\n  }\n\n  isDisabled(): boolean {\n    if (this.getObserversCount() > 0) {\n      return !this.isActive()\n    }\n    // if a query has no observers, it should still be considered disabled if it never attempted a fetch\n    return (\n      this.options.queryFn === skipToken ||\n      this.state.dataUpdateCount + this.state.errorUpdateCount === 0\n    )\n  }\n\n  isStatic(): boolean {\n    if (this.getObserversCount() > 0) {\n      return this.observers.some(\n        (observer) =>\n          resolveStaleTime(observer.options.staleTime, this) === 'static',\n      )\n    }\n\n    return false\n  }\n\n  isStale(): boolean {\n    // check observers first, their `isStale` has the source of truth\n    // calculated with `isStaleByTime` and it takes `enabled` into account\n    if (this.getObserversCount() > 0) {\n      return this.observers.some(\n        (observer) => observer.getCurrentResult().isStale,\n      )\n    }\n\n    return this.state.data === undefined || this.state.isInvalidated\n  }\n\n  isStaleByTime(staleTime: StaleTime = 0): boolean {\n    // no data is always stale\n    if (this.state.data === undefined) {\n      return true\n    }\n    // static is never stale\n    if (staleTime === 'static') {\n      return false\n    }\n    // if the query is invalidated, it is stale\n    if (this.state.isInvalidated) {\n      return true\n    }\n\n    return !timeUntilStale(this.state.dataUpdatedAt, staleTime)\n  }\n\n  onFocus(): void {\n    const observer = this.observers.find((x) => x.shouldFetchOnWindowFocus())\n\n    observer?.refetch({ cancelRefetch: false })\n\n    // Continue fetch if currently paused\n    this.#retryer?.continue()\n  }\n\n  onOnline(): void {\n    const observer = this.observers.find((x) => x.shouldFetchOnReconnect())\n\n    observer?.refetch({ cancelRefetch: false })\n\n    // Continue fetch if currently paused\n    this.#retryer?.continue()\n  }\n\n  addObserver(observer: QueryObserver<any, any, any, any, any>): void {\n    if (!this.observers.includes(observer)) {\n      this.observers.push(observer)\n\n      // Stop the query from being garbage collected\n      this.clearGcTimeout()\n\n      this.#cache.notify({ type: 'observerAdded', query: this, observer })\n    }\n  }\n\n  removeObserver(observer: QueryObserver<any, any, any, any, any>): void {\n    if (this.observers.includes(observer)) {\n      this.observers = this.observers.filter((x) => x !== observer)\n\n      if (!this.observers.length) {\n        // If the transport layer does not support cancellation\n        // we'll let the query continue so the result can be cached\n        if (this.#retryer) {\n          if (this.#abortSignalConsumed) {\n            this.#retryer.cancel({ revert: true })\n          } else {\n            this.#retryer.cancelRetry()\n          }\n        }\n\n        this.scheduleGc()\n      }\n\n      this.#cache.notify({ type: 'observerRemoved', query: this, observer })\n    }\n  }\n\n  getObserversCount(): number {\n    return this.observers.length\n  }\n\n  invalidate(): void {\n    if (!this.state.isInvalidated) {\n      this.#dispatch({ type: 'invalidate' })\n    }\n  }\n\n  fetch(\n    options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    fetchOptions?: FetchOptions<TQueryFnData>,\n  ): Promise<TData> {\n    if (this.state.fetchStatus !== 'idle') {\n      if (this.state.data !== undefined && fetchOptions?.cancelRefetch) {\n        // Silently cancel current fetch if the user wants to cancel refetch\n        this.cancel({ silent: true })\n      } else if (this.#retryer) {\n        // make sure that retries that were potentially cancelled due to unmounts can continue\n        this.#retryer.continueRetry()\n        // Return current promise if we are already fetching\n        return this.#retryer.promise\n      }\n    }\n\n    // Update config if passed, otherwise the config from the last execution is used\n    if (options) {\n      this.setOptions(options)\n    }\n\n    // Use the options from the first observer with a query function if no function is found.\n    // This can happen when the query is hydrated or created with setQueryData.\n    if (!this.options.queryFn) {\n      const observer = this.observers.find((x) => x.options.queryFn)\n      if (observer) {\n        this.setOptions(observer.options)\n      }\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!Array.isArray(this.options.queryKey)) {\n        console.error(\n          `As of v4, queryKey needs to be an Array. If you are using a string like 'repoData', please change it to an Array, e.g. ['repoData']`,\n        )\n      }\n    }\n\n    const abortController = new AbortController()\n\n    // Adds an enumerable signal property to the object that\n    // which sets abortSignalConsumed to true when the signal\n    // is read.\n    const addSignalProperty = (object: unknown) => {\n      Object.defineProperty(object, 'signal', {\n        enumerable: true,\n        get: () => {\n          this.#abortSignalConsumed = true\n          return abortController.signal\n        },\n      })\n    }\n\n    // Create fetch function\n    const fetchFn = () => {\n      const queryFn = ensureQueryFn(this.options, fetchOptions)\n\n      // Create query function context\n      const createQueryFnContext = (): QueryFunctionContext<TQueryKey> => {\n        const queryFnContext: OmitKeyof<\n          QueryFunctionContext<TQueryKey>,\n          'signal'\n        > = {\n          client: this.#client,\n          queryKey: this.queryKey,\n          meta: this.meta,\n        }\n        addSignalProperty(queryFnContext)\n        return queryFnContext as QueryFunctionContext<TQueryKey>\n      }\n\n      const queryFnContext = createQueryFnContext()\n\n      this.#abortSignalConsumed = false\n      if (this.options.persister) {\n        return this.options.persister(\n          queryFn,\n          queryFnContext,\n          this as unknown as Query,\n        )\n      }\n\n      return queryFn(queryFnContext)\n    }\n\n    // Trigger behavior hook\n    const createFetchContext = (): FetchContext<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryKey\n    > => {\n      const context: OmitKeyof<\n        FetchContext<TQueryFnData, TError, TData, TQueryKey>,\n        'signal'\n      > = {\n        fetchOptions,\n        options: this.options,\n        queryKey: this.queryKey,\n        client: this.#client,\n        state: this.state,\n        fetchFn,\n      }\n\n      addSignalProperty(context)\n      return context as FetchContext<TQueryFnData, TError, TData, TQueryKey>\n    }\n\n    const context = createFetchContext()\n\n    this.options.behavior?.onFetch(context, this as unknown as Query)\n\n    // Store state in case the current fetch needs to be reverted\n    this.#revertState = this.state\n\n    // Set to fetching state if not already in it\n    if (\n      this.state.fetchStatus === 'idle' ||\n      this.state.fetchMeta !== context.fetchOptions?.meta\n    ) {\n      this.#dispatch({ type: 'fetch', meta: context.fetchOptions?.meta })\n    }\n\n    const onError = (error: TError | { silent?: boolean }) => {\n      // Optimistically update state if needed\n      if (!(isCancelledError(error) && error.silent)) {\n        this.#dispatch({\n          type: 'error',\n          error: error as TError,\n        })\n      }\n\n      if (!isCancelledError(error)) {\n        // Notify cache callback\n        this.#cache.config.onError?.(\n          error as any,\n          this as Query<any, any, any, any>,\n        )\n        this.#cache.config.onSettled?.(\n          this.state.data,\n          error as any,\n          this as Query<any, any, any, any>,\n        )\n      }\n\n      // Schedule query gc after fetching\n      this.scheduleGc()\n    }\n\n    // Try to fetch the data\n    this.#retryer = createRetryer({\n      initialPromise: fetchOptions?.initialPromise as\n        | Promise<TData>\n        | undefined,\n      fn: context.fetchFn as () => Promise<TData>,\n      abort: abortController.abort.bind(abortController),\n      onSuccess: (data) => {\n        if (data === undefined) {\n          if (process.env.NODE_ENV !== 'production') {\n            console.error(\n              `Query data cannot be undefined. Please make sure to return a value other than undefined from your query function. Affected query key: ${this.queryHash}`,\n            )\n          }\n          onError(new Error(`${this.queryHash} data is undefined`) as any)\n          return\n        }\n\n        try {\n          this.setData(data)\n        } catch (error) {\n          onError(error as TError)\n          return\n        }\n\n        // Notify cache callback\n        this.#cache.config.onSuccess?.(data, this as Query<any, any, any, any>)\n        this.#cache.config.onSettled?.(\n          data,\n          this.state.error as any,\n          this as Query<any, any, any, any>,\n        )\n\n        // Schedule query gc after fetching\n        this.scheduleGc()\n      },\n      onError,\n      onFail: (failureCount, error) => {\n        this.#dispatch({ type: 'failed', failureCount, error })\n      },\n      onPause: () => {\n        this.#dispatch({ type: 'pause' })\n      },\n      onContinue: () => {\n        this.#dispatch({ type: 'continue' })\n      },\n      retry: context.options.retry,\n      retryDelay: context.options.retryDelay,\n      networkMode: context.options.networkMode,\n      canRun: () => true,\n    })\n\n    return this.#retryer.start()\n  }\n\n  #dispatch(action: Action<TData, TError>): void {\n    const reducer = (\n      state: QueryState<TData, TError>,\n    ): QueryState<TData, TError> => {\n      switch (action.type) {\n        case 'failed':\n          return {\n            ...state,\n            fetchFailureCount: action.failureCount,\n            fetchFailureReason: action.error,\n          }\n        case 'pause':\n          return {\n            ...state,\n            fetchStatus: 'paused',\n          }\n        case 'continue':\n          return {\n            ...state,\n            fetchStatus: 'fetching',\n          }\n        case 'fetch':\n          return {\n            ...state,\n            ...fetchState(state.data, this.options),\n            fetchMeta: action.meta ?? null,\n          }\n        case 'success':\n          return {\n            ...state,\n            data: action.data,\n            dataUpdateCount: state.dataUpdateCount + 1,\n            dataUpdatedAt: action.dataUpdatedAt ?? Date.now(),\n            error: null,\n            isInvalidated: false,\n            status: 'success',\n            ...(!action.manual && {\n              fetchStatus: 'idle',\n              fetchFailureCount: 0,\n              fetchFailureReason: null,\n            }),\n          }\n        case 'error':\n          const error = action.error\n\n          if (isCancelledError(error) && error.revert && this.#revertState) {\n            return { ...this.#revertState, fetchStatus: 'idle' }\n          }\n\n          return {\n            ...state,\n            error,\n            errorUpdateCount: state.errorUpdateCount + 1,\n            errorUpdatedAt: Date.now(),\n            fetchFailureCount: state.fetchFailureCount + 1,\n            fetchFailureReason: error,\n            fetchStatus: 'idle',\n            status: 'error',\n          }\n        case 'invalidate':\n          return {\n            ...state,\n            isInvalidated: true,\n          }\n        case 'setState':\n          return {\n            ...state,\n            ...action.state,\n          }\n      }\n    }\n\n    this.state = reducer(this.state)\n\n    notifyManager.batch(() => {\n      this.observers.forEach((observer) => {\n        observer.onQueryUpdate()\n      })\n\n      this.#cache.notify({ query: this, type: 'updated', action })\n    })\n  }\n}\n\nexport function fetchState<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey,\n>(\n  data: TData | undefined,\n  options: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n) {\n  return {\n    fetchFailureCount: 0,\n    fetchFailureReason: null,\n    fetchStatus: canFetch(options.networkMode) ? 'fetching' : 'paused',\n    ...(data === undefined &&\n      ({\n        error: null,\n        status: 'pending',\n      } as const)),\n  } as const\n}\n\nfunction getDefaultState<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey,\n>(\n  options: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n): QueryState<TData, TError> {\n  const data =\n    typeof options.initialData === 'function'\n      ? (options.initialData as InitialDataFunction<TData>)()\n      : options.initialData\n\n  const hasData = data !== undefined\n\n  const initialDataUpdatedAt = hasData\n    ? typeof options.initialDataUpdatedAt === 'function'\n      ? (options.initialDataUpdatedAt as () => number | undefined)()\n      : options.initialDataUpdatedAt\n    : 0\n\n  return {\n    data,\n    dataUpdateCount: 0,\n    dataUpdatedAt: hasData ? (initialDataUpdatedAt ?? Date.now()) : 0,\n    error: null,\n    errorUpdateCount: 0,\n    errorUpdatedAt: 0,\n    fetchFailureCount: 0,\n    fetchFailureReason: null,\n    fetchMeta: null,\n    isInvalidated: false,\n    status: hasData ? 'success' : 'pending',\n    fetchStatus: 'idle',\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}