{"ast":null,"code":"import _regenerator from \"C:/Users/als40/Desktop/HandsMarket/node_modules/@babel/runtime/helpers/esm/regenerator.js\";\nimport _asyncToGenerator from \"C:/Users/als40/Desktop/HandsMarket/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _s = $RefreshSig$();\nimport useLoginStore from \"../stores/useLoginStore\";\nimport { onAuthStateChanged } from \"firebase/auth\";\nimport { auth, db } from \"../firebase/firebaseConfig\";\nimport { useEffect } from \"react\";\nimport { doc, getDoc } from \"firebase/firestore\";\nvar AuthListener = function AuthListener() {\n  _s();\n  var setLogin = useLoginStore(function (state) {\n    return state.setLogin;\n  });\n  var logout = useLoginStore(function (state) {\n    return state.logout;\n  });\n  useEffect(function () {\n    // Firebase 인증 상태 변경 감지\n    var unsubscribe = onAuthStateChanged(auth, /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(user) {\n        var userDocRef, userDocSnap, nickname, profileImage, userType, data, _t;\n        return _regenerator().w(function (_context) {\n          while (1) switch (_context.n) {\n            case 0:\n              if (!user) {\n                _context.n = 5;\n                break;\n              }\n              _context.p = 1;\n              // Firestore에서 사용자 정보 문서 가져오기\n              userDocRef = doc(db, \"users\", user.uid);\n              _context.n = 2;\n              return getDoc(userDocRef);\n            case 2:\n              userDocSnap = _context.v;\n              nickname = \"\";\n              profileImage = \"/default-profile.png\";\n              userType = \"user\"; // 사용자 문서가 존재하면 정보 추출\n              if (userDocSnap.exists()) {\n                data = userDocSnap.data();\n                nickname = data.nickname || \"\";\n                profileImage = data.profileImage || \"/default-profile.png\";\n                userType = data.userType || \"user\";\n              }\n              setLogin(user.uid, user.email || \"\", nickname, profileImage, userType);\n              _context.n = 4;\n              break;\n            case 3:\n              _context.p = 3;\n              _t = _context.v;\n              setLogin(user.uid, user.email || \"\", \"\", \"/default-profile.png\", \"user\");\n            case 4:\n              _context.n = 6;\n              break;\n            case 5:\n              logout();\n            case 6:\n              return _context.a(2);\n          }\n        }, _callee, null, [[1, 3]]);\n      }));\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n\n    // 컴포넌트가 언마운트되면 리스너 제거\n    return function () {\n      return unsubscribe();\n    };\n  }, [setLogin, logout]);\n  return null;\n};\n_s(AuthListener, \"OQGW57txWS3vJy3oTdc9VynE25c=\", false, function () {\n  return [useLoginStore, useLoginStore];\n});\n_c = AuthListener;\nexport default AuthListener;\nvar _c;\n$RefreshReg$(_c, \"AuthListener\");","map":{"version":3,"names":["useLoginStore","onAuthStateChanged","auth","db","useEffect","doc","getDoc","AuthListener","_s","setLogin","state","logout","unsubscribe","_ref","_asyncToGenerator","_regenerator","m","_callee","user","userDocRef","userDocSnap","nickname","profileImage","userType","data","_t","w","_context","n","p","uid","v","exists","email","a","_x","apply","arguments","_c","$RefreshReg$"],"sources":["C:/Users/als40/Desktop/HandsMarket/frontend/src/components/AuthListener.tsx"],"sourcesContent":["import useLoginStore from \"../stores/useLoginStore\";\r\nimport { onAuthStateChanged } from \"firebase/auth\";\r\nimport { auth, db } from \"../firebase/firebaseConfig\";\r\nimport { useEffect } from \"react\";\r\nimport { doc, getDoc } from \"firebase/firestore\";\r\n\r\nconst AuthListener = () => {\r\n  const setLogin = useLoginStore((state) => state.setLogin);\r\n  const logout = useLoginStore((state) => state.logout);\r\n\r\n  useEffect(() => {\r\n    // Firebase 인증 상태 변경 감지\r\n    const unsubscribe = onAuthStateChanged(auth, async (user) => {\r\n      if (user) {\r\n        try {\r\n          // Firestore에서 사용자 정보 문서 가져오기\r\n          const userDocRef = doc(db, \"users\", user.uid);\r\n          const userDocSnap = await getDoc(userDocRef);\r\n\r\n          let nickname = \"\";\r\n          let profileImage = \"/default-profile.png\";\r\n          let userType: \"user\" | \"seller\" = \"user\";\r\n\r\n          // 사용자 문서가 존재하면 정보 추출\r\n          if (userDocSnap.exists()) {\r\n            const data = userDocSnap.data();\r\n            nickname = data.nickname || \"\";\r\n            profileImage = data.profileImage || \"/default-profile.png\";\r\n            userType = data.userType || \"user\";\r\n          }\r\n          setLogin(\r\n            user.uid,\r\n            user.email || \"\",\r\n            nickname,\r\n            profileImage,\r\n            userType\r\n          );\r\n        } catch (error) {\r\n          setLogin(\r\n            user.uid,\r\n            user.email || \"\",\r\n            \"\",\r\n            \"/default-profile.png\",\r\n            \"user\"\r\n          );\r\n        }\r\n      } else {\r\n        logout();\r\n      }\r\n    });\r\n\r\n    // 컴포넌트가 언마운트되면 리스너 제거\r\n    return () => unsubscribe();\r\n  }, [setLogin, logout]);\r\n\r\n  return null;\r\n};\r\n\r\nexport default AuthListener;\r\n"],"mappings":";;;AAAA,OAAOA,aAAa,MAAM,yBAAyB;AACnD,SAASC,kBAAkB,QAAQ,eAAe;AAClD,SAASC,IAAI,EAAEC,EAAE,QAAQ,4BAA4B;AACrD,SAASC,SAAS,QAAQ,OAAO;AACjC,SAASC,GAAG,EAAEC,MAAM,QAAQ,oBAAoB;AAEhD,IAAMC,YAAY,GAAG,SAAfA,YAAYA,CAAA,EAAS;EAAAC,EAAA;EACzB,IAAMC,QAAQ,GAAGT,aAAa,CAAC,UAACU,KAAK;IAAA,OAAKA,KAAK,CAACD,QAAQ;EAAA,EAAC;EACzD,IAAME,MAAM,GAAGX,aAAa,CAAC,UAACU,KAAK;IAAA,OAAKA,KAAK,CAACC,MAAM;EAAA,EAAC;EAErDP,SAAS,CAAC,YAAM;IACd;IACA,IAAMQ,WAAW,GAAGX,kBAAkB,CAACC,IAAI;MAAA,IAAAW,IAAA,GAAAC,iBAAA,cAAAC,YAAA,GAAAC,CAAA,CAAE,SAAAC,QAAOC,IAAI;QAAA,IAAAC,UAAA,EAAAC,WAAA,EAAAC,QAAA,EAAAC,YAAA,EAAAC,QAAA,EAAAC,IAAA,EAAAC,EAAA;QAAA,OAAAV,YAAA,GAAAW,CAAA,WAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,CAAA;YAAA;cAAA,KAClDV,IAAI;gBAAAS,QAAA,CAAAC,CAAA;gBAAA;cAAA;cAAAD,QAAA,CAAAE,CAAA;cAEJ;cACMV,UAAU,GAAGd,GAAG,CAACF,EAAE,EAAE,OAAO,EAAEe,IAAI,CAACY,GAAG,CAAC;cAAAH,QAAA,CAAAC,CAAA;cAAA,OACnBtB,MAAM,CAACa,UAAU,CAAC;YAAA;cAAtCC,WAAW,GAAAO,QAAA,CAAAI,CAAA;cAEbV,QAAQ,GAAG,EAAE;cACbC,YAAY,GAAG,sBAAsB;cACrCC,QAA2B,GAAG,MAAM,EAExC;cACA,IAAIH,WAAW,CAACY,MAAM,CAAC,CAAC,EAAE;gBAClBR,IAAI,GAAGJ,WAAW,CAACI,IAAI,CAAC,CAAC;gBAC/BH,QAAQ,GAAGG,IAAI,CAACH,QAAQ,IAAI,EAAE;gBAC9BC,YAAY,GAAGE,IAAI,CAACF,YAAY,IAAI,sBAAsB;gBAC1DC,QAAQ,GAAGC,IAAI,CAACD,QAAQ,IAAI,MAAM;cACpC;cACAd,QAAQ,CACNS,IAAI,CAACY,GAAG,EACRZ,IAAI,CAACe,KAAK,IAAI,EAAE,EAChBZ,QAAQ,EACRC,YAAY,EACZC,QACF,CAAC;cAACI,QAAA,CAAAC,CAAA;cAAA;YAAA;cAAAD,QAAA,CAAAE,CAAA;cAAAJ,EAAA,GAAAE,QAAA,CAAAI,CAAA;cAEFtB,QAAQ,CACNS,IAAI,CAACY,GAAG,EACRZ,IAAI,CAACe,KAAK,IAAI,EAAE,EAChB,EAAE,EACF,sBAAsB,EACtB,MACF,CAAC;YAAC;cAAAN,QAAA,CAAAC,CAAA;cAAA;YAAA;cAGJjB,MAAM,CAAC,CAAC;YAAC;cAAA,OAAAgB,QAAA,CAAAO,CAAA;UAAA;QAAA,GAAAjB,OAAA;MAAA,CAEZ;MAAA,iBAAAkB,EAAA;QAAA,OAAAtB,IAAA,CAAAuB,KAAA,OAAAC,SAAA;MAAA;IAAA,IAAC;;IAEF;IACA,OAAO;MAAA,OAAMzB,WAAW,CAAC,CAAC;IAAA;EAC5B,CAAC,EAAE,CAACH,QAAQ,EAAEE,MAAM,CAAC,CAAC;EAEtB,OAAO,IAAI;AACb,CAAC;AAACH,EAAA,CAlDID,YAAY;EAAA,QACCP,aAAa,EACfA,aAAa;AAAA;AAAAsC,EAAA,GAFxB/B,YAAY;AAoDlB,eAAeA,YAAY;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}