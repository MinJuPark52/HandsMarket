{"ast":null,"code":"import _toConsumableArray from \"C:/Users/als40/Desktop/HandsMarket/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"C:/Users/als40/Desktop/HandsMarket/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _regenerator from \"C:/Users/als40/Desktop/HandsMarket/node_modules/@babel/runtime/helpers/esm/regenerator.js\";\nimport _asyncToGenerator from \"C:/Users/als40/Desktop/HandsMarket/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"C:/Users/als40/Desktop/HandsMarket/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/als40/Desktop/HandsMarket/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classPrivateFieldInitSpec from \"C:/Users/als40/Desktop/HandsMarket/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _classPrivateFieldGet from \"C:/Users/als40/Desktop/HandsMarket/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet2.js\";\nimport _classPrivateFieldSet from \"C:/Users/als40/Desktop/HandsMarket/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet2.js\";\nvar _queryCache, _mutationCache, _defaultOptions, _queryDefaults, _mutationDefaults, _mountCount, _unsubscribeFocus, _unsubscribeOnline;\n// src/queryClient.ts\nimport { functionalUpdate, hashKey, hashQueryKeyByOptions, noop, partialMatchKey, resolveStaleTime, skipToken } from \"./utils.js\";\nimport { QueryCache } from \"./queryCache.js\";\nimport { MutationCache } from \"./mutationCache.js\";\nimport { focusManager } from \"./focusManager.js\";\nimport { onlineManager } from \"./onlineManager.js\";\nimport { notifyManager } from \"./notifyManager.js\";\nimport { infiniteQueryBehavior } from \"./infiniteQueryBehavior.js\";\nvar QueryClient = (_queryCache = /*#__PURE__*/new WeakMap(), _mutationCache = /*#__PURE__*/new WeakMap(), _defaultOptions = /*#__PURE__*/new WeakMap(), _queryDefaults = /*#__PURE__*/new WeakMap(), _mutationDefaults = /*#__PURE__*/new WeakMap(), _mountCount = /*#__PURE__*/new WeakMap(), _unsubscribeFocus = /*#__PURE__*/new WeakMap(), _unsubscribeOnline = /*#__PURE__*/new WeakMap(), /*#__PURE__*/function () {\n  function QueryClient() {\n    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, QueryClient);\n    _classPrivateFieldInitSpec(this, _queryCache, void 0);\n    _classPrivateFieldInitSpec(this, _mutationCache, void 0);\n    _classPrivateFieldInitSpec(this, _defaultOptions, void 0);\n    _classPrivateFieldInitSpec(this, _queryDefaults, void 0);\n    _classPrivateFieldInitSpec(this, _mutationDefaults, void 0);\n    _classPrivateFieldInitSpec(this, _mountCount, void 0);\n    _classPrivateFieldInitSpec(this, _unsubscribeFocus, void 0);\n    _classPrivateFieldInitSpec(this, _unsubscribeOnline, void 0);\n    _classPrivateFieldSet(_queryCache, this, config.queryCache || new QueryCache());\n    _classPrivateFieldSet(_mutationCache, this, config.mutationCache || new MutationCache());\n    _classPrivateFieldSet(_defaultOptions, this, config.defaultOptions || {});\n    _classPrivateFieldSet(_queryDefaults, this, /* @__PURE__ */new Map());\n    _classPrivateFieldSet(_mutationDefaults, this, /* @__PURE__ */new Map());\n    _classPrivateFieldSet(_mountCount, this, 0);\n  }\n  return _createClass(QueryClient, [{\n    key: \"mount\",\n    value: function mount() {\n      var _this$mountCount,\n        _this$mountCount2,\n        _this = this;\n      _classPrivateFieldSet(_mountCount, this, (_this$mountCount = _classPrivateFieldGet(_mountCount, this), _this$mountCount2 = _this$mountCount++, _this$mountCount)), _this$mountCount2;\n      if (_classPrivateFieldGet(_mountCount, this) !== 1) return;\n      _classPrivateFieldSet(_unsubscribeFocus, this, focusManager.subscribe(/*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(focused) {\n          return _regenerator().w(function (_context) {\n            while (1) switch (_context.n) {\n              case 0:\n                if (!focused) {\n                  _context.n = 2;\n                  break;\n                }\n                _context.n = 1;\n                return _this.resumePausedMutations();\n              case 1:\n                _classPrivateFieldGet(_queryCache, _this).onFocus();\n              case 2:\n                return _context.a(2);\n            }\n          }, _callee);\n        }));\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }()));\n      _classPrivateFieldSet(_unsubscribeOnline, this, onlineManager.subscribe(/*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee2(online) {\n          return _regenerator().w(function (_context2) {\n            while (1) switch (_context2.n) {\n              case 0:\n                if (!online) {\n                  _context2.n = 2;\n                  break;\n                }\n                _context2.n = 1;\n                return _this.resumePausedMutations();\n              case 1:\n                _classPrivateFieldGet(_queryCache, _this).onOnline();\n              case 2:\n                return _context2.a(2);\n            }\n          }, _callee2);\n        }));\n        return function (_x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }()));\n    }\n  }, {\n    key: \"unmount\",\n    value: function unmount() {\n      var _this$mountCount3, _this$mountCount4, _classPrivateFieldGet2, _classPrivateFieldGet3;\n      _classPrivateFieldSet(_mountCount, this, (_this$mountCount3 = _classPrivateFieldGet(_mountCount, this), _this$mountCount4 = _this$mountCount3--, _this$mountCount3)), _this$mountCount4;\n      if (_classPrivateFieldGet(_mountCount, this) !== 0) return;\n      (_classPrivateFieldGet2 = _classPrivateFieldGet(_unsubscribeFocus, this)) === null || _classPrivateFieldGet2 === void 0 || _classPrivateFieldGet2.call(this);\n      _classPrivateFieldSet(_unsubscribeFocus, this, void 0);\n      (_classPrivateFieldGet3 = _classPrivateFieldGet(_unsubscribeOnline, this)) === null || _classPrivateFieldGet3 === void 0 || _classPrivateFieldGet3.call(this);\n      _classPrivateFieldSet(_unsubscribeOnline, this, void 0);\n    }\n  }, {\n    key: \"isFetching\",\n    value: function isFetching(filters) {\n      return _classPrivateFieldGet(_queryCache, this).findAll(_objectSpread(_objectSpread({}, filters), {}, {\n        fetchStatus: \"fetching\"\n      })).length;\n    }\n  }, {\n    key: \"isMutating\",\n    value: function isMutating(filters) {\n      return _classPrivateFieldGet(_mutationCache, this).findAll(_objectSpread(_objectSpread({}, filters), {}, {\n        status: \"pending\"\n      })).length;\n    }\n    /**\n     * Imperative (non-reactive) way to retrieve data for a QueryKey.\n     * Should only be used in callbacks or functions where reading the latest data is necessary, e.g. for optimistic updates.\n     *\n     * Hint: Do not use this function inside a component, because it won't receive updates.\n     * Use `useQuery` to create a `QueryObserver` that subscribes to changes.\n     */\n  }, {\n    key: \"getQueryData\",\n    value: function getQueryData(queryKey) {\n      var _classPrivateFieldGet4;\n      var options = this.defaultQueryOptions({\n        queryKey: queryKey\n      });\n      return (_classPrivateFieldGet4 = _classPrivateFieldGet(_queryCache, this).get(options.queryHash)) === null || _classPrivateFieldGet4 === void 0 ? void 0 : _classPrivateFieldGet4.state.data;\n    }\n  }, {\n    key: \"ensureQueryData\",\n    value: function ensureQueryData(options) {\n      var defaultedOptions = this.defaultQueryOptions(options);\n      var query = _classPrivateFieldGet(_queryCache, this).build(this, defaultedOptions);\n      var cachedData = query.state.data;\n      if (cachedData === void 0) {\n        return this.fetchQuery(options);\n      }\n      if (options.revalidateIfStale && query.isStaleByTime(resolveStaleTime(defaultedOptions.staleTime, query))) {\n        void this.prefetchQuery(defaultedOptions);\n      }\n      return Promise.resolve(cachedData);\n    }\n  }, {\n    key: \"getQueriesData\",\n    value: function getQueriesData(filters) {\n      return _classPrivateFieldGet(_queryCache, this).findAll(filters).map(function (_ref3) {\n        var queryKey = _ref3.queryKey,\n          state = _ref3.state;\n        var data = state.data;\n        return [queryKey, data];\n      });\n    }\n  }, {\n    key: \"setQueryData\",\n    value: function setQueryData(queryKey, updater, options) {\n      var defaultedOptions = this.defaultQueryOptions({\n        queryKey: queryKey\n      });\n      var query = _classPrivateFieldGet(_queryCache, this).get(defaultedOptions.queryHash);\n      var prevData = query === null || query === void 0 ? void 0 : query.state.data;\n      var data = functionalUpdate(updater, prevData);\n      if (data === void 0) {\n        return void 0;\n      }\n      return _classPrivateFieldGet(_queryCache, this).build(this, defaultedOptions).setData(data, _objectSpread(_objectSpread({}, options), {}, {\n        manual: true\n      }));\n    }\n  }, {\n    key: \"setQueriesData\",\n    value: function setQueriesData(filters, updater, options) {\n      var _this2 = this;\n      return notifyManager.batch(function () {\n        return _classPrivateFieldGet(_queryCache, _this2).findAll(filters).map(function (_ref4) {\n          var queryKey = _ref4.queryKey;\n          return [queryKey, _this2.setQueryData(queryKey, updater, options)];\n        });\n      });\n    }\n  }, {\n    key: \"getQueryState\",\n    value: function getQueryState(queryKey) {\n      var _classPrivateFieldGet5;\n      var options = this.defaultQueryOptions({\n        queryKey: queryKey\n      });\n      return (_classPrivateFieldGet5 = _classPrivateFieldGet(_queryCache, this).get(options.queryHash)) === null || _classPrivateFieldGet5 === void 0 ? void 0 : _classPrivateFieldGet5.state;\n    }\n  }, {\n    key: \"removeQueries\",\n    value: function removeQueries(filters) {\n      var queryCache = _classPrivateFieldGet(_queryCache, this);\n      notifyManager.batch(function () {\n        queryCache.findAll(filters).forEach(function (query) {\n          queryCache.remove(query);\n        });\n      });\n    }\n  }, {\n    key: \"resetQueries\",\n    value: function resetQueries(filters, options) {\n      var _this3 = this;\n      var queryCache = _classPrivateFieldGet(_queryCache, this);\n      return notifyManager.batch(function () {\n        queryCache.findAll(filters).forEach(function (query) {\n          query.reset();\n        });\n        return _this3.refetchQueries(_objectSpread({\n          type: \"active\"\n        }, filters), options);\n      });\n    }\n  }, {\n    key: \"cancelQueries\",\n    value: function cancelQueries(filters) {\n      var _this4 = this;\n      var cancelOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var defaultedCancelOptions = _objectSpread({\n        revert: true\n      }, cancelOptions);\n      var promises = notifyManager.batch(function () {\n        return _classPrivateFieldGet(_queryCache, _this4).findAll(filters).map(function (query) {\n          return query.cancel(defaultedCancelOptions);\n        });\n      });\n      return Promise.all(promises).then(noop).catch(noop);\n    }\n  }, {\n    key: \"invalidateQueries\",\n    value: function invalidateQueries(filters) {\n      var _this5 = this;\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return notifyManager.batch(function () {\n        var _ref5, _filters$refetchType;\n        _classPrivateFieldGet(_queryCache, _this5).findAll(filters).forEach(function (query) {\n          query.invalidate();\n        });\n        if ((filters === null || filters === void 0 ? void 0 : filters.refetchType) === \"none\") {\n          return Promise.resolve();\n        }\n        return _this5.refetchQueries(_objectSpread(_objectSpread({}, filters), {}, {\n          type: (_ref5 = (_filters$refetchType = filters === null || filters === void 0 ? void 0 : filters.refetchType) !== null && _filters$refetchType !== void 0 ? _filters$refetchType : filters === null || filters === void 0 ? void 0 : filters.type) !== null && _ref5 !== void 0 ? _ref5 : \"active\"\n        }), options);\n      });\n    }\n  }, {\n    key: \"refetchQueries\",\n    value: function refetchQueries(filters) {\n      var _options$cancelRefetc,\n        _this6 = this;\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var fetchOptions = _objectSpread(_objectSpread({}, options), {}, {\n        cancelRefetch: (_options$cancelRefetc = options.cancelRefetch) !== null && _options$cancelRefetc !== void 0 ? _options$cancelRefetc : true\n      });\n      var promises = notifyManager.batch(function () {\n        return _classPrivateFieldGet(_queryCache, _this6).findAll(filters).filter(function (query) {\n          return !query.isDisabled() && !query.isStatic();\n        }).map(function (query) {\n          var promise = query.fetch(void 0, fetchOptions);\n          if (!fetchOptions.throwOnError) {\n            promise = promise.catch(noop);\n          }\n          return query.state.fetchStatus === \"paused\" ? Promise.resolve() : promise;\n        });\n      });\n      return Promise.all(promises).then(noop);\n    }\n  }, {\n    key: \"fetchQuery\",\n    value: function fetchQuery(options) {\n      var defaultedOptions = this.defaultQueryOptions(options);\n      if (defaultedOptions.retry === void 0) {\n        defaultedOptions.retry = false;\n      }\n      var query = _classPrivateFieldGet(_queryCache, this).build(this, defaultedOptions);\n      return query.isStaleByTime(resolveStaleTime(defaultedOptions.staleTime, query)) ? query.fetch(defaultedOptions) : Promise.resolve(query.state.data);\n    }\n  }, {\n    key: \"prefetchQuery\",\n    value: function prefetchQuery(options) {\n      return this.fetchQuery(options).then(noop).catch(noop);\n    }\n  }, {\n    key: \"fetchInfiniteQuery\",\n    value: function fetchInfiniteQuery(options) {\n      options.behavior = infiniteQueryBehavior(options.pages);\n      return this.fetchQuery(options);\n    }\n  }, {\n    key: \"prefetchInfiniteQuery\",\n    value: function prefetchInfiniteQuery(options) {\n      return this.fetchInfiniteQuery(options).then(noop).catch(noop);\n    }\n  }, {\n    key: \"ensureInfiniteQueryData\",\n    value: function ensureInfiniteQueryData(options) {\n      options.behavior = infiniteQueryBehavior(options.pages);\n      return this.ensureQueryData(options);\n    }\n  }, {\n    key: \"resumePausedMutations\",\n    value: function resumePausedMutations() {\n      if (onlineManager.isOnline()) {\n        return _classPrivateFieldGet(_mutationCache, this).resumePausedMutations();\n      }\n      return Promise.resolve();\n    }\n  }, {\n    key: \"getQueryCache\",\n    value: function getQueryCache() {\n      return _classPrivateFieldGet(_queryCache, this);\n    }\n  }, {\n    key: \"getMutationCache\",\n    value: function getMutationCache() {\n      return _classPrivateFieldGet(_mutationCache, this);\n    }\n  }, {\n    key: \"getDefaultOptions\",\n    value: function getDefaultOptions() {\n      return _classPrivateFieldGet(_defaultOptions, this);\n    }\n  }, {\n    key: \"setDefaultOptions\",\n    value: function setDefaultOptions(options) {\n      _classPrivateFieldSet(_defaultOptions, this, options);\n    }\n  }, {\n    key: \"setQueryDefaults\",\n    value: function setQueryDefaults(queryKey, options) {\n      _classPrivateFieldGet(_queryDefaults, this).set(hashKey(queryKey), {\n        queryKey: queryKey,\n        defaultOptions: options\n      });\n    }\n  }, {\n    key: \"getQueryDefaults\",\n    value: function getQueryDefaults(queryKey) {\n      var defaults = _toConsumableArray(_classPrivateFieldGet(_queryDefaults, this).values());\n      var result = {};\n      defaults.forEach(function (queryDefault) {\n        if (partialMatchKey(queryKey, queryDefault.queryKey)) {\n          Object.assign(result, queryDefault.defaultOptions);\n        }\n      });\n      return result;\n    }\n  }, {\n    key: \"setMutationDefaults\",\n    value: function setMutationDefaults(mutationKey, options) {\n      _classPrivateFieldGet(_mutationDefaults, this).set(hashKey(mutationKey), {\n        mutationKey: mutationKey,\n        defaultOptions: options\n      });\n    }\n  }, {\n    key: \"getMutationDefaults\",\n    value: function getMutationDefaults(mutationKey) {\n      var defaults = _toConsumableArray(_classPrivateFieldGet(_mutationDefaults, this).values());\n      var result = {};\n      defaults.forEach(function (queryDefault) {\n        if (partialMatchKey(mutationKey, queryDefault.mutationKey)) {\n          Object.assign(result, queryDefault.defaultOptions);\n        }\n      });\n      return result;\n    }\n  }, {\n    key: \"defaultQueryOptions\",\n    value: function defaultQueryOptions(options) {\n      if (options._defaulted) {\n        return options;\n      }\n      var defaultedOptions = _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, _classPrivateFieldGet(_defaultOptions, this).queries), this.getQueryDefaults(options.queryKey)), options), {}, {\n        _defaulted: true\n      });\n      if (!defaultedOptions.queryHash) {\n        defaultedOptions.queryHash = hashQueryKeyByOptions(defaultedOptions.queryKey, defaultedOptions);\n      }\n      if (defaultedOptions.refetchOnReconnect === void 0) {\n        defaultedOptions.refetchOnReconnect = defaultedOptions.networkMode !== \"always\";\n      }\n      if (defaultedOptions.throwOnError === void 0) {\n        defaultedOptions.throwOnError = !!defaultedOptions.suspense;\n      }\n      if (!defaultedOptions.networkMode && defaultedOptions.persister) {\n        defaultedOptions.networkMode = \"offlineFirst\";\n      }\n      if (defaultedOptions.queryFn === skipToken) {\n        defaultedOptions.enabled = false;\n      }\n      return defaultedOptions;\n    }\n  }, {\n    key: \"defaultMutationOptions\",\n    value: function defaultMutationOptions(options) {\n      if (options !== null && options !== void 0 && options._defaulted) {\n        return options;\n      }\n      return _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, _classPrivateFieldGet(_defaultOptions, this).mutations), (options === null || options === void 0 ? void 0 : options.mutationKey) && this.getMutationDefaults(options.mutationKey)), options), {}, {\n        _defaulted: true\n      });\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      _classPrivateFieldGet(_queryCache, this).clear();\n      _classPrivateFieldGet(_mutationCache, this).clear();\n    }\n  }]);\n}());\nexport { QueryClient };","map":{"version":3,"names":["functionalUpdate","hashKey","hashQueryKeyByOptions","noop","partialMatchKey","resolveStaleTime","skipToken","QueryCache","MutationCache","focusManager","onlineManager","notifyManager","infiniteQueryBehavior","QueryClient","_queryCache","WeakMap","_mutationCache","_defaultOptions","_queryDefaults","_mutationDefaults","_mountCount","_unsubscribeFocus","_unsubscribeOnline","config","arguments","length","undefined","_classCallCheck","_classPrivateFieldInitSpec","_classPrivateFieldSet","queryCache","mutationCache","defaultOptions","Map","_createClass","key","value","mount","_this$mountCount","_this$mountCount2","_this","_classPrivateFieldGet","subscribe","_ref","_asyncToGenerator","_regenerator","m","_callee","focused","w","_context","n","resumePausedMutations","onFocus","a","_x","apply","_ref2","_callee2","online","_context2","onOnline","_x2","unmount","_this$mountCount3","_this$mountCount4","_classPrivateFieldGet2","_classPrivateFieldGet3","call","isFetching","filters","findAll","_objectSpread","fetchStatus","isMutating","status","getQueryData","queryKey","_classPrivateFieldGet4","options","defaultQueryOptions","get","queryHash","state","data","ensureQueryData","defaultedOptions","query","build","cachedData","fetchQuery","revalidateIfStale","isStaleByTime","staleTime","prefetchQuery","Promise","resolve","getQueriesData","map","_ref3","setQueryData","updater","prevData","setData","manual","setQueriesData","_this2","batch","_ref4","getQueryState","_classPrivateFieldGet5","removeQueries","forEach","remove","resetQueries","_this3","reset","refetchQueries","type","cancelQueries","_this4","cancelOptions","defaultedCancelOptions","revert","promises","cancel","all","then","catch","invalidateQueries","_this5","_ref5","_filters$refetchType","invalidate","refetchType","_options$cancelRefetc","_this6","fetchOptions","cancelRefetch","filter","isDisabled","isStatic","promise","fetch","throwOnError","retry","fetchInfiniteQuery","behavior","pages","prefetchInfiniteQuery","ensureInfiniteQueryData","isOnline","getQueryCache","getMutationCache","getDefaultOptions","setDefaultOptions","setQueryDefaults","set","getQueryDefaults","defaults","_toConsumableArray","values","result","queryDefault","Object","assign","setMutationDefaults","mutationKey","getMutationDefaults","_defaulted","queries","refetchOnReconnect","networkMode","suspense","persister","queryFn","enabled","defaultMutationOptions","mutations","clear"],"sources":["C:\\Users\\als40\\Desktop\\HandsMarket\\node_modules\\@tanstack\\query-core\\src\\queryClient.ts"],"sourcesContent":["import {\n  functionalUpdate,\n  hashKey,\n  hashQueryKeyByOptions,\n  noop,\n  partialMatchKey,\n  resolveStaleTime,\n  skipToken,\n} from './utils'\nimport { QueryCache } from './queryCache'\nimport { MutationCache } from './mutationCache'\nimport { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { notifyManager } from './notifyManager'\nimport { infiniteQueryBehavior } from './infiniteQueryBehavior'\nimport type {\n  CancelOptions,\n  DefaultError,\n  DefaultOptions,\n  DefaultedQueryObserverOptions,\n  EnsureInfiniteQueryDataOptions,\n  EnsureQueryDataOptions,\n  FetchInfiniteQueryOptions,\n  FetchQueryOptions,\n  InferDataFromTag,\n  InferErrorFromTag,\n  InfiniteData,\n  InvalidateOptions,\n  InvalidateQueryFilters,\n  MutationKey,\n  MutationObserverOptions,\n  MutationOptions,\n  NoInfer,\n  OmitKeyof,\n  QueryClientConfig,\n  QueryKey,\n  QueryObserverOptions,\n  QueryOptions,\n  RefetchOptions,\n  RefetchQueryFilters,\n  ResetOptions,\n  SetDataOptions,\n} from './types'\nimport type { QueryState } from './query'\nimport type { MutationFilters, QueryFilters, Updater } from './utils'\n\n// TYPES\n\ninterface QueryDefaults {\n  queryKey: QueryKey\n  defaultOptions: OmitKeyof<QueryOptions<any, any, any>, 'queryKey'>\n}\n\ninterface MutationDefaults {\n  mutationKey: MutationKey\n  defaultOptions: MutationOptions<any, any, any, any>\n}\n\n// CLASS\n\nexport class QueryClient {\n  #queryCache: QueryCache\n  #mutationCache: MutationCache\n  #defaultOptions: DefaultOptions\n  #queryDefaults: Map<string, QueryDefaults>\n  #mutationDefaults: Map<string, MutationDefaults>\n  #mountCount: number\n  #unsubscribeFocus?: () => void\n  #unsubscribeOnline?: () => void\n\n  constructor(config: QueryClientConfig = {}) {\n    this.#queryCache = config.queryCache || new QueryCache()\n    this.#mutationCache = config.mutationCache || new MutationCache()\n    this.#defaultOptions = config.defaultOptions || {}\n    this.#queryDefaults = new Map()\n    this.#mutationDefaults = new Map()\n    this.#mountCount = 0\n  }\n\n  mount(): void {\n    this.#mountCount++\n    if (this.#mountCount !== 1) return\n\n    this.#unsubscribeFocus = focusManager.subscribe(async (focused) => {\n      if (focused) {\n        await this.resumePausedMutations()\n        this.#queryCache.onFocus()\n      }\n    })\n    this.#unsubscribeOnline = onlineManager.subscribe(async (online) => {\n      if (online) {\n        await this.resumePausedMutations()\n        this.#queryCache.onOnline()\n      }\n    })\n  }\n\n  unmount(): void {\n    this.#mountCount--\n    if (this.#mountCount !== 0) return\n\n    this.#unsubscribeFocus?.()\n    this.#unsubscribeFocus = undefined\n\n    this.#unsubscribeOnline?.()\n    this.#unsubscribeOnline = undefined\n  }\n\n  isFetching<TQueryFilters extends QueryFilters<any> = QueryFilters>(\n    filters?: TQueryFilters,\n  ): number {\n    return this.#queryCache.findAll({ ...filters, fetchStatus: 'fetching' })\n      .length\n  }\n\n  isMutating<\n    TMutationFilters extends MutationFilters<any, any> = MutationFilters,\n  >(filters?: TMutationFilters): number {\n    return this.#mutationCache.findAll({ ...filters, status: 'pending' }).length\n  }\n\n  /**\n   * Imperative (non-reactive) way to retrieve data for a QueryKey.\n   * Should only be used in callbacks or functions where reading the latest data is necessary, e.g. for optimistic updates.\n   *\n   * Hint: Do not use this function inside a component, because it won't receive updates.\n   * Use `useQuery` to create a `QueryObserver` that subscribes to changes.\n   */\n  getQueryData<\n    TQueryFnData = unknown,\n    TTaggedQueryKey extends QueryKey = QueryKey,\n    TInferredQueryFnData = InferDataFromTag<TQueryFnData, TTaggedQueryKey>,\n  >(queryKey: TTaggedQueryKey): TInferredQueryFnData | undefined {\n    const options = this.defaultQueryOptions({ queryKey })\n\n    return this.#queryCache.get<TInferredQueryFnData>(options.queryHash)?.state\n      .data\n  }\n\n  ensureQueryData<\n    TQueryFnData,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: EnsureQueryDataOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<TData> {\n    const defaultedOptions = this.defaultQueryOptions(options)\n    const query = this.#queryCache.build(this, defaultedOptions)\n    const cachedData = query.state.data\n\n    if (cachedData === undefined) {\n      return this.fetchQuery(options)\n    }\n\n    if (\n      options.revalidateIfStale &&\n      query.isStaleByTime(resolveStaleTime(defaultedOptions.staleTime, query))\n    ) {\n      void this.prefetchQuery(defaultedOptions)\n    }\n\n    return Promise.resolve(cachedData)\n  }\n\n  getQueriesData<\n    TQueryFnData = unknown,\n    TQueryFilters extends QueryFilters<any> = QueryFilters,\n  >(filters: TQueryFilters): Array<[QueryKey, TQueryFnData | undefined]> {\n    return this.#queryCache.findAll(filters).map(({ queryKey, state }) => {\n      const data = state.data as TQueryFnData | undefined\n      return [queryKey, data]\n    })\n  }\n\n  setQueryData<\n    TQueryFnData = unknown,\n    TTaggedQueryKey extends QueryKey = QueryKey,\n    TInferredQueryFnData = InferDataFromTag<TQueryFnData, TTaggedQueryKey>,\n  >(\n    queryKey: TTaggedQueryKey,\n    updater: Updater<\n      NoInfer<TInferredQueryFnData> | undefined,\n      NoInfer<TInferredQueryFnData> | undefined\n    >,\n    options?: SetDataOptions,\n  ): NoInfer<TInferredQueryFnData> | undefined {\n    const defaultedOptions = this.defaultQueryOptions<\n      any,\n      any,\n      unknown,\n      any,\n      QueryKey\n    >({ queryKey })\n\n    const query = this.#queryCache.get<TInferredQueryFnData>(\n      defaultedOptions.queryHash,\n    )\n    const prevData = query?.state.data\n    const data = functionalUpdate(updater, prevData)\n\n    if (data === undefined) {\n      return undefined\n    }\n\n    return this.#queryCache\n      .build(this, defaultedOptions)\n      .setData(data, { ...options, manual: true })\n  }\n\n  setQueriesData<\n    TQueryFnData,\n    TQueryFilters extends QueryFilters<any> = QueryFilters,\n  >(\n    filters: TQueryFilters,\n    updater: Updater<\n      NoInfer<TQueryFnData> | undefined,\n      NoInfer<TQueryFnData> | undefined\n    >,\n    options?: SetDataOptions,\n  ): Array<[QueryKey, TQueryFnData | undefined]> {\n    return notifyManager.batch(() =>\n      this.#queryCache\n        .findAll(filters)\n        .map(({ queryKey }) => [\n          queryKey,\n          this.setQueryData<TQueryFnData>(queryKey, updater, options),\n        ]),\n    )\n  }\n\n  getQueryState<\n    TQueryFnData = unknown,\n    TError = DefaultError,\n    TTaggedQueryKey extends QueryKey = QueryKey,\n    TInferredQueryFnData = InferDataFromTag<TQueryFnData, TTaggedQueryKey>,\n    TInferredError = InferErrorFromTag<TError, TTaggedQueryKey>,\n  >(\n    queryKey: TTaggedQueryKey,\n  ): QueryState<TInferredQueryFnData, TInferredError> | undefined {\n    const options = this.defaultQueryOptions({ queryKey })\n    return this.#queryCache.get<TInferredQueryFnData, TInferredError>(\n      options.queryHash,\n    )?.state\n  }\n\n  removeQueries<TTaggedQueryKey extends QueryKey = QueryKey>(\n    filters?: QueryFilters<TTaggedQueryKey>,\n  ): void {\n    const queryCache = this.#queryCache\n    notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach((query) => {\n        queryCache.remove(query)\n      })\n    })\n  }\n\n  resetQueries<TTaggedQueryKey extends QueryKey = QueryKey>(\n    filters?: QueryFilters<TTaggedQueryKey>,\n    options?: ResetOptions,\n  ): Promise<void> {\n    const queryCache = this.#queryCache\n\n    return notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach((query) => {\n        query.reset()\n      })\n      return this.refetchQueries(\n        {\n          type: 'active',\n          ...filters,\n        },\n        options,\n      )\n    })\n  }\n\n  cancelQueries<TTaggedQueryKey extends QueryKey = QueryKey>(\n    filters?: QueryFilters<TTaggedQueryKey>,\n    cancelOptions: CancelOptions = {},\n  ): Promise<void> {\n    const defaultedCancelOptions = { revert: true, ...cancelOptions }\n\n    const promises = notifyManager.batch(() =>\n      this.#queryCache\n        .findAll(filters)\n        .map((query) => query.cancel(defaultedCancelOptions)),\n    )\n\n    return Promise.all(promises).then(noop).catch(noop)\n  }\n\n  invalidateQueries<TTaggedQueryKey extends QueryKey = QueryKey>(\n    filters?: InvalidateQueryFilters<TTaggedQueryKey>,\n    options: InvalidateOptions = {},\n  ): Promise<void> {\n    return notifyManager.batch(() => {\n      this.#queryCache.findAll(filters).forEach((query) => {\n        query.invalidate()\n      })\n\n      if (filters?.refetchType === 'none') {\n        return Promise.resolve()\n      }\n      return this.refetchQueries(\n        {\n          ...filters,\n          type: filters?.refetchType ?? filters?.type ?? 'active',\n        },\n        options,\n      )\n    })\n  }\n\n  refetchQueries<TTaggedQueryKey extends QueryKey = QueryKey>(\n    filters?: RefetchQueryFilters<TTaggedQueryKey>,\n    options: RefetchOptions = {},\n  ): Promise<void> {\n    const fetchOptions = {\n      ...options,\n      cancelRefetch: options.cancelRefetch ?? true,\n    }\n    const promises = notifyManager.batch(() =>\n      this.#queryCache\n        .findAll(filters)\n        .filter((query) => !query.isDisabled() && !query.isStatic())\n        .map((query) => {\n          let promise = query.fetch(undefined, fetchOptions)\n          if (!fetchOptions.throwOnError) {\n            promise = promise.catch(noop)\n          }\n          return query.state.fetchStatus === 'paused'\n            ? Promise.resolve()\n            : promise\n        }),\n    )\n\n    return Promise.all(promises).then(noop)\n  }\n\n  fetchQuery<\n    TQueryFnData,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n    TPageParam = never,\n  >(\n    options: FetchQueryOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryKey,\n      TPageParam\n    >,\n  ): Promise<TData> {\n    const defaultedOptions = this.defaultQueryOptions(options)\n\n    // https://github.com/tannerlinsley/react-query/issues/652\n    if (defaultedOptions.retry === undefined) {\n      defaultedOptions.retry = false\n    }\n\n    const query = this.#queryCache.build(this, defaultedOptions)\n\n    return query.isStaleByTime(\n      resolveStaleTime(defaultedOptions.staleTime, query),\n    )\n      ? query.fetch(defaultedOptions)\n      : Promise.resolve(query.state.data as TData)\n  }\n\n  prefetchQuery<\n    TQueryFnData = unknown,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n  >(\n    options: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  ): Promise<void> {\n    return this.fetchQuery(options).then(noop).catch(noop)\n  }\n\n  fetchInfiniteQuery<\n    TQueryFnData,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n    TPageParam = unknown,\n  >(\n    options: FetchInfiniteQueryOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryKey,\n      TPageParam\n    >,\n  ): Promise<InfiniteData<TData, TPageParam>> {\n    options.behavior = infiniteQueryBehavior<\n      TQueryFnData,\n      TError,\n      TData,\n      TPageParam\n    >(options.pages)\n    return this.fetchQuery(options as any)\n  }\n\n  prefetchInfiniteQuery<\n    TQueryFnData,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n    TPageParam = unknown,\n  >(\n    options: FetchInfiniteQueryOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryKey,\n      TPageParam\n    >,\n  ): Promise<void> {\n    return this.fetchInfiniteQuery(options).then(noop).catch(noop)\n  }\n\n  ensureInfiniteQueryData<\n    TQueryFnData,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n    TPageParam = unknown,\n  >(\n    options: EnsureInfiniteQueryDataOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryKey,\n      TPageParam\n    >,\n  ): Promise<InfiniteData<TData, TPageParam>> {\n    options.behavior = infiniteQueryBehavior<\n      TQueryFnData,\n      TError,\n      TData,\n      TPageParam\n    >(options.pages)\n\n    return this.ensureQueryData(options as any)\n  }\n\n  resumePausedMutations(): Promise<unknown> {\n    if (onlineManager.isOnline()) {\n      return this.#mutationCache.resumePausedMutations()\n    }\n    return Promise.resolve()\n  }\n\n  getQueryCache(): QueryCache {\n    return this.#queryCache\n  }\n\n  getMutationCache(): MutationCache {\n    return this.#mutationCache\n  }\n\n  getDefaultOptions(): DefaultOptions {\n    return this.#defaultOptions\n  }\n\n  setDefaultOptions(options: DefaultOptions): void {\n    this.#defaultOptions = options\n  }\n\n  setQueryDefaults<\n    TQueryFnData = unknown,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryData = TQueryFnData,\n  >(\n    queryKey: QueryKey,\n    options: Partial<\n      OmitKeyof<\n        QueryObserverOptions<TQueryFnData, TError, TData, TQueryData>,\n        'queryKey'\n      >\n    >,\n  ): void {\n    this.#queryDefaults.set(hashKey(queryKey), {\n      queryKey,\n      defaultOptions: options,\n    })\n  }\n\n  getQueryDefaults(\n    queryKey: QueryKey,\n  ): OmitKeyof<QueryObserverOptions<any, any, any, any, any>, 'queryKey'> {\n    const defaults = [...this.#queryDefaults.values()]\n\n    const result: OmitKeyof<\n      QueryObserverOptions<any, any, any, any, any>,\n      'queryKey'\n    > = {}\n\n    defaults.forEach((queryDefault) => {\n      if (partialMatchKey(queryKey, queryDefault.queryKey)) {\n        Object.assign(result, queryDefault.defaultOptions)\n      }\n    })\n    return result\n  }\n\n  setMutationDefaults<\n    TData = unknown,\n    TError = DefaultError,\n    TVariables = void,\n    TContext = unknown,\n  >(\n    mutationKey: MutationKey,\n    options: OmitKeyof<\n      MutationObserverOptions<TData, TError, TVariables, TContext>,\n      'mutationKey'\n    >,\n  ): void {\n    this.#mutationDefaults.set(hashKey(mutationKey), {\n      mutationKey,\n      defaultOptions: options,\n    })\n  }\n\n  getMutationDefaults(\n    mutationKey: MutationKey,\n  ): OmitKeyof<MutationObserverOptions<any, any, any, any>, 'mutationKey'> {\n    const defaults = [...this.#mutationDefaults.values()]\n\n    const result: OmitKeyof<\n      MutationObserverOptions<any, any, any, any>,\n      'mutationKey'\n    > = {}\n\n    defaults.forEach((queryDefault) => {\n      if (partialMatchKey(mutationKey, queryDefault.mutationKey)) {\n        Object.assign(result, queryDefault.defaultOptions)\n      }\n    })\n\n    return result\n  }\n\n  defaultQueryOptions<\n    TQueryFnData = unknown,\n    TError = DefaultError,\n    TData = TQueryFnData,\n    TQueryData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey,\n    TPageParam = never,\n  >(\n    options:\n      | QueryObserverOptions<\n          TQueryFnData,\n          TError,\n          TData,\n          TQueryData,\n          TQueryKey,\n          TPageParam\n        >\n      | DefaultedQueryObserverOptions<\n          TQueryFnData,\n          TError,\n          TData,\n          TQueryData,\n          TQueryKey\n        >,\n  ): DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  > {\n    if (options._defaulted) {\n      return options as DefaultedQueryObserverOptions<\n        TQueryFnData,\n        TError,\n        TData,\n        TQueryData,\n        TQueryKey\n      >\n    }\n\n    const defaultedOptions = {\n      ...this.#defaultOptions.queries,\n      ...this.getQueryDefaults(options.queryKey),\n      ...options,\n      _defaulted: true,\n    }\n\n    if (!defaultedOptions.queryHash) {\n      defaultedOptions.queryHash = hashQueryKeyByOptions(\n        defaultedOptions.queryKey,\n        defaultedOptions,\n      )\n    }\n\n    // dependent default values\n    if (defaultedOptions.refetchOnReconnect === undefined) {\n      defaultedOptions.refetchOnReconnect =\n        defaultedOptions.networkMode !== 'always'\n    }\n    if (defaultedOptions.throwOnError === undefined) {\n      defaultedOptions.throwOnError = !!defaultedOptions.suspense\n    }\n\n    if (!defaultedOptions.networkMode && defaultedOptions.persister) {\n      defaultedOptions.networkMode = 'offlineFirst'\n    }\n\n    if (defaultedOptions.queryFn === skipToken) {\n      defaultedOptions.enabled = false\n    }\n\n    return defaultedOptions as DefaultedQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  }\n\n  defaultMutationOptions<T extends MutationOptions<any, any, any, any>>(\n    options?: T,\n  ): T {\n    if (options?._defaulted) {\n      return options\n    }\n    return {\n      ...this.#defaultOptions.mutations,\n      ...(options?.mutationKey &&\n        this.getMutationDefaults(options.mutationKey)),\n      ...options,\n      _defaulted: true,\n    } as T\n  }\n\n  clear(): void {\n    this.#queryCache.clear()\n    this.#mutationCache.clear()\n  }\n}\n"],"mappings":";;;;;;;;;;;AAAA,SACEA,gBAAA,EACAC,OAAA,EACAC,qBAAA,EACAC,IAAA,EACAC,eAAA,EACAC,gBAAA,EACAC,SAAA,QACK;AACP,SAASC,UAAA,QAAkB;AAC3B,SAASC,aAAA,QAAqB;AAC9B,SAASC,YAAA,QAAoB;AAC7B,SAASC,aAAA,QAAqB;AAC9B,SAASC,aAAA,QAAqB;AAC9B,SAASC,qBAAA,QAA6B;AA8C/B,IAAMC,WAAA,IAAAC,WAAA,oBAAAC,OAAA,IAAAC,cAAA,oBAAAD,OAAA,IAAAE,eAAA,oBAAAF,OAAA,IAAAG,cAAA,oBAAAH,OAAA,IAAAI,iBAAA,oBAAAJ,OAAA,IAAAK,WAAA,oBAAAL,OAAA,IAAAM,iBAAA,oBAAAN,OAAA,IAAAO,kBAAA,oBAAAP,OAAA;EAUX,SAAAF,YAAA,EAA4C;IAAA,IAAhCU,MAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA4B,CAAC;IAAAG,eAAA,OAAAd,WAAA;IATzCe,0BAAA,OAAAd,WAAA;IACAc,0BAAA,OAAAZ,cAAA;IACAY,0BAAA,OAAAX,eAAA;IACAW,0BAAA,OAAAV,cAAA;IACAU,0BAAA,OAAAT,iBAAA;IACAS,0BAAA,OAAAR,WAAA;IACAQ,0BAAA,OAAAP,iBAAA;IACAO,0BAAA,OAAAN,kBAAA;IAGEO,qBAAA,CAAKf,WAAA,EAAL,MAAmBS,MAAA,CAAOO,UAAA,IAAc,IAAIvB,UAAA,CAAW,CAAlD;IACLsB,qBAAA,CAAKb,cAAA,EAAL,MAAsBO,MAAA,CAAOQ,aAAA,IAAiB,IAAIvB,aAAA,CAAc,CAA3D;IACLqB,qBAAA,CAAKZ,eAAA,EAAL,MAAuBM,MAAA,CAAOS,cAAA,IAAkB,CAAC,CAA5C;IACLH,qBAAA,CAAKX,cAAA,EAAL,MAAsB,mBAAIe,GAAA,CAAI,CAAzB;IACLJ,qBAAA,CAAKV,iBAAA,EAAL,MAAyB,mBAAIc,GAAA,CAAI,CAA5B;IACLJ,qBAAA,CAAKT,WAAA,EAAL,MAAmB,CAAd;EACP;EAAA,OAAAc,YAAA,CAAArB,WAAA;IAAAsB,GAAA;IAAAC,KAAA,EAEA,SAAAC,MAAA,EAAc;MAAA,IAAAC,gBAAA;QAAAC,iBAAA;QAAAC,KAAA;MACZX,qBAAA,CAAKT,WAAA,EAAL,OAAAkB,gBAAA,GAAAG,qBAAA,CAAKrB,WAAA,EAAL,IAAK,GAAAmB,iBAAA,GAAAD,gBAAA,IAAAA,gBAAA,IAAAC,iBAAA;MACL,IAAIE,qBAAA,CAAKrB,WAAA,EAAL,IAAK,MAAgB,GAAG;MAE5BS,qBAAA,CAAKR,iBAAA,EAAL,MAAyBZ,YAAA,CAAaiC,SAAA;QAAA,IAAAC,IAAA,GAAAC,iBAAA,cAAAC,YAAA,GAAAC,CAAA,CAAU,SAAAC,QAAOC,OAAA;UAAA,OAAAH,YAAA,GAAAI,CAAA,WAAAC,QAAA;YAAA,kBAAAA,QAAA,CAAAC,CAAA;cAAA;gBAAA,KACjDH,OAAA;kBAAAE,QAAA,CAAAC,CAAA;kBAAA;gBAAA;gBAAAD,QAAA,CAAAC,CAAA;gBAAA,OACIX,KAAA,CAAKY,qBAAA,CAAsB;cAAA;gBACjCX,qBAAA,CAAK3B,WAAA,EAAL0B,KAAK,EAAYa,OAAA,CAAQ;cAAA;gBAAA,OAAAH,QAAA,CAAAI,CAAA;YAAA;UAAA,GAAAP,OAAA;QAAA,CAE5B;QAAA,iBAAAQ,EAAA;UAAA,OAAAZ,IAAA,CAAAa,KAAA,OAAAhC,SAAA;QAAA;MAAA,IALI;MAMLK,qBAAA,CAAKP,kBAAA,EAAL,MAA0BZ,aAAA,CAAcgC,SAAA;QAAA,IAAAe,KAAA,GAAAb,iBAAA,cAAAC,YAAA,GAAAC,CAAA,CAAU,SAAAY,SAAOC,MAAA;UAAA,OAAAd,YAAA,GAAAI,CAAA,WAAAW,SAAA;YAAA,kBAAAA,SAAA,CAAAT,CAAA;cAAA;gBAAA,KACnDQ,MAAA;kBAAAC,SAAA,CAAAT,CAAA;kBAAA;gBAAA;gBAAAS,SAAA,CAAAT,CAAA;gBAAA,OACIX,KAAA,CAAKY,qBAAA,CAAsB;cAAA;gBACjCX,qBAAA,CAAK3B,WAAA,EAAL0B,KAAK,EAAYqB,QAAA,CAAS;cAAA;gBAAA,OAAAD,SAAA,CAAAN,CAAA;YAAA;UAAA,GAAAI,QAAA;QAAA,CAE7B;QAAA,iBAAAI,GAAA;UAAA,OAAAL,KAAA,CAAAD,KAAA,OAAAhC,SAAA;QAAA;MAAA,IALI;IAMP;EAAA;IAAAW,GAAA;IAAAC,KAAA,EAEA,SAAA2B,QAAA,EAAgB;MAAA,IAAAC,iBAAA,EAAAC,iBAAA,EAAAC,sBAAA,EAAAC,sBAAA;MACdtC,qBAAA,CAAKT,WAAA,EAAL,OAAA4C,iBAAA,GAAAvB,qBAAA,CAAKrB,WAAA,EAAL,IAAK,GAAA6C,iBAAA,GAAAD,iBAAA,IAAAA,iBAAA,IAAAC,iBAAA;MACL,IAAIxB,qBAAA,CAAKrB,WAAA,EAAL,IAAK,MAAgB,GAAG;MAE5B,CAAA8C,sBAAA,GAAAzB,qBAAA,CAAKpB,iBAAA,EAAL,IAAK,eAAA6C,sBAAA,eAAAA,sBAAA,CAAAE,IAAA,CAAL;MACAvC,qBAAA,CAAKR,iBAAA,EAAL,MAAyB,MAApB;MAEL,CAAA8C,sBAAA,GAAA1B,qBAAA,CAAKnB,kBAAA,EAAL,IAAK,eAAA6C,sBAAA,eAAAA,sBAAA,CAAAC,IAAA,CAAL;MACAvC,qBAAA,CAAKP,kBAAA,EAAL,MAA0B,MAArB;IACP;EAAA;IAAAa,GAAA;IAAAC,KAAA,EAEA,SAAAiC,WACEC,OAAA,EACQ;MACR,OAAO7B,qBAAA,CAAK3B,WAAA,EAAL,IAAK,EAAYyD,OAAA,CAAAC,aAAA,CAAAA,aAAA,KAAaF,OAAA;QAASG,WAAA,EAAa;MAAA,EAAY,EACpEhD,MAAA;IACL;EAAA;IAAAU,GAAA;IAAAC,KAAA,EAEA,SAAAsC,WAEEJ,OAAA,EAAoC;MACpC,OAAO7B,qBAAA,CAAKzB,cAAA,EAAL,IAAK,EAAeuD,OAAA,CAAAC,aAAA,CAAAA,aAAA,KAAaF,OAAA;QAASK,MAAA,EAAQ;MAAA,EAAW,EAAElD,MAAA;IACxE;IAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;EAAA;IAAAU,GAAA;IAAAC,KAAA,EASA,SAAAwC,aAIEC,QAAA,EAA6D;MAAA,IAAAC,sBAAA;MAC7D,IAAMC,OAAA,GAAU,KAAKC,mBAAA,CAAoB;QAAEH,QAAA,EAAAA;MAAS,CAAC;MAErD,QAAAC,sBAAA,GAAOrC,qBAAA,CAAK3B,WAAA,EAAL,IAAK,EAAYmE,GAAA,CAA0BF,OAAA,CAAQG,SAAS,eAAAJ,sBAAA,uBAA5DA,sBAAA,CAA+DK,KAAA,CACnEC,IAAA;IACL;EAAA;IAAAjD,GAAA;IAAAC,KAAA,EAEA,SAAAiD,gBAMEN,OAAA,EACgB;MAChB,IAAMO,gBAAA,GAAmB,KAAKN,mBAAA,CAAoBD,OAAO;MACzD,IAAMQ,KAAA,GAAQ9C,qBAAA,CAAK3B,WAAA,EAAL,IAAK,EAAY0E,KAAA,CAAM,MAAMF,gBAAgB;MAC3D,IAAMG,UAAA,GAAaF,KAAA,CAAMJ,KAAA,CAAMC,IAAA;MAE/B,IAAIK,UAAA,KAAe,QAAW;QAC5B,OAAO,KAAKC,UAAA,CAAWX,OAAO;MAChC;MAEA,IACEA,OAAA,CAAQY,iBAAA,IACRJ,KAAA,CAAMK,aAAA,CAAcvF,gBAAA,CAAiBiF,gBAAA,CAAiBO,SAAA,EAAWN,KAAK,CAAC,GACvE;QACA,KAAK,KAAKO,aAAA,CAAcR,gBAAgB;MAC1C;MAEA,OAAOS,OAAA,CAAQC,OAAA,CAAQP,UAAU;IACnC;EAAA;IAAAtD,GAAA;IAAAC,KAAA,EAEA,SAAA6D,eAGE3B,OAAA,EAAqE;MACrE,OAAO7B,qBAAA,CAAK3B,WAAA,EAAL,IAAK,EAAYyD,OAAA,CAAQD,OAAO,EAAE4B,GAAA,CAAI,UAAAC,KAAA,EAAyB;QAAA,IAAtBtB,QAAA,GAAAsB,KAAA,CAAAtB,QAAA;UAAUM,KAAA,GAAAgB,KAAA,CAAAhB,KAAA;QACxD,IAAMC,IAAA,GAAOD,KAAA,CAAMC,IAAA;QACnB,OAAO,CAACP,QAAA,EAAUO,IAAI;MACxB,CAAC;IACH;EAAA;IAAAjD,GAAA;IAAAC,KAAA,EAEA,SAAAgE,aAKEvB,QAAA,EACAwB,OAAA,EAIAtB,OAAA,EAC2C;MAC3C,IAAMO,gBAAA,GAAmB,KAAKN,mBAAA,CAM5B;QAAEH,QAAA,EAAAA;MAAS,CAAC;MAEd,IAAMU,KAAA,GAAQ9C,qBAAA,CAAK3B,WAAA,EAAL,IAAK,EAAYmE,GAAA,CAC7BK,gBAAA,CAAiBJ,SACnB;MACA,IAAMoB,QAAA,GAAWf,KAAA,aAAAA,KAAA,uBAAAA,KAAA,CAAOJ,KAAA,CAAMC,IAAA;MAC9B,IAAMA,IAAA,GAAOpF,gBAAA,CAAiBqG,OAAA,EAASC,QAAQ;MAE/C,IAAIlB,IAAA,KAAS,QAAW;QACtB,OAAO;MACT;MAEA,OAAO3C,qBAAA,CAAK3B,WAAA,EAAL,IAAK,EACT0E,KAAA,CAAM,MAAMF,gBAAgB,EAC5BiB,OAAA,CAAQnB,IAAA,EAAAZ,aAAA,CAAAA,aAAA,KAAWO,OAAA;QAASyB,MAAA,EAAQ;MAAA,EAAM;IAC/C;EAAA;IAAArE,GAAA;IAAAC,KAAA,EAEA,SAAAqE,eAIEnC,OAAA,EACA+B,OAAA,EAIAtB,OAAA,EAC6C;MAAA,IAAA2B,MAAA;MAC7C,OAAO/F,aAAA,CAAcgG,KAAA,CAAM;QAAA,OACzBlE,qBAAA,CAAK3B,WAAA,EAAL4F,MAAK,EACFnC,OAAA,CAAQD,OAAO,EACf4B,GAAA,CAAI,UAAAU,KAAA;UAAA,IAAG/B,QAAA,GAAA+B,KAAA,CAAA/B,QAAA;UAAA,OAAe,CACrBA,QAAA,EACA6B,MAAA,CAAKN,YAAA,CAA2BvB,QAAA,EAAUwB,OAAA,EAAStB,OAAO,EAC3D;QAAA;MAAA,CACL;IACF;EAAA;IAAA5C,GAAA;IAAAC,KAAA,EAEA,SAAAyE,cAOEhC,QAAA,EAC8D;MAAA,IAAAiC,sBAAA;MAC9D,IAAM/B,OAAA,GAAU,KAAKC,mBAAA,CAAoB;QAAEH,QAAA,EAAAA;MAAS,CAAC;MACrD,QAAAiC,sBAAA,GAAOrE,qBAAA,CAAK3B,WAAA,EAAL,IAAK,EAAYmE,GAAA,CACtBF,OAAA,CAAQG,SACV,eAAA4B,sBAAA,uBAFOA,sBAAA,CAEJ3B,KAAA;IACL;EAAA;IAAAhD,GAAA;IAAAC,KAAA,EAEA,SAAA2E,cACEzC,OAAA,EACM;MACN,IAAMxC,UAAA,GAAaW,qBAAA,CAAK3B,WAAA,EAAL,IAAK;MACxBH,aAAA,CAAcgG,KAAA,CAAM,YAAM;QACxB7E,UAAA,CAAWyC,OAAA,CAAQD,OAAO,EAAE0C,OAAA,CAAQ,UAACzB,KAAA,EAAU;UAC7CzD,UAAA,CAAWmF,MAAA,CAAO1B,KAAK;QACzB,CAAC;MACH,CAAC;IACH;EAAA;IAAApD,GAAA;IAAAC,KAAA,EAEA,SAAA8E,aACE5C,OAAA,EACAS,OAAA,EACe;MAAA,IAAAoC,MAAA;MACf,IAAMrF,UAAA,GAAaW,qBAAA,CAAK3B,WAAA,EAAL,IAAK;MAExB,OAAOH,aAAA,CAAcgG,KAAA,CAAM,YAAM;QAC/B7E,UAAA,CAAWyC,OAAA,CAAQD,OAAO,EAAE0C,OAAA,CAAQ,UAACzB,KAAA,EAAU;UAC7CA,KAAA,CAAM6B,KAAA,CAAM;QACd,CAAC;QACD,OAAOD,MAAA,CAAKE,cAAA,CAAA7C,aAAA;UAER8C,IAAA,EAAM;QAAA,GACHhD,OAAA,GAELS,OACF;MACF,CAAC;IACH;EAAA;IAAA5C,GAAA;IAAAC,KAAA,EAEA,SAAAmF,cACEjD,OAAA,EAEe;MAAA,IAAAkD,MAAA;MAAA,IADfC,aAAA,GAAAjG,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA+B,CAAC;MAEhC,IAAMkG,sBAAA,GAAAlD,aAAA;QAA2BmD,MAAA,EAAQ;MAAA,GAASF,aAAA,CAAc;MAEhE,IAAMG,QAAA,GAAWjH,aAAA,CAAcgG,KAAA,CAAM;QAAA,OACnClE,qBAAA,CAAK3B,WAAA,EAAL0G,MAAK,EACFjD,OAAA,CAAQD,OAAO,EACf4B,GAAA,CAAI,UAACX,KAAA;UAAA,OAAUA,KAAA,CAAMsC,MAAA,CAAOH,sBAAsB,CAAC;QAAA;MAAA,CACxD;MAEA,OAAO3B,OAAA,CAAQ+B,GAAA,CAAIF,QAAQ,EAAEG,IAAA,CAAK5H,IAAI,EAAE6H,KAAA,CAAM7H,IAAI;IACpD;EAAA;IAAAgC,GAAA;IAAAC,KAAA,EAEA,SAAA6F,kBACE3D,OAAA,EAEe;MAAA,IAAA4D,MAAA;MAAA,IADfnD,OAAA,GAAAvD,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA6B,CAAC;MAE9B,OAAOb,aAAA,CAAcgG,KAAA,CAAM,YAAM;QAAA,IAAAwB,KAAA,EAAAC,oBAAA;QAC/B3F,qBAAA,CAAK3B,WAAA,EAALoH,MAAK,EAAY3D,OAAA,CAAQD,OAAO,EAAE0C,OAAA,CAAQ,UAACzB,KAAA,EAAU;UACnDA,KAAA,CAAM8C,UAAA,CAAW;QACnB,CAAC;QAED,IAAI,CAAA/D,OAAA,aAAAA,OAAA,uBAAAA,OAAA,CAASgE,WAAA,MAAgB,QAAQ;UACnC,OAAOvC,OAAA,CAAQC,OAAA,CAAQ;QACzB;QACA,OAAOkC,MAAA,CAAKb,cAAA,CAAA7C,aAAA,CAAAA,aAAA,KAELF,OAAA;UACHgD,IAAA,GAAAa,KAAA,IAAAC,oBAAA,GAAM9D,OAAA,aAAAA,OAAA,uBAAAA,OAAA,CAASgE,WAAA,cAAAF,oBAAA,cAAAA,oBAAA,GAAe9D,OAAA,aAAAA,OAAA,uBAAAA,OAAA,CAASgD,IAAA,cAAAa,KAAA,cAAAA,KAAA,GAAQ;QAAA,IAEjDpD,OACF;MACF,CAAC;IACH;EAAA;IAAA5C,GAAA;IAAAC,KAAA,EAEA,SAAAiF,eACE/C,OAAA,EAEe;MAAA,IAAAiE,qBAAA;QAAAC,MAAA;MAAA,IADfzD,OAAA,GAAAvD,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAA0B,CAAC;MAE3B,IAAMiH,YAAA,GAAAjE,aAAA,CAAAA,aAAA,KACDO,OAAA;QACH2D,aAAA,GAAAH,qBAAA,GAAexD,OAAA,CAAQ2D,aAAA,cAAAH,qBAAA,cAAAA,qBAAA,GAAiB;MAAA,EAC1C;MACA,IAAMX,QAAA,GAAWjH,aAAA,CAAcgG,KAAA,CAAM;QAAA,OACnClE,qBAAA,CAAK3B,WAAA,EAAL0H,MAAK,EACFjE,OAAA,CAAQD,OAAO,EACfqE,MAAA,CAAO,UAACpD,KAAA;UAAA,OAAU,CAACA,KAAA,CAAMqD,UAAA,CAAW,KAAK,CAACrD,KAAA,CAAMsD,QAAA,CAAS,CAAC;QAAA,GAC1D3C,GAAA,CAAI,UAACX,KAAA,EAAU;UACd,IAAIuD,OAAA,GAAUvD,KAAA,CAAMwD,KAAA,CAAM,QAAWN,YAAY;UACjD,IAAI,CAACA,YAAA,CAAaO,YAAA,EAAc;YAC9BF,OAAA,GAAUA,OAAA,CAAQd,KAAA,CAAM7H,IAAI;UAC9B;UACA,OAAOoF,KAAA,CAAMJ,KAAA,CAAMV,WAAA,KAAgB,WAC/BsB,OAAA,CAAQC,OAAA,CAAQ,IAChB8C,OAAA;QACN,CAAC;MAAA,CACL;MAEA,OAAO/C,OAAA,CAAQ+B,GAAA,CAAIF,QAAQ,EAAEG,IAAA,CAAK5H,IAAI;IACxC;EAAA;IAAAgC,GAAA;IAAAC,KAAA,EAEA,SAAAsD,WAOEX,OAAA,EAOgB;MAChB,IAAMO,gBAAA,GAAmB,KAAKN,mBAAA,CAAoBD,OAAO;MAGzD,IAAIO,gBAAA,CAAiB2D,KAAA,KAAU,QAAW;QACxC3D,gBAAA,CAAiB2D,KAAA,GAAQ;MAC3B;MAEA,IAAM1D,KAAA,GAAQ9C,qBAAA,CAAK3B,WAAA,EAAL,IAAK,EAAY0E,KAAA,CAAM,MAAMF,gBAAgB;MAE3D,OAAOC,KAAA,CAAMK,aAAA,CACXvF,gBAAA,CAAiBiF,gBAAA,CAAiBO,SAAA,EAAWN,KAAK,CACpD,IACIA,KAAA,CAAMwD,KAAA,CAAMzD,gBAAgB,IAC5BS,OAAA,CAAQC,OAAA,CAAQT,KAAA,CAAMJ,KAAA,CAAMC,IAAa;IAC/C;EAAA;IAAAjD,GAAA;IAAAC,KAAA,EAEA,SAAA0D,cAMEf,OAAA,EACe;MACf,OAAO,KAAKW,UAAA,CAAWX,OAAO,EAAEgD,IAAA,CAAK5H,IAAI,EAAE6H,KAAA,CAAM7H,IAAI;IACvD;EAAA;IAAAgC,GAAA;IAAAC,KAAA,EAEA,SAAA8G,mBAOEnE,OAAA,EAO0C;MAC1CA,OAAA,CAAQoE,QAAA,GAAWvI,qBAAA,CAKjBmE,OAAA,CAAQqE,KAAK;MACf,OAAO,KAAK1D,UAAA,CAAWX,OAAc;IACvC;EAAA;IAAA5C,GAAA;IAAAC,KAAA,EAEA,SAAAiH,sBAOEtE,OAAA,EAOe;MACf,OAAO,KAAKmE,kBAAA,CAAmBnE,OAAO,EAAEgD,IAAA,CAAK5H,IAAI,EAAE6H,KAAA,CAAM7H,IAAI;IAC/D;EAAA;IAAAgC,GAAA;IAAAC,KAAA,EAEA,SAAAkH,wBAOEvE,OAAA,EAO0C;MAC1CA,OAAA,CAAQoE,QAAA,GAAWvI,qBAAA,CAKjBmE,OAAA,CAAQqE,KAAK;MAEf,OAAO,KAAK/D,eAAA,CAAgBN,OAAc;IAC5C;EAAA;IAAA5C,GAAA;IAAAC,KAAA,EAEA,SAAAgB,sBAAA,EAA0C;MACxC,IAAI1C,aAAA,CAAc6I,QAAA,CAAS,GAAG;QAC5B,OAAO9G,qBAAA,CAAKzB,cAAA,EAAL,IAAK,EAAeoC,qBAAA,CAAsB;MACnD;MACA,OAAO2C,OAAA,CAAQC,OAAA,CAAQ;IACzB;EAAA;IAAA7D,GAAA;IAAAC,KAAA,EAEA,SAAAoH,cAAA,EAA4B;MAC1B,OAAO/G,qBAAA,CAAK3B,WAAA,EAAL,IAAK;IACd;EAAA;IAAAqB,GAAA;IAAAC,KAAA,EAEA,SAAAqH,iBAAA,EAAkC;MAChC,OAAOhH,qBAAA,CAAKzB,cAAA,EAAL,IAAK;IACd;EAAA;IAAAmB,GAAA;IAAAC,KAAA,EAEA,SAAAsH,kBAAA,EAAoC;MAClC,OAAOjH,qBAAA,CAAKxB,eAAA,EAAL,IAAK;IACd;EAAA;IAAAkB,GAAA;IAAAC,KAAA,EAEA,SAAAuH,kBAAkB5E,OAAA,EAA+B;MAC/ClD,qBAAA,CAAKZ,eAAA,EAAL,MAAuB8D,OAAlB;IACP;EAAA;IAAA5C,GAAA;IAAAC,KAAA,EAEA,SAAAwH,iBAME/E,QAAA,EACAE,OAAA,EAMM;MACNtC,qBAAA,CAAKvB,cAAA,EAAL,IAAK,EAAe2I,GAAA,CAAI5J,OAAA,CAAQ4E,QAAQ,GAAG;QACzCA,QAAA,EAAAA,QAAA;QACA7C,cAAA,EAAgB+C;MAClB,CAAC;IACH;EAAA;IAAA5C,GAAA;IAAAC,KAAA,EAEA,SAAA0H,iBACEjF,QAAA,EACsE;MACtE,IAAMkF,QAAA,GAAAC,kBAAA,CAAevH,qBAAA,CAAKvB,cAAA,EAAL,IAAK,EAAe+I,MAAA,CAAO,CAAC;MAEjD,IAAMC,MAAA,GAGF,CAAC;MAELH,QAAA,CAAS/C,OAAA,CAAQ,UAACmD,YAAA,EAAiB;QACjC,IAAI/J,eAAA,CAAgByE,QAAA,EAAUsF,YAAA,CAAatF,QAAQ,GAAG;UACpDuF,MAAA,CAAOC,MAAA,CAAOH,MAAA,EAAQC,YAAA,CAAanI,cAAc;QACnD;MACF,CAAC;MACD,OAAOkI,MAAA;IACT;EAAA;IAAA/H,GAAA;IAAAC,KAAA,EAEA,SAAAkI,oBAMEC,WAAA,EACAxF,OAAA,EAIM;MACNtC,qBAAA,CAAKtB,iBAAA,EAAL,IAAK,EAAkB0I,GAAA,CAAI5J,OAAA,CAAQsK,WAAW,GAAG;QAC/CA,WAAA,EAAAA,WAAA;QACAvI,cAAA,EAAgB+C;MAClB,CAAC;IACH;EAAA;IAAA5C,GAAA;IAAAC,KAAA,EAEA,SAAAoI,oBACED,WAAA,EACuE;MACvE,IAAMR,QAAA,GAAAC,kBAAA,CAAevH,qBAAA,CAAKtB,iBAAA,EAAL,IAAK,EAAkB8I,MAAA,CAAO,CAAC;MAEpD,IAAMC,MAAA,GAGF,CAAC;MAELH,QAAA,CAAS/C,OAAA,CAAQ,UAACmD,YAAA,EAAiB;QACjC,IAAI/J,eAAA,CAAgBmK,WAAA,EAAaJ,YAAA,CAAaI,WAAW,GAAG;UAC1DH,MAAA,CAAOC,MAAA,CAAOH,MAAA,EAAQC,YAAA,CAAanI,cAAc;QACnD;MACF,CAAC;MAED,OAAOkI,MAAA;IACT;EAAA;IAAA/H,GAAA;IAAAC,KAAA,EAEA,SAAA4C,oBAQED,OAAA,EAsBA;MACA,IAAIA,OAAA,CAAQ0F,UAAA,EAAY;QACtB,OAAO1F,OAAA;MAOT;MAEA,IAAMO,gBAAA,GAAAd,aAAA,CAAAA,aAAA,CAAAA,aAAA,CAAAA,aAAA,KACD/B,qBAAA,CAAKxB,eAAA,EAAL,IAAK,EAAgByJ,OAAA,GACrB,KAAKZ,gBAAA,CAAiB/E,OAAA,CAAQF,QAAQ,IACtCE,OAAA;QACH0F,UAAA,EAAY;MAAA,EACd;MAEA,IAAI,CAACnF,gBAAA,CAAiBJ,SAAA,EAAW;QAC/BI,gBAAA,CAAiBJ,SAAA,GAAYhF,qBAAA,CAC3BoF,gBAAA,CAAiBT,QAAA,EACjBS,gBACF;MACF;MAGA,IAAIA,gBAAA,CAAiBqF,kBAAA,KAAuB,QAAW;QACrDrF,gBAAA,CAAiBqF,kBAAA,GACfrF,gBAAA,CAAiBsF,WAAA,KAAgB;MACrC;MACA,IAAItF,gBAAA,CAAiB0D,YAAA,KAAiB,QAAW;QAC/C1D,gBAAA,CAAiB0D,YAAA,GAAe,CAAC,CAAC1D,gBAAA,CAAiBuF,QAAA;MACrD;MAEA,IAAI,CAACvF,gBAAA,CAAiBsF,WAAA,IAAetF,gBAAA,CAAiBwF,SAAA,EAAW;QAC/DxF,gBAAA,CAAiBsF,WAAA,GAAc;MACjC;MAEA,IAAItF,gBAAA,CAAiByF,OAAA,KAAYzK,SAAA,EAAW;QAC1CgF,gBAAA,CAAiB0F,OAAA,GAAU;MAC7B;MAEA,OAAO1F,gBAAA;IAOT;EAAA;IAAAnD,GAAA;IAAAC,KAAA,EAEA,SAAA6I,uBACElG,OAAA,EACG;MACH,IAAIA,OAAA,aAAAA,OAAA,eAAAA,OAAA,CAAS0F,UAAA,EAAY;QACvB,OAAO1F,OAAA;MACT;MACA,OAAAP,aAAA,CAAAA,aAAA,CAAAA,aAAA,CAAAA,aAAA,KACK/B,qBAAA,CAAKxB,eAAA,EAAL,IAAK,EAAgBiK,SAAA,GACpB,CAAAnG,OAAA,aAAAA,OAAA,uBAAAA,OAAA,CAASwF,WAAA,KACX,KAAKC,mBAAA,CAAoBzF,OAAA,CAAQwF,WAAW,IAC3CxF,OAAA;QACH0F,UAAA,EAAY;MAAA;IAEhB;EAAA;IAAAtI,GAAA;IAAAC,KAAA,EAEA,SAAA+I,MAAA,EAAc;MACZ1I,qBAAA,CAAK3B,WAAA,EAAL,IAAK,EAAYqK,KAAA,CAAM;MACvB1I,qBAAA,CAAKzB,cAAA,EAAL,IAAK,EAAemK,KAAA,CAAM;IAC5B;EAAA;AAAA,IACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}