{"ast":null,"code":"import _objectSpread from \"C:/Users/als40/Desktop/HandsMarket/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _regenerator from \"C:/Users/als40/Desktop/HandsMarket/node_modules/@babel/runtime/helpers/esm/regenerator.js\";\nimport _asyncToGenerator from \"C:/Users/als40/Desktop/HandsMarket/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"C:/Users/als40/Desktop/HandsMarket/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/als40/Desktop/HandsMarket/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _callSuper from \"C:/Users/als40/Desktop/HandsMarket/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _inherits from \"C:/Users/als40/Desktop/HandsMarket/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _classPrivateMethodInitSpec from \"C:/Users/als40/Desktop/HandsMarket/node_modules/@babel/runtime/helpers/esm/classPrivateMethodInitSpec.js\";\nimport _classPrivateFieldInitSpec from \"C:/Users/als40/Desktop/HandsMarket/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _assertClassBrand from \"C:/Users/als40/Desktop/HandsMarket/node_modules/@babel/runtime/helpers/esm/assertClassBrand.js\";\nimport _classPrivateFieldGet from \"C:/Users/als40/Desktop/HandsMarket/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet2.js\";\nimport _classPrivateFieldSet from \"C:/Users/als40/Desktop/HandsMarket/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet2.js\";\nvar _observers, _mutationCache, _retryer, _Class_brand;\n// src/mutation.ts\nimport { notifyManager } from \"./notifyManager.js\";\nimport { Removable } from \"./removable.js\";\nimport { createRetryer } from \"./retryer.js\";\nvar Mutation = (_observers = /*#__PURE__*/new WeakMap(), _mutationCache = /*#__PURE__*/new WeakMap(), _retryer = /*#__PURE__*/new WeakMap(), _Class_brand = /*#__PURE__*/new WeakSet(), /*#__PURE__*/function (_Removable) {\n  function Mutation(config) {\n    var _this;\n    _classCallCheck(this, Mutation);\n    _this = _callSuper(this, Mutation);\n    _classPrivateMethodInitSpec(_this, _Class_brand);\n    _classPrivateFieldInitSpec(_this, _observers, void 0);\n    _classPrivateFieldInitSpec(_this, _mutationCache, void 0);\n    _classPrivateFieldInitSpec(_this, _retryer, void 0);\n    _this.mutationId = config.mutationId;\n    _classPrivateFieldSet(_mutationCache, _this, config.mutationCache);\n    _classPrivateFieldSet(_observers, _this, []);\n    _this.state = config.state || getDefaultState();\n    _this.setOptions(config.options);\n    _this.scheduleGc();\n    return _this;\n  }\n  _inherits(Mutation, _Removable);\n  return _createClass(Mutation, [{\n    key: \"setOptions\",\n    value: function setOptions(options) {\n      this.options = options;\n      this.updateGcTime(this.options.gcTime);\n    }\n  }, {\n    key: \"meta\",\n    get: function get() {\n      return this.options.meta;\n    }\n  }, {\n    key: \"addObserver\",\n    value: function addObserver(observer) {\n      if (!_classPrivateFieldGet(_observers, this).includes(observer)) {\n        _classPrivateFieldGet(_observers, this).push(observer);\n        this.clearGcTimeout();\n        _classPrivateFieldGet(_mutationCache, this).notify({\n          type: \"observerAdded\",\n          mutation: this,\n          observer: observer\n        });\n      }\n    }\n  }, {\n    key: \"removeObserver\",\n    value: function removeObserver(observer) {\n      _classPrivateFieldSet(_observers, this, _classPrivateFieldGet(_observers, this).filter(function (x) {\n        return x !== observer;\n      }));\n      this.scheduleGc();\n      _classPrivateFieldGet(_mutationCache, this).notify({\n        type: \"observerRemoved\",\n        mutation: this,\n        observer: observer\n      });\n    }\n  }, {\n    key: \"optionalRemove\",\n    value: function optionalRemove() {\n      if (!_classPrivateFieldGet(_observers, this).length) {\n        if (this.state.status === \"pending\") {\n          this.scheduleGc();\n        } else {\n          _classPrivateFieldGet(_mutationCache, this).remove(this);\n        }\n      }\n    }\n  }, {\n    key: \"continue\",\n    value: function _continue() {\n      var _classPrivateFieldGet2, _classPrivateFieldGet3;\n      return (_classPrivateFieldGet2 = (_classPrivateFieldGet3 = _classPrivateFieldGet(_retryer, this)) === null || _classPrivateFieldGet3 === void 0 ? void 0 : _classPrivateFieldGet3.continue()) !== null && _classPrivateFieldGet2 !== void 0 ? _classPrivateFieldGet2 :\n      // continuing a mutation assumes that variables are set, mutation must have been dehydrated before\n      this.execute(this.state.variables);\n    }\n  }, {\n    key: \"execute\",\n    value: function () {\n      var _execute = _asyncToGenerator(/*#__PURE__*/_regenerator().m(function _callee(variables) {\n        var _this2 = this,\n          _this$options$retry;\n        var onContinue, restored, isPaused, _classPrivateFieldGet6, _classPrivateFieldGet7, _this$options$onSucce, _this$options2, _classPrivateFieldGet8, _classPrivateFieldGet9, _this$options$onSettl, _this$options3, _classPrivateFieldGet4, _classPrivateFieldGet5, _this$options$onMutat, _this$options, context, data, _classPrivateFieldGet0, _classPrivateFieldGet1, _this$options$onError, _this$options4, _classPrivateFieldGet10, _classPrivateFieldGet11, _this$options$onSettl2, _this$options5, _t;\n        return _regenerator().w(function (_context) {\n          while (1) switch (_context.n) {\n            case 0:\n              onContinue = function onContinue() {\n                _assertClassBrand(_Class_brand, _this2, _dispatch).call(_this2, {\n                  type: \"continue\"\n                });\n              };\n              _classPrivateFieldSet(_retryer, this, createRetryer({\n                fn: function fn() {\n                  if (!_this2.options.mutationFn) {\n                    return Promise.reject(new Error(\"No mutationFn found\"));\n                  }\n                  return _this2.options.mutationFn(variables);\n                },\n                onFail: function onFail(failureCount, error) {\n                  _assertClassBrand(_Class_brand, _this2, _dispatch).call(_this2, {\n                    type: \"failed\",\n                    failureCount: failureCount,\n                    error: error\n                  });\n                },\n                onPause: function onPause() {\n                  _assertClassBrand(_Class_brand, _this2, _dispatch).call(_this2, {\n                    type: \"pause\"\n                  });\n                },\n                onContinue: onContinue,\n                retry: (_this$options$retry = this.options.retry) !== null && _this$options$retry !== void 0 ? _this$options$retry : 0,\n                retryDelay: this.options.retryDelay,\n                networkMode: this.options.networkMode,\n                canRun: function canRun() {\n                  return _classPrivateFieldGet(_mutationCache, _this2).canRun(_this2);\n                }\n              }));\n              restored = this.state.status === \"pending\";\n              isPaused = !_classPrivateFieldGet(_retryer, this).canStart();\n              _context.p = 1;\n              if (!restored) {\n                _context.n = 2;\n                break;\n              }\n              onContinue();\n              _context.n = 5;\n              break;\n            case 2:\n              _assertClassBrand(_Class_brand, this, _dispatch).call(this, {\n                type: \"pending\",\n                variables: variables,\n                isPaused: isPaused\n              });\n              _context.n = 3;\n              return (_classPrivateFieldGet4 = (_classPrivateFieldGet5 = _classPrivateFieldGet(_mutationCache, this).config).onMutate) === null || _classPrivateFieldGet4 === void 0 ? void 0 : _classPrivateFieldGet4.call(_classPrivateFieldGet5, variables, this);\n            case 3:\n              _context.n = 4;\n              return (_this$options$onMutat = (_this$options = this.options).onMutate) === null || _this$options$onMutat === void 0 ? void 0 : _this$options$onMutat.call(_this$options, variables);\n            case 4:\n              context = _context.v;\n              if (context !== this.state.context) {\n                _assertClassBrand(_Class_brand, this, _dispatch).call(this, {\n                  type: \"pending\",\n                  context: context,\n                  variables: variables,\n                  isPaused: isPaused\n                });\n              }\n            case 5:\n              _context.n = 6;\n              return _classPrivateFieldGet(_retryer, this).start();\n            case 6:\n              data = _context.v;\n              _context.n = 7;\n              return (_classPrivateFieldGet6 = (_classPrivateFieldGet7 = _classPrivateFieldGet(_mutationCache, this).config).onSuccess) === null || _classPrivateFieldGet6 === void 0 ? void 0 : _classPrivateFieldGet6.call(_classPrivateFieldGet7, data, variables, this.state.context, this);\n            case 7:\n              _context.n = 8;\n              return (_this$options$onSucce = (_this$options2 = this.options).onSuccess) === null || _this$options$onSucce === void 0 ? void 0 : _this$options$onSucce.call(_this$options2, data, variables, this.state.context);\n            case 8:\n              _context.n = 9;\n              return (_classPrivateFieldGet8 = (_classPrivateFieldGet9 = _classPrivateFieldGet(_mutationCache, this).config).onSettled) === null || _classPrivateFieldGet8 === void 0 ? void 0 : _classPrivateFieldGet8.call(_classPrivateFieldGet9, data, null, this.state.variables, this.state.context, this);\n            case 9:\n              _context.n = 10;\n              return (_this$options$onSettl = (_this$options3 = this.options).onSettled) === null || _this$options$onSettl === void 0 ? void 0 : _this$options$onSettl.call(_this$options3, data, null, variables, this.state.context);\n            case 10:\n              _assertClassBrand(_Class_brand, this, _dispatch).call(this, {\n                type: \"success\",\n                data: data\n              });\n              return _context.a(2, data);\n            case 11:\n              _context.p = 11;\n              _t = _context.v;\n              _context.p = 12;\n              _context.n = 13;\n              return (_classPrivateFieldGet0 = (_classPrivateFieldGet1 = _classPrivateFieldGet(_mutationCache, this).config).onError) === null || _classPrivateFieldGet0 === void 0 ? void 0 : _classPrivateFieldGet0.call(_classPrivateFieldGet1, _t, variables, this.state.context, this);\n            case 13:\n              _context.n = 14;\n              return (_this$options$onError = (_this$options4 = this.options).onError) === null || _this$options$onError === void 0 ? void 0 : _this$options$onError.call(_this$options4, _t, variables, this.state.context);\n            case 14:\n              _context.n = 15;\n              return (_classPrivateFieldGet10 = (_classPrivateFieldGet11 = _classPrivateFieldGet(_mutationCache, this).config).onSettled) === null || _classPrivateFieldGet10 === void 0 ? void 0 : _classPrivateFieldGet10.call(_classPrivateFieldGet11, void 0, _t, this.state.variables, this.state.context, this);\n            case 15:\n              _context.n = 16;\n              return (_this$options$onSettl2 = (_this$options5 = this.options).onSettled) === null || _this$options$onSettl2 === void 0 ? void 0 : _this$options$onSettl2.call(_this$options5, void 0, _t, variables, this.state.context);\n            case 16:\n              throw _t;\n            case 17:\n              _context.p = 17;\n              _assertClassBrand(_Class_brand, this, _dispatch).call(this, {\n                type: \"error\",\n                error: _t\n              });\n              return _context.f(17);\n            case 18:\n              _context.p = 18;\n              _classPrivateFieldGet(_mutationCache, this).runNext(this);\n              return _context.f(18);\n            case 19:\n              return _context.a(2);\n          }\n        }, _callee, this, [[12,, 17, 18], [1, 11, 18, 19]]);\n      }));\n      function execute(_x) {\n        return _execute.apply(this, arguments);\n      }\n      return execute;\n    }()\n  }]);\n}(Removable));\nfunction _dispatch(action) {\n  var _this3 = this;\n  var reducer = function reducer(state) {\n    switch (action.type) {\n      case \"failed\":\n        return _objectSpread(_objectSpread({}, state), {}, {\n          failureCount: action.failureCount,\n          failureReason: action.error\n        });\n      case \"pause\":\n        return _objectSpread(_objectSpread({}, state), {}, {\n          isPaused: true\n        });\n      case \"continue\":\n        return _objectSpread(_objectSpread({}, state), {}, {\n          isPaused: false\n        });\n      case \"pending\":\n        return _objectSpread(_objectSpread({}, state), {}, {\n          context: action.context,\n          data: void 0,\n          failureCount: 0,\n          failureReason: null,\n          error: null,\n          isPaused: action.isPaused,\n          status: \"pending\",\n          variables: action.variables,\n          submittedAt: Date.now()\n        });\n      case \"success\":\n        return _objectSpread(_objectSpread({}, state), {}, {\n          data: action.data,\n          failureCount: 0,\n          failureReason: null,\n          error: null,\n          status: \"success\",\n          isPaused: false\n        });\n      case \"error\":\n        return _objectSpread(_objectSpread({}, state), {}, {\n          data: void 0,\n          error: action.error,\n          failureCount: state.failureCount + 1,\n          failureReason: action.error,\n          isPaused: false,\n          status: \"error\"\n        });\n    }\n  };\n  this.state = reducer(this.state);\n  notifyManager.batch(function () {\n    _classPrivateFieldGet(_observers, _this3).forEach(function (observer) {\n      observer.onMutationUpdate(action);\n    });\n    _classPrivateFieldGet(_mutationCache, _this3).notify({\n      mutation: _this3,\n      type: \"updated\",\n      action: action\n    });\n  });\n}\nfunction getDefaultState() {\n  return {\n    context: void 0,\n    data: void 0,\n    error: null,\n    failureCount: 0,\n    failureReason: null,\n    isPaused: false,\n    status: \"idle\",\n    variables: void 0,\n    submittedAt: 0\n  };\n}\nexport { Mutation, getDefaultState };","map":{"version":3,"names":["notifyManager","Removable","createRetryer","Mutation","_observers","WeakMap","_mutationCache","_retryer","_Class_brand","WeakSet","_Removable","config","_this","_classCallCheck","_callSuper","_classPrivateMethodInitSpec","_classPrivateFieldInitSpec","mutationId","_classPrivateFieldSet","mutationCache","state","getDefaultState","setOptions","options","scheduleGc","_inherits","_createClass","key","value","updateGcTime","gcTime","get","meta","addObserver","observer","_classPrivateFieldGet","includes","push","clearGcTimeout","notify","type","mutation","removeObserver","filter","x","optionalRemove","length","status","remove","continue","_classPrivateFieldGet2","_classPrivateFieldGet3","execute","variables","_execute","_asyncToGenerator","_regenerator","m","_callee","_this2","_this$options$retry","onContinue","restored","isPaused","_classPrivateFieldGet6","_classPrivateFieldGet7","_this$options$onSucce","_this$options2","_classPrivateFieldGet8","_classPrivateFieldGet9","_this$options$onSettl","_this$options3","_classPrivateFieldGet4","_classPrivateFieldGet5","_this$options$onMutat","_this$options","context","data","_classPrivateFieldGet0","_classPrivateFieldGet1","_this$options$onError","_this$options4","_classPrivateFieldGet10","_classPrivateFieldGet11","_this$options$onSettl2","_this$options5","_t","w","_context","n","_assertClassBrand","_dispatch","call","fn","mutationFn","Promise","reject","Error","onFail","failureCount","error","onPause","retry","retryDelay","networkMode","canRun","canStart","p","onMutate","v","start","onSuccess","onSettled","a","onError","f","runNext","_x","apply","arguments","action","_this3","reducer","_objectSpread","failureReason","submittedAt","Date","now","batch","forEach","onMutationUpdate"],"sources":["C:\\Users\\als40\\Desktop\\HandsMarket\\node_modules\\@tanstack\\query-core\\src\\mutation.ts"],"sourcesContent":["import { notifyManager } from './notifyManager'\nimport { Removable } from './removable'\nimport { createRetryer } from './retryer'\nimport type {\n  DefaultError,\n  MutationMeta,\n  MutationOptions,\n  MutationStatus,\n} from './types'\nimport type { MutationCache } from './mutationCache'\nimport type { MutationObserver } from './mutationObserver'\nimport type { Retryer } from './retryer'\n\n// TYPES\n\ninterface MutationConfig<TData, TError, TVariables, TContext> {\n  mutationId: number\n  mutationCache: MutationCache\n  options: MutationOptions<TData, TError, TVariables, TContext>\n  state?: MutationState<TData, TError, TVariables, TContext>\n}\n\nexport interface MutationState<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = unknown,\n  TContext = unknown,\n> {\n  context: TContext | undefined\n  data: TData | undefined\n  error: TError | null\n  failureCount: number\n  failureReason: TError | null\n  isPaused: boolean\n  status: MutationStatus\n  variables: TVariables | undefined\n  submittedAt: number\n}\n\ninterface FailedAction<TError> {\n  type: 'failed'\n  failureCount: number\n  error: TError | null\n}\n\ninterface PendingAction<TVariables, TContext> {\n  type: 'pending'\n  isPaused: boolean\n  variables?: TVariables\n  context?: TContext\n}\n\ninterface SuccessAction<TData> {\n  type: 'success'\n  data: TData\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\nexport type Action<TData, TError, TVariables, TContext> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction<TError>\n  | PendingAction<TVariables, TContext>\n  | PauseAction\n  | SuccessAction<TData>\n\n// CLASS\n\nexport class Mutation<\n  TData = unknown,\n  TError = DefaultError,\n  TVariables = unknown,\n  TContext = unknown,\n> extends Removable {\n  state: MutationState<TData, TError, TVariables, TContext>\n  options!: MutationOptions<TData, TError, TVariables, TContext>\n  readonly mutationId: number\n\n  #observers: Array<MutationObserver<TData, TError, TVariables, TContext>>\n  #mutationCache: MutationCache\n  #retryer?: Retryer<TData>\n\n  constructor(config: MutationConfig<TData, TError, TVariables, TContext>) {\n    super()\n\n    this.mutationId = config.mutationId\n    this.#mutationCache = config.mutationCache\n    this.#observers = []\n    this.state = config.state || getDefaultState()\n\n    this.setOptions(config.options)\n    this.scheduleGc()\n  }\n\n  setOptions(\n    options: MutationOptions<TData, TError, TVariables, TContext>,\n  ): void {\n    this.options = options\n\n    this.updateGcTime(this.options.gcTime)\n  }\n\n  get meta(): MutationMeta | undefined {\n    return this.options.meta\n  }\n\n  addObserver(observer: MutationObserver<any, any, any, any>): void {\n    if (!this.#observers.includes(observer)) {\n      this.#observers.push(observer)\n\n      // Stop the mutation from being garbage collected\n      this.clearGcTimeout()\n\n      this.#mutationCache.notify({\n        type: 'observerAdded',\n        mutation: this,\n        observer,\n      })\n    }\n  }\n\n  removeObserver(observer: MutationObserver<any, any, any, any>): void {\n    this.#observers = this.#observers.filter((x) => x !== observer)\n\n    this.scheduleGc()\n\n    this.#mutationCache.notify({\n      type: 'observerRemoved',\n      mutation: this,\n      observer,\n    })\n  }\n\n  protected optionalRemove() {\n    if (!this.#observers.length) {\n      if (this.state.status === 'pending') {\n        this.scheduleGc()\n      } else {\n        this.#mutationCache.remove(this)\n      }\n    }\n  }\n\n  continue(): Promise<unknown> {\n    return (\n      this.#retryer?.continue() ??\n      // continuing a mutation assumes that variables are set, mutation must have been dehydrated before\n      this.execute(this.state.variables!)\n    )\n  }\n\n  async execute(variables: TVariables): Promise<TData> {\n    const onContinue = () => {\n      this.#dispatch({ type: 'continue' })\n    }\n\n    this.#retryer = createRetryer({\n      fn: () => {\n        if (!this.options.mutationFn) {\n          return Promise.reject(new Error('No mutationFn found'))\n        }\n        return this.options.mutationFn(variables)\n      },\n      onFail: (failureCount, error) => {\n        this.#dispatch({ type: 'failed', failureCount, error })\n      },\n      onPause: () => {\n        this.#dispatch({ type: 'pause' })\n      },\n      onContinue,\n      retry: this.options.retry ?? 0,\n      retryDelay: this.options.retryDelay,\n      networkMode: this.options.networkMode,\n      canRun: () => this.#mutationCache.canRun(this),\n    })\n\n    const restored = this.state.status === 'pending'\n    const isPaused = !this.#retryer.canStart()\n\n    try {\n      if (restored) {\n        // Dispatch continue action to unpause restored mutation\n        onContinue()\n      } else {\n        this.#dispatch({ type: 'pending', variables, isPaused })\n        // Notify cache callback\n        await this.#mutationCache.config.onMutate?.(\n          variables,\n          this as Mutation<unknown, unknown, unknown, unknown>,\n        )\n        const context = await this.options.onMutate?.(variables)\n        if (context !== this.state.context) {\n          this.#dispatch({\n            type: 'pending',\n            context,\n            variables,\n            isPaused,\n          })\n        }\n      }\n      const data = await this.#retryer.start()\n\n      // Notify cache callback\n      await this.#mutationCache.config.onSuccess?.(\n        data,\n        variables,\n        this.state.context,\n        this as Mutation<unknown, unknown, unknown, unknown>,\n      )\n\n      await this.options.onSuccess?.(data, variables, this.state.context!)\n\n      // Notify cache callback\n      await this.#mutationCache.config.onSettled?.(\n        data,\n        null,\n        this.state.variables,\n        this.state.context,\n        this as Mutation<unknown, unknown, unknown, unknown>,\n      )\n\n      await this.options.onSettled?.(data, null, variables, this.state.context)\n\n      this.#dispatch({ type: 'success', data })\n      return data\n    } catch (error) {\n      try {\n        // Notify cache callback\n        await this.#mutationCache.config.onError?.(\n          error as any,\n          variables,\n          this.state.context,\n          this as Mutation<unknown, unknown, unknown, unknown>,\n        )\n\n        await this.options.onError?.(\n          error as TError,\n          variables,\n          this.state.context,\n        )\n\n        // Notify cache callback\n        await this.#mutationCache.config.onSettled?.(\n          undefined,\n          error as any,\n          this.state.variables,\n          this.state.context,\n          this as Mutation<unknown, unknown, unknown, unknown>,\n        )\n\n        await this.options.onSettled?.(\n          undefined,\n          error as TError,\n          variables,\n          this.state.context,\n        )\n        throw error\n      } finally {\n        this.#dispatch({ type: 'error', error: error as TError })\n      }\n    } finally {\n      this.#mutationCache.runNext(this)\n    }\n  }\n\n  #dispatch(action: Action<TData, TError, TVariables, TContext>): void {\n    const reducer = (\n      state: MutationState<TData, TError, TVariables, TContext>,\n    ): MutationState<TData, TError, TVariables, TContext> => {\n      switch (action.type) {\n        case 'failed':\n          return {\n            ...state,\n            failureCount: action.failureCount,\n            failureReason: action.error,\n          }\n        case 'pause':\n          return {\n            ...state,\n            isPaused: true,\n          }\n        case 'continue':\n          return {\n            ...state,\n            isPaused: false,\n          }\n        case 'pending':\n          return {\n            ...state,\n            context: action.context,\n            data: undefined,\n            failureCount: 0,\n            failureReason: null,\n            error: null,\n            isPaused: action.isPaused,\n            status: 'pending',\n            variables: action.variables,\n            submittedAt: Date.now(),\n          }\n        case 'success':\n          return {\n            ...state,\n            data: action.data,\n            failureCount: 0,\n            failureReason: null,\n            error: null,\n            status: 'success',\n            isPaused: false,\n          }\n        case 'error':\n          return {\n            ...state,\n            data: undefined,\n            error: action.error,\n            failureCount: state.failureCount + 1,\n            failureReason: action.error,\n            isPaused: false,\n            status: 'error',\n          }\n      }\n    }\n    this.state = reducer(this.state)\n\n    notifyManager.batch(() => {\n      this.#observers.forEach((observer) => {\n        observer.onMutationUpdate(action)\n      })\n      this.#mutationCache.notify({\n        mutation: this,\n        type: 'updated',\n        action,\n      })\n    })\n  }\n}\n\nexport function getDefaultState<\n  TData,\n  TError,\n  TVariables,\n  TContext,\n>(): MutationState<TData, TError, TVariables, TContext> {\n  return {\n    context: undefined,\n    data: undefined,\n    error: null,\n    failureCount: 0,\n    failureReason: null,\n    isPaused: false,\n    status: 'idle',\n    variables: undefined,\n    submittedAt: 0,\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}