{"ast":null,"code":"import _objectSpread from \"C:/Users/als40/Desktop/HandsMarket/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectDestructuringEmpty from \"C:/Users/als40/Desktop/HandsMarket/node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js\";\nimport _classCallCheck from \"C:/Users/als40/Desktop/HandsMarket/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/als40/Desktop/HandsMarket/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _callSuper from \"C:/Users/als40/Desktop/HandsMarket/node_modules/@babel/runtime/helpers/esm/callSuper.js\";\nimport _inherits from \"C:/Users/als40/Desktop/HandsMarket/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _classPrivateMethodInitSpec from \"C:/Users/als40/Desktop/HandsMarket/node_modules/@babel/runtime/helpers/esm/classPrivateMethodInitSpec.js\";\nimport _classPrivateFieldInitSpec from \"C:/Users/als40/Desktop/HandsMarket/node_modules/@babel/runtime/helpers/esm/classPrivateFieldInitSpec.js\";\nimport _assertClassBrand from \"C:/Users/als40/Desktop/HandsMarket/node_modules/@babel/runtime/helpers/esm/assertClassBrand.js\";\nimport _classPrivateFieldGet from \"C:/Users/als40/Desktop/HandsMarket/node_modules/@babel/runtime/helpers/esm/classPrivateFieldGet2.js\";\nimport _classPrivateFieldSet from \"C:/Users/als40/Desktop/HandsMarket/node_modules/@babel/runtime/helpers/esm/classPrivateFieldSet2.js\";\nvar _client, _currentQuery, _currentQueryInitialState, _currentResult, _currentResultState, _currentResultOptions, _currentThenable, _selectError, _selectFn, _selectResult, _lastQueryWithDefinedData, _staleTimeoutId, _refetchIntervalId, _currentRefetchInterval, _trackedProps, _Class_brand;\n// src/queryObserver.ts\nimport { focusManager } from \"./focusManager.js\";\nimport { notifyManager } from \"./notifyManager.js\";\nimport { fetchState } from \"./query.js\";\nimport { Subscribable } from \"./subscribable.js\";\nimport { pendingThenable } from \"./thenable.js\";\nimport { isServer, isValidTimeout, noop, replaceData, resolveEnabled, resolveStaleTime, shallowEqualObjects, timeUntilStale } from \"./utils.js\";\nvar QueryObserver = (_client = /*#__PURE__*/new WeakMap(), _currentQuery = /*#__PURE__*/new WeakMap(), _currentQueryInitialState = /*#__PURE__*/new WeakMap(), _currentResult = /*#__PURE__*/new WeakMap(), _currentResultState = /*#__PURE__*/new WeakMap(), _currentResultOptions = /*#__PURE__*/new WeakMap(), _currentThenable = /*#__PURE__*/new WeakMap(), _selectError = /*#__PURE__*/new WeakMap(), _selectFn = /*#__PURE__*/new WeakMap(), _selectResult = /*#__PURE__*/new WeakMap(), _lastQueryWithDefinedData = /*#__PURE__*/new WeakMap(), _staleTimeoutId = /*#__PURE__*/new WeakMap(), _refetchIntervalId = /*#__PURE__*/new WeakMap(), _currentRefetchInterval = /*#__PURE__*/new WeakMap(), _trackedProps = /*#__PURE__*/new WeakMap(), _Class_brand = /*#__PURE__*/new WeakSet(), /*#__PURE__*/function (_Subscribable) {\n  function QueryObserver(client, options) {\n    var _this;\n    _classCallCheck(this, QueryObserver);\n    _this = _callSuper(this, QueryObserver);\n    _classPrivateMethodInitSpec(_this, _Class_brand);\n    _classPrivateFieldInitSpec(_this, _client, void 0);\n    _classPrivateFieldInitSpec(_this, _currentQuery, void 0);\n    _classPrivateFieldInitSpec(_this, _currentQueryInitialState, void 0);\n    _classPrivateFieldInitSpec(_this, _currentResult, void 0);\n    _classPrivateFieldInitSpec(_this, _currentResultState, void 0);\n    _classPrivateFieldInitSpec(_this, _currentResultOptions, void 0);\n    _classPrivateFieldInitSpec(_this, _currentThenable, void 0);\n    _classPrivateFieldInitSpec(_this, _selectError, void 0);\n    _classPrivateFieldInitSpec(_this, _selectFn, void 0);\n    _classPrivateFieldInitSpec(_this, _selectResult, void 0);\n    // This property keeps track of the last query with defined data.\n    // It will be used to pass the previous data and query to the placeholder function between renders.\n    _classPrivateFieldInitSpec(_this, _lastQueryWithDefinedData, void 0);\n    _classPrivateFieldInitSpec(_this, _staleTimeoutId, void 0);\n    _classPrivateFieldInitSpec(_this, _refetchIntervalId, void 0);\n    _classPrivateFieldInitSpec(_this, _currentRefetchInterval, void 0);\n    _classPrivateFieldInitSpec(_this, _trackedProps, /* @__PURE__ */new Set());\n    _this.options = options;\n    _classPrivateFieldSet(_client, _this, client);\n    _classPrivateFieldSet(_selectError, _this, null);\n    _classPrivateFieldSet(_currentThenable, _this, pendingThenable());\n    if (!_this.options.experimental_prefetchInRender) {\n      _classPrivateFieldGet(_currentThenable, _this).reject(new Error(\"experimental_prefetchInRender feature flag is not enabled\"));\n    }\n    _this.bindMethods();\n    _this.setOptions(options);\n    return _this;\n  }\n  _inherits(QueryObserver, _Subscribable);\n  return _createClass(QueryObserver, [{\n    key: \"bindMethods\",\n    value: function bindMethods() {\n      this.refetch = this.refetch.bind(this);\n    }\n  }, {\n    key: \"onSubscribe\",\n    value: function onSubscribe() {\n      if (this.listeners.size === 1) {\n        _classPrivateFieldGet(_currentQuery, this).addObserver(this);\n        if (shouldFetchOnMount(_classPrivateFieldGet(_currentQuery, this), this.options)) {\n          _assertClassBrand(_Class_brand, this, _executeFetch).call(this);\n        } else {\n          this.updateResult();\n        }\n        _assertClassBrand(_Class_brand, this, _updateTimers).call(this);\n      }\n    }\n  }, {\n    key: \"onUnsubscribe\",\n    value: function onUnsubscribe() {\n      if (!this.hasListeners()) {\n        this.destroy();\n      }\n    }\n  }, {\n    key: \"shouldFetchOnReconnect\",\n    value: function shouldFetchOnReconnect() {\n      return shouldFetchOn(_classPrivateFieldGet(_currentQuery, this), this.options, this.options.refetchOnReconnect);\n    }\n  }, {\n    key: \"shouldFetchOnWindowFocus\",\n    value: function shouldFetchOnWindowFocus() {\n      return shouldFetchOn(_classPrivateFieldGet(_currentQuery, this), this.options, this.options.refetchOnWindowFocus);\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.listeners = /* @__PURE__ */new Set();\n      _assertClassBrand(_Class_brand, this, _clearStaleTimeout).call(this);\n      _assertClassBrand(_Class_brand, this, _clearRefetchInterval).call(this);\n      _classPrivateFieldGet(_currentQuery, this).removeObserver(this);\n    }\n  }, {\n    key: \"setOptions\",\n    value: function setOptions(options) {\n      var prevOptions = this.options;\n      var prevQuery = _classPrivateFieldGet(_currentQuery, this);\n      this.options = _classPrivateFieldGet(_client, this).defaultQueryOptions(options);\n      if (this.options.enabled !== void 0 && typeof this.options.enabled !== \"boolean\" && typeof this.options.enabled !== \"function\" && typeof resolveEnabled(this.options.enabled, _classPrivateFieldGet(_currentQuery, this)) !== \"boolean\") {\n        throw new Error(\"Expected enabled to be a boolean or a callback that returns a boolean\");\n      }\n      _assertClassBrand(_Class_brand, this, _updateQuery).call(this);\n      _classPrivateFieldGet(_currentQuery, this).setOptions(this.options);\n      if (prevOptions._defaulted && !shallowEqualObjects(this.options, prevOptions)) {\n        _classPrivateFieldGet(_client, this).getQueryCache().notify({\n          type: \"observerOptionsUpdated\",\n          query: _classPrivateFieldGet(_currentQuery, this),\n          observer: this\n        });\n      }\n      var mounted = this.hasListeners();\n      if (mounted && shouldFetchOptionally(_classPrivateFieldGet(_currentQuery, this), prevQuery, this.options, prevOptions)) {\n        _assertClassBrand(_Class_brand, this, _executeFetch).call(this);\n      }\n      this.updateResult();\n      if (mounted && (_classPrivateFieldGet(_currentQuery, this) !== prevQuery || resolveEnabled(this.options.enabled, _classPrivateFieldGet(_currentQuery, this)) !== resolveEnabled(prevOptions.enabled, _classPrivateFieldGet(_currentQuery, this)) || resolveStaleTime(this.options.staleTime, _classPrivateFieldGet(_currentQuery, this)) !== resolveStaleTime(prevOptions.staleTime, _classPrivateFieldGet(_currentQuery, this)))) {\n        _assertClassBrand(_Class_brand, this, _updateStaleTimeout).call(this);\n      }\n      var nextRefetchInterval = _assertClassBrand(_Class_brand, this, _computeRefetchInterval).call(this);\n      if (mounted && (_classPrivateFieldGet(_currentQuery, this) !== prevQuery || resolveEnabled(this.options.enabled, _classPrivateFieldGet(_currentQuery, this)) !== resolveEnabled(prevOptions.enabled, _classPrivateFieldGet(_currentQuery, this)) || nextRefetchInterval !== _classPrivateFieldGet(_currentRefetchInterval, this))) {\n        _assertClassBrand(_Class_brand, this, _updateRefetchInterval).call(this, nextRefetchInterval);\n      }\n    }\n  }, {\n    key: \"getOptimisticResult\",\n    value: function getOptimisticResult(options) {\n      var query = _classPrivateFieldGet(_client, this).getQueryCache().build(_classPrivateFieldGet(_client, this), options);\n      var result = this.createResult(query, options);\n      if (shouldAssignObserverCurrentProperties(this, result)) {\n        _classPrivateFieldSet(_currentResult, this, result);\n        _classPrivateFieldSet(_currentResultOptions, this, this.options);\n        _classPrivateFieldSet(_currentResultState, this, _classPrivateFieldGet(_currentQuery, this).state);\n      }\n      return result;\n    }\n  }, {\n    key: \"getCurrentResult\",\n    value: function getCurrentResult() {\n      return _classPrivateFieldGet(_currentResult, this);\n    }\n  }, {\n    key: \"trackResult\",\n    value: function trackResult(result, onPropTracked) {\n      var _this2 = this;\n      return new Proxy(result, {\n        get: function get(target, key) {\n          _this2.trackProp(key);\n          onPropTracked === null || onPropTracked === void 0 || onPropTracked(key);\n          return Reflect.get(target, key);\n        }\n      });\n    }\n  }, {\n    key: \"trackProp\",\n    value: function trackProp(key) {\n      _classPrivateFieldGet(_trackedProps, this).add(key);\n    }\n  }, {\n    key: \"getCurrentQuery\",\n    value: function getCurrentQuery() {\n      return _classPrivateFieldGet(_currentQuery, this);\n    }\n  }, {\n    key: \"refetch\",\n    value: function refetch() {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        options = Object.assign({}, (_objectDestructuringEmpty(_ref), _ref));\n      return this.fetch(_objectSpread({}, options));\n    }\n  }, {\n    key: \"fetchOptimistic\",\n    value: function fetchOptimistic(options) {\n      var _this3 = this;\n      var defaultedOptions = _classPrivateFieldGet(_client, this).defaultQueryOptions(options);\n      var query = _classPrivateFieldGet(_client, this).getQueryCache().build(_classPrivateFieldGet(_client, this), defaultedOptions);\n      return query.fetch().then(function () {\n        return _this3.createResult(query, defaultedOptions);\n      });\n    }\n  }, {\n    key: \"fetch\",\n    value: function fetch(fetchOptions) {\n      var _fetchOptions$cancelR,\n        _this4 = this;\n      return _assertClassBrand(_Class_brand, this, _executeFetch).call(this, _objectSpread(_objectSpread({}, fetchOptions), {}, {\n        cancelRefetch: (_fetchOptions$cancelR = fetchOptions.cancelRefetch) !== null && _fetchOptions$cancelR !== void 0 ? _fetchOptions$cancelR : true\n      })).then(function () {\n        _this4.updateResult();\n        return _classPrivateFieldGet(_currentResult, _this4);\n      });\n    }\n  }, {\n    key: \"createResult\",\n    value: function createResult(query, options) {\n      var _this5 = this;\n      var prevQuery = _classPrivateFieldGet(_currentQuery, this);\n      var prevOptions = this.options;\n      var prevResult = _classPrivateFieldGet(_currentResult, this);\n      var prevResultState = _classPrivateFieldGet(_currentResultState, this);\n      var prevResultOptions = _classPrivateFieldGet(_currentResultOptions, this);\n      var queryChange = query !== prevQuery;\n      var queryInitialState = queryChange ? query.state : _classPrivateFieldGet(_currentQueryInitialState, this);\n      var state = query.state;\n      var newState = _objectSpread({}, state);\n      var isPlaceholderData = false;\n      var data;\n      if (options._optimisticResults) {\n        var mounted = this.hasListeners();\n        var fetchOnMount = !mounted && shouldFetchOnMount(query, options);\n        var fetchOptionally = mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions);\n        if (fetchOnMount || fetchOptionally) {\n          newState = _objectSpread(_objectSpread({}, newState), fetchState(state.data, query.options));\n        }\n        if (options._optimisticResults === \"isRestoring\") {\n          newState.fetchStatus = \"idle\";\n        }\n      }\n      var _newState = newState,\n        error = _newState.error,\n        errorUpdatedAt = _newState.errorUpdatedAt,\n        status = _newState.status;\n      data = newState.data;\n      var skipSelect = false;\n      if (options.placeholderData !== void 0 && data === void 0 && status === \"pending\") {\n        var placeholderData;\n        if (prevResult !== null && prevResult !== void 0 && prevResult.isPlaceholderData && options.placeholderData === (prevResultOptions === null || prevResultOptions === void 0 ? void 0 : prevResultOptions.placeholderData)) {\n          placeholderData = prevResult.data;\n          skipSelect = true;\n        } else {\n          var _classPrivateFieldGet2;\n          placeholderData = typeof options.placeholderData === \"function\" ? options.placeholderData((_classPrivateFieldGet2 = _classPrivateFieldGet(_lastQueryWithDefinedData, this)) === null || _classPrivateFieldGet2 === void 0 ? void 0 : _classPrivateFieldGet2.state.data, _classPrivateFieldGet(_lastQueryWithDefinedData, this)) : options.placeholderData;\n        }\n        if (placeholderData !== void 0) {\n          status = \"success\";\n          data = replaceData(prevResult === null || prevResult === void 0 ? void 0 : prevResult.data, placeholderData, options);\n          isPlaceholderData = true;\n        }\n      }\n      if (options.select && data !== void 0 && !skipSelect) {\n        if (prevResult && data === (prevResultState === null || prevResultState === void 0 ? void 0 : prevResultState.data) && options.select === _classPrivateFieldGet(_selectFn, this)) {\n          data = _classPrivateFieldGet(_selectResult, this);\n        } else {\n          try {\n            _classPrivateFieldSet(_selectFn, this, options.select);\n            data = options.select(data);\n            data = replaceData(prevResult === null || prevResult === void 0 ? void 0 : prevResult.data, data, options);\n            _classPrivateFieldSet(_selectResult, this, data);\n            _classPrivateFieldSet(_selectError, this, null);\n          } catch (selectError) {\n            _classPrivateFieldSet(_selectError, this, selectError);\n          }\n        }\n      }\n      if (_classPrivateFieldGet(_selectError, this)) {\n        error = _classPrivateFieldGet(_selectError, this);\n        data = _classPrivateFieldGet(_selectResult, this);\n        errorUpdatedAt = Date.now();\n        status = \"error\";\n      }\n      var isFetching = newState.fetchStatus === \"fetching\";\n      var isPending = status === \"pending\";\n      var isError = status === \"error\";\n      var isLoading = isPending && isFetching;\n      var hasData = data !== void 0;\n      var result = {\n        status: status,\n        fetchStatus: newState.fetchStatus,\n        isPending: isPending,\n        isSuccess: status === \"success\",\n        isError: isError,\n        isInitialLoading: isLoading,\n        isLoading: isLoading,\n        data: data,\n        dataUpdatedAt: newState.dataUpdatedAt,\n        error: error,\n        errorUpdatedAt: errorUpdatedAt,\n        failureCount: newState.fetchFailureCount,\n        failureReason: newState.fetchFailureReason,\n        errorUpdateCount: newState.errorUpdateCount,\n        isFetched: newState.dataUpdateCount > 0 || newState.errorUpdateCount > 0,\n        isFetchedAfterMount: newState.dataUpdateCount > queryInitialState.dataUpdateCount || newState.errorUpdateCount > queryInitialState.errorUpdateCount,\n        isFetching: isFetching,\n        isRefetching: isFetching && !isPending,\n        isLoadingError: isError && !hasData,\n        isPaused: newState.fetchStatus === \"paused\",\n        isPlaceholderData: isPlaceholderData,\n        isRefetchError: isError && hasData,\n        isStale: isStale(query, options),\n        refetch: this.refetch,\n        promise: _classPrivateFieldGet(_currentThenable, this)\n      };\n      var nextResult = result;\n      if (this.options.experimental_prefetchInRender) {\n        var finalizeThenableIfPossible = function finalizeThenableIfPossible(thenable) {\n          if (nextResult.status === \"error\") {\n            thenable.reject(nextResult.error);\n          } else if (nextResult.data !== void 0) {\n            thenable.resolve(nextResult.data);\n          }\n        };\n        var recreateThenable = function recreateThenable() {\n          var pending = _classPrivateFieldSet(_currentThenable, _this5, nextResult.promise = pendingThenable());\n          finalizeThenableIfPossible(pending);\n        };\n        var prevThenable = _classPrivateFieldGet(_currentThenable, this);\n        switch (prevThenable.status) {\n          case \"pending\":\n            if (query.queryHash === prevQuery.queryHash) {\n              finalizeThenableIfPossible(prevThenable);\n            }\n            break;\n          case \"fulfilled\":\n            if (nextResult.status === \"error\" || nextResult.data !== prevThenable.value) {\n              recreateThenable();\n            }\n            break;\n          case \"rejected\":\n            if (nextResult.status !== \"error\" || nextResult.error !== prevThenable.reason) {\n              recreateThenable();\n            }\n            break;\n        }\n      }\n      return nextResult;\n    }\n  }, {\n    key: \"updateResult\",\n    value: function updateResult() {\n      var _this6 = this;\n      var prevResult = _classPrivateFieldGet(_currentResult, this);\n      var nextResult = this.createResult(_classPrivateFieldGet(_currentQuery, this), this.options);\n      _classPrivateFieldSet(_currentResultState, this, _classPrivateFieldGet(_currentQuery, this).state);\n      _classPrivateFieldSet(_currentResultOptions, this, this.options);\n      if (_classPrivateFieldGet(_currentResultState, this).data !== void 0) {\n        _classPrivateFieldSet(_lastQueryWithDefinedData, this, _classPrivateFieldGet(_currentQuery, this));\n      }\n      if (shallowEqualObjects(nextResult, prevResult)) {\n        return;\n      }\n      _classPrivateFieldSet(_currentResult, this, nextResult);\n      var shouldNotifyListeners = function shouldNotifyListeners() {\n        if (!prevResult) {\n          return true;\n        }\n        var notifyOnChangeProps = _this6.options.notifyOnChangeProps;\n        var notifyOnChangePropsValue = typeof notifyOnChangeProps === \"function\" ? notifyOnChangeProps() : notifyOnChangeProps;\n        if (notifyOnChangePropsValue === \"all\" || !notifyOnChangePropsValue && !_classPrivateFieldGet(_trackedProps, _this6).size) {\n          return true;\n        }\n        var includedProps = new Set(notifyOnChangePropsValue !== null && notifyOnChangePropsValue !== void 0 ? notifyOnChangePropsValue : _classPrivateFieldGet(_trackedProps, _this6));\n        if (_this6.options.throwOnError) {\n          includedProps.add(\"error\");\n        }\n        return Object.keys(_classPrivateFieldGet(_currentResult, _this6)).some(function (key) {\n          var typedKey = key;\n          var changed = _classPrivateFieldGet(_currentResult, _this6)[typedKey] !== prevResult[typedKey];\n          return changed && includedProps.has(typedKey);\n        });\n      };\n      _assertClassBrand(_Class_brand, this, _notify).call(this, {\n        listeners: shouldNotifyListeners()\n      });\n    }\n  }, {\n    key: \"onQueryUpdate\",\n    value: function onQueryUpdate() {\n      this.updateResult();\n      if (this.hasListeners()) {\n        _assertClassBrand(_Class_brand, this, _updateTimers).call(this);\n      }\n    }\n  }]);\n}(Subscribable));\nfunction _executeFetch(fetchOptions) {\n  _assertClassBrand(_Class_brand, this, _updateQuery).call(this);\n  var promise = _classPrivateFieldGet(_currentQuery, this).fetch(this.options, fetchOptions);\n  if (!(fetchOptions !== null && fetchOptions !== void 0 && fetchOptions.throwOnError)) {\n    promise = promise.catch(noop);\n  }\n  return promise;\n}\nfunction _updateStaleTimeout() {\n  var _this7 = this;\n  _assertClassBrand(_Class_brand, this, _clearStaleTimeout).call(this);\n  var staleTime = resolveStaleTime(this.options.staleTime, _classPrivateFieldGet(_currentQuery, this));\n  if (isServer || _classPrivateFieldGet(_currentResult, this).isStale || !isValidTimeout(staleTime)) {\n    return;\n  }\n  var time = timeUntilStale(_classPrivateFieldGet(_currentResult, this).dataUpdatedAt, staleTime);\n  var timeout = time + 1;\n  _classPrivateFieldSet(_staleTimeoutId, this, setTimeout(function () {\n    if (!_classPrivateFieldGet(_currentResult, _this7).isStale) {\n      _this7.updateResult();\n    }\n  }, timeout));\n}\nfunction _computeRefetchInterval() {\n  var _ref2;\n  return (_ref2 = typeof this.options.refetchInterval === \"function\" ? this.options.refetchInterval(_classPrivateFieldGet(_currentQuery, this)) : this.options.refetchInterval) !== null && _ref2 !== void 0 ? _ref2 : false;\n}\nfunction _updateRefetchInterval(nextInterval) {\n  var _this8 = this;\n  _assertClassBrand(_Class_brand, this, _clearRefetchInterval).call(this);\n  _classPrivateFieldSet(_currentRefetchInterval, this, nextInterval);\n  if (isServer || resolveEnabled(this.options.enabled, _classPrivateFieldGet(_currentQuery, this)) === false || !isValidTimeout(_classPrivateFieldGet(_currentRefetchInterval, this)) || _classPrivateFieldGet(_currentRefetchInterval, this) === 0) {\n    return;\n  }\n  _classPrivateFieldSet(_refetchIntervalId, this, setInterval(function () {\n    if (_this8.options.refetchIntervalInBackground || focusManager.isFocused()) {\n      _assertClassBrand(_Class_brand, _this8, _executeFetch).call(_this8);\n    }\n  }, _classPrivateFieldGet(_currentRefetchInterval, this)));\n}\nfunction _updateTimers() {\n  _assertClassBrand(_Class_brand, this, _updateStaleTimeout).call(this);\n  _assertClassBrand(_Class_brand, this, _updateRefetchInterval).call(this, _assertClassBrand(_Class_brand, this, _computeRefetchInterval).call(this));\n}\nfunction _clearStaleTimeout() {\n  if (_classPrivateFieldGet(_staleTimeoutId, this)) {\n    clearTimeout(_classPrivateFieldGet(_staleTimeoutId, this));\n    _classPrivateFieldSet(_staleTimeoutId, this, void 0);\n  }\n}\nfunction _clearRefetchInterval() {\n  if (_classPrivateFieldGet(_refetchIntervalId, this)) {\n    clearInterval(_classPrivateFieldGet(_refetchIntervalId, this));\n    _classPrivateFieldSet(_refetchIntervalId, this, void 0);\n  }\n}\nfunction _updateQuery() {\n  var query = _classPrivateFieldGet(_client, this).getQueryCache().build(_classPrivateFieldGet(_client, this), this.options);\n  if (query === _classPrivateFieldGet(_currentQuery, this)) {\n    return;\n  }\n  var prevQuery = _classPrivateFieldGet(_currentQuery, this);\n  _classPrivateFieldSet(_currentQuery, this, query);\n  _classPrivateFieldSet(_currentQueryInitialState, this, query.state);\n  if (this.hasListeners()) {\n    prevQuery === null || prevQuery === void 0 || prevQuery.removeObserver(this);\n    query.addObserver(this);\n  }\n}\nfunction _notify(notifyOptions) {\n  var _this9 = this;\n  notifyManager.batch(function () {\n    if (notifyOptions.listeners) {\n      _this9.listeners.forEach(function (listener) {\n        listener(_classPrivateFieldGet(_currentResult, _this9));\n      });\n    }\n    _classPrivateFieldGet(_client, _this9).getQueryCache().notify({\n      query: _classPrivateFieldGet(_currentQuery, _this9),\n      type: \"observerResultsUpdated\"\n    });\n  });\n}\nfunction shouldLoadOnMount(query, options) {\n  return resolveEnabled(options.enabled, query) !== false && query.state.data === void 0 && !(query.state.status === \"error\" && options.retryOnMount === false);\n}\nfunction shouldFetchOnMount(query, options) {\n  return shouldLoadOnMount(query, options) || query.state.data !== void 0 && shouldFetchOn(query, options, options.refetchOnMount);\n}\nfunction shouldFetchOn(query, options, field) {\n  if (resolveEnabled(options.enabled, query) !== false && resolveStaleTime(options.staleTime, query) !== \"static\") {\n    var value = typeof field === \"function\" ? field(query) : field;\n    return value === \"always\" || value !== false && isStale(query, options);\n  }\n  return false;\n}\nfunction shouldFetchOptionally(query, prevQuery, options, prevOptions) {\n  return (query !== prevQuery || resolveEnabled(prevOptions.enabled, query) === false) && (!options.suspense || query.state.status !== \"error\") && isStale(query, options);\n}\nfunction isStale(query, options) {\n  return resolveEnabled(options.enabled, query) !== false && query.isStaleByTime(resolveStaleTime(options.staleTime, query));\n}\nfunction shouldAssignObserverCurrentProperties(observer, optimisticResult) {\n  if (!shallowEqualObjects(observer.getCurrentResult(), optimisticResult)) {\n    return true;\n  }\n  return false;\n}\nexport { QueryObserver };","map":{"version":3,"names":["focusManager","notifyManager","fetchState","Subscribable","pendingThenable","isServer","isValidTimeout","noop","replaceData","resolveEnabled","resolveStaleTime","shallowEqualObjects","timeUntilStale","QueryObserver","_client","WeakMap","_currentQuery","_currentQueryInitialState","_currentResult","_currentResultState","_currentResultOptions","_currentThenable","_selectError","_selectFn","_selectResult","_lastQueryWithDefinedData","_staleTimeoutId","_refetchIntervalId","_currentRefetchInterval","_trackedProps","_Class_brand","WeakSet","_Subscribable","client","options","_this","_classCallCheck","_callSuper","_classPrivateMethodInitSpec","_classPrivateFieldInitSpec","Set","_classPrivateFieldSet","experimental_prefetchInRender","_classPrivateFieldGet","reject","Error","bindMethods","setOptions","_inherits","_createClass","key","value","refetch","bind","onSubscribe","listeners","size","addObserver","shouldFetchOnMount","_assertClassBrand","_executeFetch","call","updateResult","_updateTimers","onUnsubscribe","hasListeners","destroy","shouldFetchOnReconnect","shouldFetchOn","refetchOnReconnect","shouldFetchOnWindowFocus","refetchOnWindowFocus","_clearStaleTimeout","_clearRefetchInterval","removeObserver","prevOptions","prevQuery","defaultQueryOptions","enabled","_updateQuery","_defaulted","getQueryCache","notify","type","query","observer","mounted","shouldFetchOptionally","staleTime","_updateStaleTimeout","nextRefetchInterval","_computeRefetchInterval","_updateRefetchInterval","getOptimisticResult","build","result","createResult","shouldAssignObserverCurrentProperties","state","getCurrentResult","trackResult","onPropTracked","_this2","Proxy","get","target","trackProp","Reflect","add","getCurrentQuery","_ref","arguments","length","undefined","Object","assign","_objectDestructuringEmpty","fetch","_objectSpread","fetchOptimistic","_this3","defaultedOptions","then","fetchOptions","_fetchOptions$cancelR","_this4","cancelRefetch","_this5","prevResult","prevResultState","prevResultOptions","queryChange","queryInitialState","newState","isPlaceholderData","data","_optimisticResults","fetchOnMount","fetchOptionally","fetchStatus","_newState","error","errorUpdatedAt","status","skipSelect","placeholderData","_classPrivateFieldGet2","select","selectError","Date","now","isFetching","isPending","isError","isLoading","hasData","isSuccess","isInitialLoading","dataUpdatedAt","failureCount","fetchFailureCount","failureReason","fetchFailureReason","errorUpdateCount","isFetched","dataUpdateCount","isFetchedAfterMount","isRefetching","isLoadingError","isPaused","isRefetchError","isStale","promise","nextResult","finalizeThenableIfPossible","thenable","resolve","recreateThenable","pending","prevThenable","queryHash","reason","_this6","shouldNotifyListeners","notifyOnChangeProps","notifyOnChangePropsValue","includedProps","throwOnError","keys","some","typedKey","changed","has","_notify","onQueryUpdate","catch","_this7","time","timeout","setTimeout","_ref2","refetchInterval","nextInterval","_this8","setInterval","refetchIntervalInBackground","isFocused","clearTimeout","clearInterval","notifyOptions","_this9","batch","forEach","listener","shouldLoadOnMount","retryOnMount","refetchOnMount","field","suspense","isStaleByTime","optimisticResult"],"sources":["C:\\Users\\als40\\Desktop\\HandsMarket\\node_modules\\@tanstack\\query-core\\src\\queryObserver.ts"],"sourcesContent":["import { focusManager } from './focusManager'\nimport { notifyManager } from './notifyManager'\nimport { fetchState } from './query'\nimport { Subscribable } from './subscribable'\nimport { pendingThenable } from './thenable'\nimport {\n  isServer,\n  isValidTimeout,\n  noop,\n  replaceData,\n  resolveEnabled,\n  resolveStaleTime,\n  shallowEqualObjects,\n  timeUntilStale,\n} from './utils'\nimport type { FetchOptions, Query, QueryState } from './query'\nimport type { QueryClient } from './queryClient'\nimport type { PendingThenable, Thenable } from './thenable'\nimport type {\n  DefaultError,\n  DefaultedQueryObserverOptions,\n  PlaceholderDataFunction,\n  QueryKey,\n  QueryObserverBaseResult,\n  QueryObserverOptions,\n  QueryObserverResult,\n  QueryOptions,\n  RefetchOptions,\n} from './types'\n\ntype QueryObserverListener<TData, TError> = (\n  result: QueryObserverResult<TData, TError>,\n) => void\n\ninterface ObserverFetchOptions extends FetchOptions {\n  throwOnError?: boolean\n}\n\nexport class QueryObserver<\n  TQueryFnData = unknown,\n  TError = DefaultError,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends Subscribable<QueryObserverListener<TData, TError>> {\n  #client: QueryClient\n  #currentQuery: Query<TQueryFnData, TError, TQueryData, TQueryKey> = undefined!\n  #currentQueryInitialState: QueryState<TQueryData, TError> = undefined!\n  #currentResult: QueryObserverResult<TData, TError> = undefined!\n  #currentResultState?: QueryState<TQueryData, TError>\n  #currentResultOptions?: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n  #currentThenable: Thenable<TData>\n  #selectError: TError | null\n  #selectFn?: (data: TQueryData) => TData\n  #selectResult?: TData\n  // This property keeps track of the last query with defined data.\n  // It will be used to pass the previous data and query to the placeholder function between renders.\n  #lastQueryWithDefinedData?: Query<TQueryFnData, TError, TQueryData, TQueryKey>\n  #staleTimeoutId?: ReturnType<typeof setTimeout>\n  #refetchIntervalId?: ReturnType<typeof setInterval>\n  #currentRefetchInterval?: number | false\n  #trackedProps = new Set<keyof QueryObserverResult>()\n\n  constructor(\n    client: QueryClient,\n    public options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ) {\n    super()\n\n    this.#client = client\n    this.#selectError = null\n    this.#currentThenable = pendingThenable()\n    if (!this.options.experimental_prefetchInRender) {\n      this.#currentThenable.reject(\n        new Error('experimental_prefetchInRender feature flag is not enabled'),\n      )\n    }\n\n    this.bindMethods()\n    this.setOptions(options)\n  }\n\n  protected bindMethods(): void {\n    this.refetch = this.refetch.bind(this)\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.size === 1) {\n      this.#currentQuery.addObserver(this)\n\n      if (shouldFetchOnMount(this.#currentQuery, this.options)) {\n        this.#executeFetch()\n      } else {\n        this.updateResult()\n      }\n\n      this.#updateTimers()\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.hasListeners()) {\n      this.destroy()\n    }\n  }\n\n  shouldFetchOnReconnect(): boolean {\n    return shouldFetchOn(\n      this.#currentQuery,\n      this.options,\n      this.options.refetchOnReconnect,\n    )\n  }\n\n  shouldFetchOnWindowFocus(): boolean {\n    return shouldFetchOn(\n      this.#currentQuery,\n      this.options,\n      this.options.refetchOnWindowFocus,\n    )\n  }\n\n  destroy(): void {\n    this.listeners = new Set()\n    this.#clearStaleTimeout()\n    this.#clearRefetchInterval()\n    this.#currentQuery.removeObserver(this)\n  }\n\n  setOptions(\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): void {\n    const prevOptions = this.options\n    const prevQuery = this.#currentQuery\n\n    this.options = this.#client.defaultQueryOptions(options)\n\n    if (\n      this.options.enabled !== undefined &&\n      typeof this.options.enabled !== 'boolean' &&\n      typeof this.options.enabled !== 'function' &&\n      typeof resolveEnabled(this.options.enabled, this.#currentQuery) !==\n        'boolean'\n    ) {\n      throw new Error(\n        'Expected enabled to be a boolean or a callback that returns a boolean',\n      )\n    }\n\n    this.#updateQuery()\n    this.#currentQuery.setOptions(this.options)\n\n    if (\n      prevOptions._defaulted &&\n      !shallowEqualObjects(this.options, prevOptions)\n    ) {\n      this.#client.getQueryCache().notify({\n        type: 'observerOptionsUpdated',\n        query: this.#currentQuery,\n        observer: this,\n      })\n    }\n\n    const mounted = this.hasListeners()\n\n    // Fetch if there are subscribers\n    if (\n      mounted &&\n      shouldFetchOptionally(\n        this.#currentQuery,\n        prevQuery,\n        this.options,\n        prevOptions,\n      )\n    ) {\n      this.#executeFetch()\n    }\n\n    // Update result\n    this.updateResult()\n\n    // Update stale interval if needed\n    if (\n      mounted &&\n      (this.#currentQuery !== prevQuery ||\n        resolveEnabled(this.options.enabled, this.#currentQuery) !==\n          resolveEnabled(prevOptions.enabled, this.#currentQuery) ||\n        resolveStaleTime(this.options.staleTime, this.#currentQuery) !==\n          resolveStaleTime(prevOptions.staleTime, this.#currentQuery))\n    ) {\n      this.#updateStaleTimeout()\n    }\n\n    const nextRefetchInterval = this.#computeRefetchInterval()\n\n    // Update refetch interval if needed\n    if (\n      mounted &&\n      (this.#currentQuery !== prevQuery ||\n        resolveEnabled(this.options.enabled, this.#currentQuery) !==\n          resolveEnabled(prevOptions.enabled, this.#currentQuery) ||\n        nextRefetchInterval !== this.#currentRefetchInterval)\n    ) {\n      this.#updateRefetchInterval(nextRefetchInterval)\n    }\n  }\n\n  getOptimisticResult(\n    options: DefaultedQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const query = this.#client.getQueryCache().build(this.#client, options)\n\n    const result = this.createResult(query, options)\n\n    if (shouldAssignObserverCurrentProperties(this, result)) {\n      // this assigns the optimistic result to the current Observer\n      // because if the query function changes, useQuery will be performing\n      // an effect where it would fetch again.\n      // When the fetch finishes, we perform a deep data cloning in order\n      // to reuse objects references. This deep data clone is performed against\n      // the `observer.currentResult.data` property\n      // When QueryKey changes, we refresh the query and get new `optimistic`\n      // result, while we leave the `observer.currentResult`, so when new data\n      // arrives, it finds the old `observer.currentResult` which is related\n      // to the old QueryKey. Which means that currentResult and selectData are\n      // out of sync already.\n      // To solve this, we move the cursor of the currentResult every time\n      // an observer reads an optimistic value.\n\n      // When keeping the previous data, the result doesn't change until new\n      // data arrives.\n      this.#currentResult = result\n      this.#currentResultOptions = this.options\n      this.#currentResultState = this.#currentQuery.state\n    }\n    return result\n  }\n\n  getCurrentResult(): QueryObserverResult<TData, TError> {\n    return this.#currentResult\n  }\n\n  trackResult(\n    result: QueryObserverResult<TData, TError>,\n    onPropTracked?: (key: keyof QueryObserverResult) => void,\n  ): QueryObserverResult<TData, TError> {\n    return new Proxy(result, {\n      get: (target, key) => {\n        this.trackProp(key as keyof QueryObserverResult)\n        onPropTracked?.(key as keyof QueryObserverResult)\n        return Reflect.get(target, key)\n      },\n    })\n  }\n\n  trackProp(key: keyof QueryObserverResult) {\n    this.#trackedProps.add(key)\n  }\n\n  getCurrentQuery(): Query<TQueryFnData, TError, TQueryData, TQueryKey> {\n    return this.#currentQuery\n  }\n\n  refetch({ ...options }: RefetchOptions = {}): Promise<\n    QueryObserverResult<TData, TError>\n  > {\n    return this.fetch({\n      ...options,\n    })\n  }\n\n  fetchOptimistic(\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    const defaultedOptions = this.#client.defaultQueryOptions(options)\n\n    const query = this.#client\n      .getQueryCache()\n      .build(this.#client, defaultedOptions)\n\n    return query.fetch().then(() => this.createResult(query, defaultedOptions))\n  }\n\n  protected fetch(\n    fetchOptions: ObserverFetchOptions,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return this.#executeFetch({\n      ...fetchOptions,\n      cancelRefetch: fetchOptions.cancelRefetch ?? true,\n    }).then(() => {\n      this.updateResult()\n      return this.#currentResult\n    })\n  }\n\n  #executeFetch(\n    fetchOptions?: Omit<ObserverFetchOptions, 'initialPromise'>,\n  ): Promise<TQueryData | undefined> {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.#updateQuery()\n\n    // Fetch\n    let promise: Promise<TQueryData | undefined> = this.#currentQuery.fetch(\n      this.options as QueryOptions<TQueryFnData, TError, TQueryData, TQueryKey>,\n      fetchOptions,\n    )\n\n    if (!fetchOptions?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  #updateStaleTimeout(): void {\n    this.#clearStaleTimeout()\n    const staleTime = resolveStaleTime(\n      this.options.staleTime,\n      this.#currentQuery,\n    )\n\n    if (isServer || this.#currentResult.isStale || !isValidTimeout(staleTime)) {\n      return\n    }\n\n    const time = timeUntilStale(this.#currentResult.dataUpdatedAt, staleTime)\n\n    // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n    const timeout = time + 1\n\n    this.#staleTimeoutId = setTimeout(() => {\n      if (!this.#currentResult.isStale) {\n        this.updateResult()\n      }\n    }, timeout)\n  }\n\n  #computeRefetchInterval() {\n    return (\n      (typeof this.options.refetchInterval === 'function'\n        ? this.options.refetchInterval(this.#currentQuery)\n        : this.options.refetchInterval) ?? false\n    )\n  }\n\n  #updateRefetchInterval(nextInterval: number | false): void {\n    this.#clearRefetchInterval()\n\n    this.#currentRefetchInterval = nextInterval\n\n    if (\n      isServer ||\n      resolveEnabled(this.options.enabled, this.#currentQuery) === false ||\n      !isValidTimeout(this.#currentRefetchInterval) ||\n      this.#currentRefetchInterval === 0\n    ) {\n      return\n    }\n\n    this.#refetchIntervalId = setInterval(() => {\n      if (\n        this.options.refetchIntervalInBackground ||\n        focusManager.isFocused()\n      ) {\n        this.#executeFetch()\n      }\n    }, this.#currentRefetchInterval)\n  }\n\n  #updateTimers(): void {\n    this.#updateStaleTimeout()\n    this.#updateRefetchInterval(this.#computeRefetchInterval())\n  }\n\n  #clearStaleTimeout(): void {\n    if (this.#staleTimeoutId) {\n      clearTimeout(this.#staleTimeoutId)\n      this.#staleTimeoutId = undefined\n    }\n  }\n\n  #clearRefetchInterval(): void {\n    if (this.#refetchIntervalId) {\n      clearInterval(this.#refetchIntervalId)\n      this.#refetchIntervalId = undefined\n    }\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, TQueryData, TQueryKey>,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const prevQuery = this.#currentQuery\n    const prevOptions = this.options\n    const prevResult = this.#currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n    const prevResultState = this.#currentResultState\n    const prevResultOptions = this.#currentResultOptions\n    const queryChange = query !== prevQuery\n    const queryInitialState = queryChange\n      ? query.state\n      : this.#currentQueryInitialState\n\n    const { state } = query\n    let newState = { ...state }\n    let isPlaceholderData = false\n    let data: TData | undefined\n\n    // Optimistically set result in fetching state if needed\n    if (options._optimisticResults) {\n      const mounted = this.hasListeners()\n\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options)\n\n      const fetchOptionally =\n        mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions)\n\n      if (fetchOnMount || fetchOptionally) {\n        newState = {\n          ...newState,\n          ...fetchState(state.data, query.options),\n        }\n      }\n      if (options._optimisticResults === 'isRestoring') {\n        newState.fetchStatus = 'idle'\n      }\n    }\n\n    let { error, errorUpdatedAt, status } = newState\n\n    // Per default, use query data\n    data = newState.data as unknown as TData\n    let skipSelect = false\n\n    // use placeholderData if needed\n    if (\n      options.placeholderData !== undefined &&\n      data === undefined &&\n      status === 'pending'\n    ) {\n      let placeholderData\n\n      // Memoize placeholder data\n      if (\n        prevResult?.isPlaceholderData &&\n        options.placeholderData === prevResultOptions?.placeholderData\n      ) {\n        placeholderData = prevResult.data\n        // we have to skip select when reading this memoization\n        // because prevResult.data is already \"selected\"\n        skipSelect = true\n      } else {\n        // compute placeholderData\n        placeholderData =\n          typeof options.placeholderData === 'function'\n            ? (\n                options.placeholderData as unknown as PlaceholderDataFunction<TQueryData>\n              )(\n                this.#lastQueryWithDefinedData?.state.data,\n                this.#lastQueryWithDefinedData as any,\n              )\n            : options.placeholderData\n      }\n\n      if (placeholderData !== undefined) {\n        status = 'success'\n        data = replaceData(\n          prevResult?.data,\n          placeholderData as unknown,\n          options,\n        ) as TData\n        isPlaceholderData = true\n      }\n    }\n\n    // Select data if needed\n    // this also runs placeholderData through the select function\n    if (options.select && data !== undefined && !skipSelect) {\n      // Memoize select result\n      if (\n        prevResult &&\n        data === prevResultState?.data &&\n        options.select === this.#selectFn\n      ) {\n        data = this.#selectResult\n      } else {\n        try {\n          this.#selectFn = options.select\n          data = options.select(data as any)\n          data = replaceData(prevResult?.data, data, options)\n          this.#selectResult = data\n          this.#selectError = null\n        } catch (selectError) {\n          this.#selectError = selectError as TError\n        }\n      }\n    }\n\n    if (this.#selectError) {\n      error = this.#selectError as any\n      data = this.#selectResult\n      errorUpdatedAt = Date.now()\n      status = 'error'\n    }\n\n    const isFetching = newState.fetchStatus === 'fetching'\n    const isPending = status === 'pending'\n    const isError = status === 'error'\n\n    const isLoading = isPending && isFetching\n    const hasData = data !== undefined\n\n    const result: QueryObserverBaseResult<TData, TError> = {\n      status,\n      fetchStatus: newState.fetchStatus,\n      isPending,\n      isSuccess: status === 'success',\n      isError,\n      isInitialLoading: isLoading,\n      isLoading,\n      data,\n      dataUpdatedAt: newState.dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: newState.fetchFailureCount,\n      failureReason: newState.fetchFailureReason,\n      errorUpdateCount: newState.errorUpdateCount,\n      isFetched: newState.dataUpdateCount > 0 || newState.errorUpdateCount > 0,\n      isFetchedAfterMount:\n        newState.dataUpdateCount > queryInitialState.dataUpdateCount ||\n        newState.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching,\n      isRefetching: isFetching && !isPending,\n      isLoadingError: isError && !hasData,\n      isPaused: newState.fetchStatus === 'paused',\n      isPlaceholderData,\n      isRefetchError: isError && hasData,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n      promise: this.#currentThenable,\n    }\n\n    const nextResult = result as QueryObserverResult<TData, TError>\n\n    if (this.options.experimental_prefetchInRender) {\n      const finalizeThenableIfPossible = (thenable: PendingThenable<TData>) => {\n        if (nextResult.status === 'error') {\n          thenable.reject(nextResult.error)\n        } else if (nextResult.data !== undefined) {\n          thenable.resolve(nextResult.data)\n        }\n      }\n\n      /**\n       * Create a new thenable and result promise when the results have changed\n       */\n      const recreateThenable = () => {\n        const pending =\n          (this.#currentThenable =\n          nextResult.promise =\n            pendingThenable())\n\n        finalizeThenableIfPossible(pending)\n      }\n\n      const prevThenable = this.#currentThenable\n      switch (prevThenable.status) {\n        case 'pending':\n          // Finalize the previous thenable if it was pending\n          // and we are still observing the same query\n          if (query.queryHash === prevQuery.queryHash) {\n            finalizeThenableIfPossible(prevThenable)\n          }\n          break\n        case 'fulfilled':\n          if (\n            nextResult.status === 'error' ||\n            nextResult.data !== prevThenable.value\n          ) {\n            recreateThenable()\n          }\n          break\n        case 'rejected':\n          if (\n            nextResult.status !== 'error' ||\n            nextResult.error !== prevThenable.reason\n          ) {\n            recreateThenable()\n          }\n          break\n      }\n    }\n\n    return nextResult\n  }\n\n  updateResult(): void {\n    const prevResult = this.#currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n\n    const nextResult = this.createResult(this.#currentQuery, this.options)\n\n    this.#currentResultState = this.#currentQuery.state\n    this.#currentResultOptions = this.options\n\n    if (this.#currentResultState.data !== undefined) {\n      this.#lastQueryWithDefinedData = this.#currentQuery\n    }\n\n    // Only notify and update result if something has changed\n    if (shallowEqualObjects(nextResult, prevResult)) {\n      return\n    }\n\n    this.#currentResult = nextResult\n\n    const shouldNotifyListeners = (): boolean => {\n      if (!prevResult) {\n        return true\n      }\n\n      const { notifyOnChangeProps } = this.options\n      const notifyOnChangePropsValue =\n        typeof notifyOnChangeProps === 'function'\n          ? notifyOnChangeProps()\n          : notifyOnChangeProps\n\n      if (\n        notifyOnChangePropsValue === 'all' ||\n        (!notifyOnChangePropsValue && !this.#trackedProps.size)\n      ) {\n        return true\n      }\n\n      const includedProps = new Set(\n        notifyOnChangePropsValue ?? this.#trackedProps,\n      )\n\n      if (this.options.throwOnError) {\n        includedProps.add('error')\n      }\n\n      return Object.keys(this.#currentResult).some((key) => {\n        const typedKey = key as keyof QueryObserverResult\n        const changed = this.#currentResult[typedKey] !== prevResult[typedKey]\n\n        return changed && includedProps.has(typedKey)\n      })\n    }\n\n    this.#notify({ listeners: shouldNotifyListeners() })\n  }\n\n  #updateQuery(): void {\n    const query = this.#client.getQueryCache().build(this.#client, this.options)\n\n    if (query === this.#currentQuery) {\n      return\n    }\n\n    const prevQuery = this.#currentQuery as\n      | Query<TQueryFnData, TError, TQueryData, TQueryKey>\n      | undefined\n    this.#currentQuery = query\n    this.#currentQueryInitialState = query.state\n\n    if (this.hasListeners()) {\n      prevQuery?.removeObserver(this)\n      query.addObserver(this)\n    }\n  }\n\n  onQueryUpdate(): void {\n    this.updateResult()\n\n    if (this.hasListeners()) {\n      this.#updateTimers()\n    }\n  }\n\n  #notify(notifyOptions: { listeners: boolean }): void {\n    notifyManager.batch(() => {\n      // First, trigger the listeners\n      if (notifyOptions.listeners) {\n        this.listeners.forEach((listener) => {\n          listener(this.#currentResult)\n        })\n      }\n\n      // Then the cache listeners\n      this.#client.getQueryCache().notify({\n        query: this.#currentQuery,\n        type: 'observerResultsUpdated',\n      })\n    })\n  }\n}\n\nfunction shouldLoadOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any>,\n): boolean {\n  return (\n    resolveEnabled(options.enabled, query) !== false &&\n    query.state.data === undefined &&\n    !(query.state.status === 'error' && options.retryOnMount === false)\n  )\n}\n\nfunction shouldFetchOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    shouldLoadOnMount(query, options) ||\n    (query.state.data !== undefined &&\n      shouldFetchOn(query, options, options.refetchOnMount))\n  )\n}\n\nfunction shouldFetchOn(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  field: (typeof options)['refetchOnMount'] &\n    (typeof options)['refetchOnWindowFocus'] &\n    (typeof options)['refetchOnReconnect'],\n) {\n  if (\n    resolveEnabled(options.enabled, query) !== false &&\n    resolveStaleTime(options.staleTime, query) !== 'static'\n  ) {\n    const value = typeof field === 'function' ? field(query) : field\n\n    return value === 'always' || (value !== false && isStale(query, options))\n  }\n  return false\n}\n\nfunction shouldFetchOptionally(\n  query: Query<any, any, any, any>,\n  prevQuery: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  prevOptions: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    (query !== prevQuery ||\n      resolveEnabled(prevOptions.enabled, query) === false) &&\n    (!options.suspense || query.state.status !== 'error') &&\n    isStale(query, options)\n  )\n}\n\nfunction isStale(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    resolveEnabled(options.enabled, query) !== false &&\n    query.isStaleByTime(resolveStaleTime(options.staleTime, query))\n  )\n}\n\n// this function would decide if we will update the observer's 'current'\n// properties after an optimistic reading via getOptimisticResult\nfunction shouldAssignObserverCurrentProperties<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  observer: QueryObserver<TQueryFnData, TError, TData, TQueryData, TQueryKey>,\n  optimisticResult: QueryObserverResult<TData, TError>,\n) {\n  // if the newly created result isn't what the observer is holding as current,\n  // then we'll need to update the properties as well\n  if (!shallowEqualObjects(observer.getCurrentResult(), optimisticResult)) {\n    return true\n  }\n\n  // basically, just keep previous properties if nothing changed\n  return false\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}