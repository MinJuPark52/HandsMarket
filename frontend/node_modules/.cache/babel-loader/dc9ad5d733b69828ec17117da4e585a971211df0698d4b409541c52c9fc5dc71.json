{"ast":null,"code":"// src/notifyManager.ts\nvar defaultScheduler = function defaultScheduler(cb) {\n  return setTimeout(cb, 0);\n};\nfunction createNotifyManager() {\n  var queue = [];\n  var transactions = 0;\n  var notifyFn = function notifyFn(callback) {\n    callback();\n  };\n  var batchNotifyFn = function batchNotifyFn(callback) {\n    callback();\n  };\n  var scheduleFn = defaultScheduler;\n  var schedule = function schedule(callback) {\n    if (transactions) {\n      queue.push(callback);\n    } else {\n      scheduleFn(function () {\n        notifyFn(callback);\n      });\n    }\n  };\n  var flush = function flush() {\n    var originalQueue = queue;\n    queue = [];\n    if (originalQueue.length) {\n      scheduleFn(function () {\n        batchNotifyFn(function () {\n          originalQueue.forEach(function (callback) {\n            notifyFn(callback);\n          });\n        });\n      });\n    }\n  };\n  return {\n    batch: function batch(callback) {\n      var result;\n      transactions++;\n      try {\n        result = callback();\n      } finally {\n        transactions--;\n        if (!transactions) {\n          flush();\n        }\n      }\n      return result;\n    },\n    /**\n     * All calls to the wrapped function will be batched.\n     */\n    batchCalls: function batchCalls(callback) {\n      return function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        schedule(function () {\n          callback.apply(void 0, args);\n        });\n      };\n    },\n    schedule: schedule,\n    /**\n     * Use this method to set a custom notify function.\n     * This can be used to for example wrap notifications with `React.act` while running tests.\n     */\n    setNotifyFunction: function setNotifyFunction(fn) {\n      notifyFn = fn;\n    },\n    /**\n     * Use this method to set a custom function to batch notifications together into a single tick.\n     * By default React Query will use the batch function provided by ReactDOM or React Native.\n     */\n    setBatchNotifyFunction: function setBatchNotifyFunction(fn) {\n      batchNotifyFn = fn;\n    },\n    setScheduler: function setScheduler(fn) {\n      scheduleFn = fn;\n    }\n  };\n}\nvar notifyManager = createNotifyManager();\nexport { createNotifyManager, defaultScheduler, notifyManager };","map":{"version":3,"names":["defaultScheduler","cb","setTimeout","createNotifyManager","queue","transactions","notifyFn","callback","batchNotifyFn","scheduleFn","schedule","push","flush","originalQueue","length","forEach","batch","result","batchCalls","_len","arguments","args","Array","_key","apply","setNotifyFunction","fn","setBatchNotifyFunction","setScheduler","notifyManager"],"sources":["C:\\Users\\als40\\Desktop\\HandsMarket\\node_modules\\@tanstack\\query-core\\src\\notifyManager.ts"],"sourcesContent":["// TYPES\n\ntype NotifyCallback = () => void\n\ntype NotifyFunction = (callback: () => void) => void\n\ntype BatchNotifyFunction = (callback: () => void) => void\n\ntype BatchCallsCallback<T extends Array<unknown>> = (...args: T) => void\n\ntype ScheduleFunction = (callback: () => void) => void\n\nexport const defaultScheduler: ScheduleFunction = (cb) => setTimeout(cb, 0)\n\nexport function createNotifyManager() {\n  let queue: Array<NotifyCallback> = []\n  let transactions = 0\n  let notifyFn: NotifyFunction = (callback) => {\n    callback()\n  }\n  let batchNotifyFn: BatchNotifyFunction = (callback: () => void) => {\n    callback()\n  }\n  let scheduleFn = defaultScheduler\n\n  const schedule = (callback: NotifyCallback): void => {\n    if (transactions) {\n      queue.push(callback)\n    } else {\n      scheduleFn(() => {\n        notifyFn(callback)\n      })\n    }\n  }\n  const flush = (): void => {\n    const originalQueue = queue\n    queue = []\n    if (originalQueue.length) {\n      scheduleFn(() => {\n        batchNotifyFn(() => {\n          originalQueue.forEach((callback) => {\n            notifyFn(callback)\n          })\n        })\n      })\n    }\n  }\n\n  return {\n    batch: <T>(callback: () => T): T => {\n      let result\n      transactions++\n      try {\n        result = callback()\n      } finally {\n        transactions--\n        if (!transactions) {\n          flush()\n        }\n      }\n      return result\n    },\n    /**\n     * All calls to the wrapped function will be batched.\n     */\n    batchCalls: <T extends Array<unknown>>(\n      callback: BatchCallsCallback<T>,\n    ): BatchCallsCallback<T> => {\n      return (...args) => {\n        schedule(() => {\n          callback(...args)\n        })\n      }\n    },\n    schedule,\n    /**\n     * Use this method to set a custom notify function.\n     * This can be used to for example wrap notifications with `React.act` while running tests.\n     */\n    setNotifyFunction: (fn: NotifyFunction) => {\n      notifyFn = fn\n    },\n    /**\n     * Use this method to set a custom function to batch notifications together into a single tick.\n     * By default React Query will use the batch function provided by ReactDOM or React Native.\n     */\n    setBatchNotifyFunction: (fn: BatchNotifyFunction) => {\n      batchNotifyFn = fn\n    },\n    setScheduler: (fn: ScheduleFunction) => {\n      scheduleFn = fn\n    },\n  } as const\n}\n\n// SINGLETON\nexport const notifyManager = createNotifyManager()\n"],"mappings":";AAYO,IAAMA,gBAAA,GAAqC,SAArCA,iBAAsCC,EAAA;EAAA,OAAOC,UAAA,CAAWD,EAAA,EAAI,CAAC;AAAA;AAEnE,SAASE,oBAAA,EAAsB;EACpC,IAAIC,KAAA,GAA+B,EAAC;EACpC,IAAIC,YAAA,GAAe;EACnB,IAAIC,QAAA,GAA2B,SAA3BA,SAA4BC,QAAA,EAAa;IAC3CA,QAAA,CAAS;EACX;EACA,IAAIC,aAAA,GAAqC,SAArCA,cAAsCD,QAAA,EAAyB;IACjEA,QAAA,CAAS;EACX;EACA,IAAIE,UAAA,GAAaT,gBAAA;EAEjB,IAAMU,QAAA,GAAW,SAAXA,SAAYH,QAAA,EAAmC;IACnD,IAAIF,YAAA,EAAc;MAChBD,KAAA,CAAMO,IAAA,CAAKJ,QAAQ;IACrB,OAAO;MACLE,UAAA,CAAW,YAAM;QACfH,QAAA,CAASC,QAAQ;MACnB,CAAC;IACH;EACF;EACA,IAAMK,KAAA,GAAQ,SAARA,MAAA,EAAoB;IACxB,IAAMC,aAAA,GAAgBT,KAAA;IACtBA,KAAA,GAAQ,EAAC;IACT,IAAIS,aAAA,CAAcC,MAAA,EAAQ;MACxBL,UAAA,CAAW,YAAM;QACfD,aAAA,CAAc,YAAM;UAClBK,aAAA,CAAcE,OAAA,CAAQ,UAACR,QAAA,EAAa;YAClCD,QAAA,CAASC,QAAQ;UACnB,CAAC;QACH,CAAC;MACH,CAAC;IACH;EACF;EAEA,OAAO;IACLS,KAAA,EAAO,SAAPA,MAAWT,QAAA,EAAyB;MAClC,IAAIU,MAAA;MACJZ,YAAA;MACA,IAAI;QACFY,MAAA,GAASV,QAAA,CAAS;MACpB,UAAE;QACAF,YAAA;QACA,IAAI,CAACA,YAAA,EAAc;UACjBO,KAAA,CAAM;QACR;MACF;MACA,OAAOK,MAAA;IACT;IAAA;AAAA;AAAA;IAIAC,UAAA,EAAY,SAAZA,WACEX,QAAA,EAC0B;MAC1B,OAAO,YAAa;QAAA,SAAAY,IAAA,GAAAC,SAAA,CAAAN,MAAA,EAATO,IAAA,OAAAC,KAAA,CAAAH,IAAA,GAAAI,IAAA,MAAAA,IAAA,GAAAJ,IAAA,EAAAI,IAAA;UAAAF,IAAA,CAAAE,IAAA,IAAAH,SAAA,CAAAG,IAAA;QAAA;QACTb,QAAA,CAAS,YAAM;UACbH,QAAA,CAAAiB,KAAA,SAAYH,IAAI;QAClB,CAAC;MACH;IACF;IACAX,QAAA,EAAAA,QAAA;IAAA;AAAA;AAAA;AAAA;IAKAe,iBAAA,EAAmB,SAAnBA,kBAAoBC,EAAA,EAAuB;MACzCpB,QAAA,GAAWoB,EAAA;IACb;IAAA;AAAA;AAAA;AAAA;IAKAC,sBAAA,EAAwB,SAAxBA,uBAAyBD,EAAA,EAA4B;MACnDlB,aAAA,GAAgBkB,EAAA;IAClB;IACAE,YAAA,EAAc,SAAdA,aAAeF,EAAA,EAAyB;MACtCjB,UAAA,GAAaiB,EAAA;IACf;EACF;AACF;AAGO,IAAMG,aAAA,GAAgB1B,mBAAA,CAAoB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}